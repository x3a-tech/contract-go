// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: assistant/assistant.proto

package assistantv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Assistant_CreateChat_FullMethodName        = "/assistant.Assistant/CreateChat"
	Assistant_ChangeChatFolder_FullMethodName  = "/assistant.Assistant/ChangeChatFolder"
	Assistant_ChangeChatTitle_FullMethodName   = "/assistant.Assistant/ChangeChatTitle"
	Assistant_DeleteChat_FullMethodName        = "/assistant.Assistant/DeleteChat"
	Assistant_GetChatByID_FullMethodName       = "/assistant.Assistant/GetChatByID"
	Assistant_GetChatsInFolder_FullMethodName  = "/assistant.Assistant/GetChatsInFolder"
	Assistant_GetUserChats_FullMethodName      = "/assistant.Assistant/GetUserChats"
	Assistant_CreateFolder_FullMethodName      = "/assistant.Assistant/CreateFolder"
	Assistant_DeleteFolder_FullMethodName      = "/assistant.Assistant/DeleteFolder"
	Assistant_GetFolderByID_FullMethodName     = "/assistant.Assistant/GetFolderByID"
	Assistant_GetUserFolders_FullMethodName    = "/assistant.Assistant/GetUserFolders"
	Assistant_SendMessage_FullMethodName       = "/assistant.Assistant/SendMessage"
	Assistant_SendMessageStream_FullMethodName = "/assistant.Assistant/SendMessageStream"
	Assistant_AddMessage_FullMethodName        = "/assistant.Assistant/AddMessage"
	Assistant_GetMessageByID_FullMethodName    = "/assistant.Assistant/GetMessageByID"
	Assistant_GetMessagesInChat_FullMethodName = "/assistant.Assistant/GetMessagesInChat"
)

// AssistantClient is the client API for Assistant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssistantClient interface {
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error)
	ChangeChatFolder(ctx context.Context, in *ChangeChatFolderRequest, opts ...grpc.CallOption) (*ChangeChatFolderResponse, error)
	ChangeChatTitle(ctx context.Context, in *ChangeChatTitleRequest, opts ...grpc.CallOption) (*ChangeChatTitleResponse, error)
	DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*Empty, error)
	GetChatByID(ctx context.Context, in *GetChatByIDRequest, opts ...grpc.CallOption) (*GetChatByIDResponse, error)
	GetChatsInFolder(ctx context.Context, in *GetChatsInFolderRequest, opts ...grpc.CallOption) (*GetChatsInFolderResponse, error)
	GetUserChats(ctx context.Context, in *GetUserChatsRequest, opts ...grpc.CallOption) (*GetUserChatsResponse, error)
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResponse, error)
	DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*Empty, error)
	GetFolderByID(ctx context.Context, in *GetFolderByIDRequest, opts ...grpc.CallOption) (*GetFolderByIDResponse, error)
	GetUserFolders(ctx context.Context, in *GetUserFoldersRequest, opts ...grpc.CallOption) (*GetUserFoldersResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	SendMessageStream(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageDelta], error)
	AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*Empty, error)
	GetMessageByID(ctx context.Context, in *GetMessageByIDRequest, opts ...grpc.CallOption) (*GetMessageByIDResponse, error)
	GetMessagesInChat(ctx context.Context, in *GetMessagesInChatRequest, opts ...grpc.CallOption) (*GetMessagesInChatResponse, error)
}

type assistantClient struct {
	cc grpc.ClientConnInterface
}

func NewAssistantClient(cc grpc.ClientConnInterface) AssistantClient {
	return &assistantClient{cc}
}

func (c *assistantClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, Assistant_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) ChangeChatFolder(ctx context.Context, in *ChangeChatFolderRequest, opts ...grpc.CallOption) (*ChangeChatFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeChatFolderResponse)
	err := c.cc.Invoke(ctx, Assistant_ChangeChatFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) ChangeChatTitle(ctx context.Context, in *ChangeChatTitleRequest, opts ...grpc.CallOption) (*ChangeChatTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeChatTitleResponse)
	err := c.cc.Invoke(ctx, Assistant_ChangeChatTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Assistant_DeleteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) GetChatByID(ctx context.Context, in *GetChatByIDRequest, opts ...grpc.CallOption) (*GetChatByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatByIDResponse)
	err := c.cc.Invoke(ctx, Assistant_GetChatByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) GetChatsInFolder(ctx context.Context, in *GetChatsInFolderRequest, opts ...grpc.CallOption) (*GetChatsInFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatsInFolderResponse)
	err := c.cc.Invoke(ctx, Assistant_GetChatsInFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) GetUserChats(ctx context.Context, in *GetUserChatsRequest, opts ...grpc.CallOption) (*GetUserChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserChatsResponse)
	err := c.cc.Invoke(ctx, Assistant_GetUserChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFolderResponse)
	err := c.cc.Invoke(ctx, Assistant_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Assistant_DeleteFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) GetFolderByID(ctx context.Context, in *GetFolderByIDRequest, opts ...grpc.CallOption) (*GetFolderByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFolderByIDResponse)
	err := c.cc.Invoke(ctx, Assistant_GetFolderByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) GetUserFolders(ctx context.Context, in *GetUserFoldersRequest, opts ...grpc.CallOption) (*GetUserFoldersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFoldersResponse)
	err := c.cc.Invoke(ctx, Assistant_GetUserFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, Assistant_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) SendMessageStream(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageDelta], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Assistant_ServiceDesc.Streams[0], Assistant_SendMessageStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendMessageRequest, MessageDelta]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Assistant_SendMessageStreamClient = grpc.ServerStreamingClient[MessageDelta]

func (c *assistantClient) AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Assistant_AddMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) GetMessageByID(ctx context.Context, in *GetMessageByIDRequest, opts ...grpc.CallOption) (*GetMessageByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageByIDResponse)
	err := c.cc.Invoke(ctx, Assistant_GetMessageByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantClient) GetMessagesInChat(ctx context.Context, in *GetMessagesInChatRequest, opts ...grpc.CallOption) (*GetMessagesInChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesInChatResponse)
	err := c.cc.Invoke(ctx, Assistant_GetMessagesInChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssistantServer is the server API for Assistant service.
// All implementations must embed UnimplementedAssistantServer
// for forward compatibility.
type AssistantServer interface {
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error)
	ChangeChatFolder(context.Context, *ChangeChatFolderRequest) (*ChangeChatFolderResponse, error)
	ChangeChatTitle(context.Context, *ChangeChatTitleRequest) (*ChangeChatTitleResponse, error)
	DeleteChat(context.Context, *DeleteChatRequest) (*Empty, error)
	GetChatByID(context.Context, *GetChatByIDRequest) (*GetChatByIDResponse, error)
	GetChatsInFolder(context.Context, *GetChatsInFolderRequest) (*GetChatsInFolderResponse, error)
	GetUserChats(context.Context, *GetUserChatsRequest) (*GetUserChatsResponse, error)
	CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResponse, error)
	DeleteFolder(context.Context, *DeleteFolderRequest) (*Empty, error)
	GetFolderByID(context.Context, *GetFolderByIDRequest) (*GetFolderByIDResponse, error)
	GetUserFolders(context.Context, *GetUserFoldersRequest) (*GetUserFoldersResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	SendMessageStream(*SendMessageRequest, grpc.ServerStreamingServer[MessageDelta]) error
	AddMessage(context.Context, *AddMessageRequest) (*Empty, error)
	GetMessageByID(context.Context, *GetMessageByIDRequest) (*GetMessageByIDResponse, error)
	GetMessagesInChat(context.Context, *GetMessagesInChatRequest) (*GetMessagesInChatResponse, error)
	mustEmbedUnimplementedAssistantServer()
}

// UnimplementedAssistantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssistantServer struct{}

func (UnimplementedAssistantServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedAssistantServer) ChangeChatFolder(context.Context, *ChangeChatFolderRequest) (*ChangeChatFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeChatFolder not implemented")
}
func (UnimplementedAssistantServer) ChangeChatTitle(context.Context, *ChangeChatTitleRequest) (*ChangeChatTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeChatTitle not implemented")
}
func (UnimplementedAssistantServer) DeleteChat(context.Context, *DeleteChatRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedAssistantServer) GetChatByID(context.Context, *GetChatByIDRequest) (*GetChatByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatByID not implemented")
}
func (UnimplementedAssistantServer) GetChatsInFolder(context.Context, *GetChatsInFolderRequest) (*GetChatsInFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatsInFolder not implemented")
}
func (UnimplementedAssistantServer) GetUserChats(context.Context, *GetUserChatsRequest) (*GetUserChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChats not implemented")
}
func (UnimplementedAssistantServer) CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedAssistantServer) DeleteFolder(context.Context, *DeleteFolderRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (UnimplementedAssistantServer) GetFolderByID(context.Context, *GetFolderByIDRequest) (*GetFolderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderByID not implemented")
}
func (UnimplementedAssistantServer) GetUserFolders(context.Context, *GetUserFoldersRequest) (*GetUserFoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFolders not implemented")
}
func (UnimplementedAssistantServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedAssistantServer) SendMessageStream(*SendMessageRequest, grpc.ServerStreamingServer[MessageDelta]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessageStream not implemented")
}
func (UnimplementedAssistantServer) AddMessage(context.Context, *AddMessageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (UnimplementedAssistantServer) GetMessageByID(context.Context, *GetMessageByIDRequest) (*GetMessageByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByID not implemented")
}
func (UnimplementedAssistantServer) GetMessagesInChat(context.Context, *GetMessagesInChatRequest) (*GetMessagesInChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesInChat not implemented")
}
func (UnimplementedAssistantServer) mustEmbedUnimplementedAssistantServer() {}
func (UnimplementedAssistantServer) testEmbeddedByValue()                   {}

// UnsafeAssistantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssistantServer will
// result in compilation errors.
type UnsafeAssistantServer interface {
	mustEmbedUnimplementedAssistantServer()
}

func RegisterAssistantServer(s grpc.ServiceRegistrar, srv AssistantServer) {
	// If the following call pancis, it indicates UnimplementedAssistantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Assistant_ServiceDesc, srv)
}

func _Assistant_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_ChangeChatFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeChatFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).ChangeChatFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_ChangeChatFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).ChangeChatFolder(ctx, req.(*ChangeChatFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_ChangeChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeChatTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).ChangeChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_ChangeChatTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).ChangeChatTitle(ctx, req.(*ChangeChatTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).DeleteChat(ctx, req.(*DeleteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_GetChatByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).GetChatByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_GetChatByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).GetChatByID(ctx, req.(*GetChatByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_GetChatsInFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsInFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).GetChatsInFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_GetChatsInFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).GetChatsInFolder(ctx, req.(*GetChatsInFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_GetUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).GetUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_GetUserChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).GetUserChats(ctx, req.(*GetUserChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_DeleteFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).DeleteFolder(ctx, req.(*DeleteFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_GetFolderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).GetFolderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_GetFolderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).GetFolderByID(ctx, req.(*GetFolderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_GetUserFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).GetUserFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_GetUserFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).GetUserFolders(ctx, req.(*GetUserFoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_SendMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssistantServer).SendMessageStream(m, &grpc.GenericServerStream[SendMessageRequest, MessageDelta]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Assistant_SendMessageStreamServer = grpc.ServerStreamingServer[MessageDelta]

func _Assistant_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_AddMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).AddMessage(ctx, req.(*AddMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_GetMessageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).GetMessageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_GetMessageByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).GetMessageByID(ctx, req.(*GetMessageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assistant_GetMessagesInChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesInChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServer).GetMessagesInChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assistant_GetMessagesInChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServer).GetMessagesInChat(ctx, req.(*GetMessagesInChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Assistant_ServiceDesc is the grpc.ServiceDesc for Assistant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assistant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assistant.Assistant",
	HandlerType: (*AssistantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _Assistant_CreateChat_Handler,
		},
		{
			MethodName: "ChangeChatFolder",
			Handler:    _Assistant_ChangeChatFolder_Handler,
		},
		{
			MethodName: "ChangeChatTitle",
			Handler:    _Assistant_ChangeChatTitle_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _Assistant_DeleteChat_Handler,
		},
		{
			MethodName: "GetChatByID",
			Handler:    _Assistant_GetChatByID_Handler,
		},
		{
			MethodName: "GetChatsInFolder",
			Handler:    _Assistant_GetChatsInFolder_Handler,
		},
		{
			MethodName: "GetUserChats",
			Handler:    _Assistant_GetUserChats_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _Assistant_CreateFolder_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _Assistant_DeleteFolder_Handler,
		},
		{
			MethodName: "GetFolderByID",
			Handler:    _Assistant_GetFolderByID_Handler,
		},
		{
			MethodName: "GetUserFolders",
			Handler:    _Assistant_GetUserFolders_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Assistant_SendMessage_Handler,
		},
		{
			MethodName: "AddMessage",
			Handler:    _Assistant_AddMessage_Handler,
		},
		{
			MethodName: "GetMessageByID",
			Handler:    _Assistant_GetMessageByID_Handler,
		},
		{
			MethodName: "GetMessagesInChat",
			Handler:    _Assistant_GetMessagesInChat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessageStream",
			Handler:       _Assistant_SendMessageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "assistant/assistant.proto",
}
