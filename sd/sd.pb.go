// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: sd/sd.proto

package sdv1

import (
	common "github.com/x3a-tech/contract-go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GroupKeys
type GetGroupKeysParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListParams    *common.ListParams     `protobuf:"bytes,1,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupKeysParams) Reset() {
	*x = GetGroupKeysParams{}
	mi := &file_sd_sd_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupKeysParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupKeysParams) ProtoMessage() {}

func (x *GetGroupKeysParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupKeysParams.ProtoReflect.Descriptor instead.
func (*GetGroupKeysParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{0}
}

func (x *GetGroupKeysParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

type GetGroupKeysResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupKeys     []*GroupKey            `protobuf:"bytes,1,rep,name=group_keys,json=groupKeys,proto3" json:"group_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupKeysResponse) Reset() {
	*x = GetGroupKeysResponse{}
	mi := &file_sd_sd_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupKeysResponse) ProtoMessage() {}

func (x *GetGroupKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupKeysResponse.ProtoReflect.Descriptor instead.
func (*GetGroupKeysResponse) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{1}
}

func (x *GetGroupKeysResponse) GetGroupKeys() []*GroupKey {
	if x != nil {
		return x.GroupKeys
	}
	return nil
}

type CreateGroupKeysParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupKeys     []*NewGroupKey         `protobuf:"bytes,1,rep,name=group_keys,json=groupKeys,proto3" json:"group_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGroupKeysParams) Reset() {
	*x = CreateGroupKeysParams{}
	mi := &file_sd_sd_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGroupKeysParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupKeysParams) ProtoMessage() {}

func (x *CreateGroupKeysParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupKeysParams.ProtoReflect.Descriptor instead.
func (*CreateGroupKeysParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGroupKeysParams) GetGroupKeys() []*NewGroupKey {
	if x != nil {
		return x.GroupKeys
	}
	return nil
}

type CreateGroupKeysResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupKeys     []*GroupKey            `protobuf:"bytes,1,rep,name=group_keys,json=groupKeys,proto3" json:"group_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGroupKeysResponse) Reset() {
	*x = CreateGroupKeysResponse{}
	mi := &file_sd_sd_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGroupKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupKeysResponse) ProtoMessage() {}

func (x *CreateGroupKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupKeysResponse.ProtoReflect.Descriptor instead.
func (*CreateGroupKeysResponse) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGroupKeysResponse) GetGroupKeys() []*GroupKey {
	if x != nil {
		return x.GroupKeys
	}
	return nil
}

type RemoveGroupKeysParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupKeys     []int32                `protobuf:"varint,1,rep,packed,name=group_keys,json=groupKeys,proto3" json:"group_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveGroupKeysParams) Reset() {
	*x = RemoveGroupKeysParams{}
	mi := &file_sd_sd_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveGroupKeysParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveGroupKeysParams) ProtoMessage() {}

func (x *RemoveGroupKeysParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveGroupKeysParams.ProtoReflect.Descriptor instead.
func (*RemoveGroupKeysParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveGroupKeysParams) GetGroupKeys() []int32 {
	if x != nil {
		return x.GroupKeys
	}
	return nil
}

// Lists
type GetListsParams struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ListFilter     *ListFilter            `protobuf:"bytes,1,opt,name=listFilter,proto3" json:"listFilter,omitempty"`
	EntitiesFilter *EntitiesFilter        `protobuf:"bytes,2,opt,name=entitiesFilter,proto3" json:"entitiesFilter,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetListsParams) Reset() {
	*x = GetListsParams{}
	mi := &file_sd_sd_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetListsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListsParams) ProtoMessage() {}

func (x *GetListsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListsParams.ProtoReflect.Descriptor instead.
func (*GetListsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{5}
}

func (x *GetListsParams) GetListFilter() *ListFilter {
	if x != nil {
		return x.ListFilter
	}
	return nil
}

func (x *GetListsParams) GetEntitiesFilter() *EntitiesFilter {
	if x != nil {
		return x.EntitiesFilter
	}
	return nil
}

type GetListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lists         []*List                `protobuf:"bytes,1,rep,name=lists,proto3" json:"lists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	mi := &file_sd_sd_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{6}
}

func (x *GetListResponse) GetLists() []*List {
	if x != nil {
		return x.Lists
	}
	return nil
}

type CreateListParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slug          string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	ParentId      *int32                 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Order         *int32                 `protobuf:"varint,3,opt,name=order,proto3,oneof" json:"order,omitempty"`
	IsShow        *int32                 `protobuf:"varint,4,opt,name=is_show,json=isShow,proto3,oneof" json:"is_show,omitempty"`
	Name          []*common.NewL10N      `protobuf:"bytes,5,rep,name=name,proto3" json:"name,omitempty"`
	Description   []*common.NewL10N      `protobuf:"bytes,6,rep,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateListParams) Reset() {
	*x = CreateListParams{}
	mi := &file_sd_sd_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateListParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateListParams) ProtoMessage() {}

func (x *CreateListParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateListParams.ProtoReflect.Descriptor instead.
func (*CreateListParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{7}
}

func (x *CreateListParams) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreateListParams) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *CreateListParams) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *CreateListParams) GetIsShow() int32 {
	if x != nil && x.IsShow != nil {
		return *x.IsShow
	}
	return 0
}

func (x *CreateListParams) GetName() []*common.NewL10N {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateListParams) GetDescription() []*common.NewL10N {
	if x != nil {
		return x.Description
	}
	return nil
}

type UpdateListSlugParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug          string                 `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateListSlugParams) Reset() {
	*x = UpdateListSlugParams{}
	mi := &file_sd_sd_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateListSlugParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateListSlugParams) ProtoMessage() {}

func (x *UpdateListSlugParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateListSlugParams.ProtoReflect.Descriptor instead.
func (*UpdateListSlugParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateListSlugParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateListSlugParams) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type UpsertEntityFieldValueParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      int32                  `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Value         *FieldValue            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertEntityFieldValueParams) Reset() {
	*x = UpsertEntityFieldValueParams{}
	mi := &file_sd_sd_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertEntityFieldValueParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEntityFieldValueParams) ProtoMessage() {}

func (x *UpsertEntityFieldValueParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEntityFieldValueParams.ProtoReflect.Descriptor instead.
func (*UpsertEntityFieldValueParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{9}
}

func (x *UpsertEntityFieldValueParams) GetEntityId() int32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *UpsertEntityFieldValueParams) GetValue() *FieldValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type RemoveEntityFieldValueParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      int32                  `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	FieldId       int32                  `protobuf:"varint,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveEntityFieldValueParams) Reset() {
	*x = RemoveEntityFieldValueParams{}
	mi := &file_sd_sd_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveEntityFieldValueParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveEntityFieldValueParams) ProtoMessage() {}

func (x *RemoveEntityFieldValueParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveEntityFieldValueParams.ProtoReflect.Descriptor instead.
func (*RemoveEntityFieldValueParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveEntityFieldValueParams) GetEntityId() int32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *RemoveEntityFieldValueParams) GetFieldId() int32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

type UpsertEntityFieldImageParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      int32                  `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Image         []byte                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertEntityFieldImageParams) Reset() {
	*x = UpsertEntityFieldImageParams{}
	mi := &file_sd_sd_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertEntityFieldImageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEntityFieldImageParams) ProtoMessage() {}

func (x *UpsertEntityFieldImageParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEntityFieldImageParams.ProtoReflect.Descriptor instead.
func (*UpsertEntityFieldImageParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{11}
}

func (x *UpsertEntityFieldImageParams) GetEntityId() int32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *UpsertEntityFieldImageParams) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type UpsertEntityFieldImageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageUuid     []byte                 `protobuf:"bytes,1,opt,name=image_uuid,json=imageUuid,proto3" json:"image_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertEntityFieldImageResponse) Reset() {
	*x = UpsertEntityFieldImageResponse{}
	mi := &file_sd_sd_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertEntityFieldImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEntityFieldImageResponse) ProtoMessage() {}

func (x *UpsertEntityFieldImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEntityFieldImageResponse.ProtoReflect.Descriptor instead.
func (*UpsertEntityFieldImageResponse) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{12}
}

func (x *UpsertEntityFieldImageResponse) GetImageUuid() []byte {
	if x != nil {
		return x.ImageUuid
	}
	return nil
}

type RemoveEntityFieldImageParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      int32                  `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	FieldId       int32                  `protobuf:"varint,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveEntityFieldImageParams) Reset() {
	*x = RemoveEntityFieldImageParams{}
	mi := &file_sd_sd_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveEntityFieldImageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveEntityFieldImageParams) ProtoMessage() {}

func (x *RemoveEntityFieldImageParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveEntityFieldImageParams.ProtoReflect.Descriptor instead.
func (*RemoveEntityFieldImageParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveEntityFieldImageParams) GetEntityId() int32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *RemoveEntityFieldImageParams) GetFieldId() int32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

type UpdateListMetaParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId      *int32                 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Order         *int32                 `protobuf:"varint,3,opt,name=order,proto3,oneof" json:"order,omitempty"`
	IsShow        *bool                  `protobuf:"varint,4,opt,name=is_show,json=isShow,proto3,oneof" json:"is_show,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateListMetaParams) Reset() {
	*x = UpdateListMetaParams{}
	mi := &file_sd_sd_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateListMetaParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateListMetaParams) ProtoMessage() {}

func (x *UpdateListMetaParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateListMetaParams.ProtoReflect.Descriptor instead.
func (*UpdateListMetaParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateListMetaParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateListMetaParams) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *UpdateListMetaParams) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *UpdateListMetaParams) GetIsShow() bool {
	if x != nil && x.IsShow != nil {
		return *x.IsShow
	}
	return false
}

type UpdateListImageParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Image         []byte                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateListImageParams) Reset() {
	*x = UpdateListImageParams{}
	mi := &file_sd_sd_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateListImageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateListImageParams) ProtoMessage() {}

func (x *UpdateListImageParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateListImageParams.ProtoReflect.Descriptor instead.
func (*UpdateListImageParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateListImageParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateListImageParams) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type UpdateListImageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         []byte                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateListImageResponse) Reset() {
	*x = UpdateListImageResponse{}
	mi := &file_sd_sd_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateListImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateListImageResponse) ProtoMessage() {}

func (x *UpdateListImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateListImageResponse.ProtoReflect.Descriptor instead.
func (*UpdateListImageResponse) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateListImageResponse) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type RemoveListImageParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveListImageParams) Reset() {
	*x = RemoveListImageParams{}
	mi := &file_sd_sd_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveListImageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveListImageParams) ProtoMessage() {}

func (x *RemoveListImageParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveListImageParams.ProtoReflect.Descriptor instead.
func (*RemoveListImageParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveListImageParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateListL10NsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	L10Ns         []*UpdateL10N          `protobuf:"bytes,1,rep,name=l10ns,proto3" json:"l10ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateListL10NsParams) Reset() {
	*x = UpdateListL10NsParams{}
	mi := &file_sd_sd_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateListL10NsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateListL10NsParams) ProtoMessage() {}

func (x *UpdateListL10NsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateListL10NsParams.ProtoReflect.Descriptor instead.
func (*UpdateListL10NsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateListL10NsParams) GetL10Ns() []*UpdateL10N {
	if x != nil {
		return x.L10Ns
	}
	return nil
}

type SingleManipulationListsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []int32                `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleManipulationListsParams) Reset() {
	*x = SingleManipulationListsParams{}
	mi := &file_sd_sd_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleManipulationListsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleManipulationListsParams) ProtoMessage() {}

func (x *SingleManipulationListsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleManipulationListsParams.ProtoReflect.Descriptor instead.
func (*SingleManipulationListsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{19}
}

func (x *SingleManipulationListsParams) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type SortList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         int32                  `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	ListId        int32                  `protobuf:"varint,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortList) Reset() {
	*x = SortList{}
	mi := &file_sd_sd_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortList) ProtoMessage() {}

func (x *SortList) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortList.ProtoReflect.Descriptor instead.
func (*SortList) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{20}
}

func (x *SortList) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *SortList) GetListId() int32 {
	if x != nil {
		return x.ListId
	}
	return 0
}

type SortListParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sorts         []*SortList            `protobuf:"bytes,1,rep,name=sorts,proto3" json:"sorts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortListParams) Reset() {
	*x = SortListParams{}
	mi := &file_sd_sd_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortListParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortListParams) ProtoMessage() {}

func (x *SortListParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortListParams.ProtoReflect.Descriptor instead.
func (*SortListParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{21}
}

func (x *SortListParams) GetSorts() []*SortList {
	if x != nil {
		return x.Sorts
	}
	return nil
}

type AttachListsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParentIds     []int32                `protobuf:"varint,1,rep,packed,name=parent_ids,json=parentIds,proto3" json:"parent_ids,omitempty"`
	ChildIds      []int32                `protobuf:"varint,2,rep,packed,name=child_ids,json=childIds,proto3" json:"child_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachListsParams) Reset() {
	*x = AttachListsParams{}
	mi := &file_sd_sd_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachListsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachListsParams) ProtoMessage() {}

func (x *AttachListsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachListsParams.ProtoReflect.Descriptor instead.
func (*AttachListsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{22}
}

func (x *AttachListsParams) GetParentIds() []int32 {
	if x != nil {
		return x.ParentIds
	}
	return nil
}

func (x *AttachListsParams) GetChildIds() []int32 {
	if x != nil {
		return x.ChildIds
	}
	return nil
}

type CopyListParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           int32                  `protobuf:"varint,1,opt,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyListParams) Reset() {
	*x = CopyListParams{}
	mi := &file_sd_sd_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyListParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyListParams) ProtoMessage() {}

func (x *CopyListParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyListParams.ProtoReflect.Descriptor instead.
func (*CopyListParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{23}
}

func (x *CopyListParams) GetIds() int32 {
	if x != nil {
		return x.Ids
	}
	return 0
}

type CheckFreeSlugInListParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slug          string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckFreeSlugInListParams) Reset() {
	*x = CheckFreeSlugInListParams{}
	mi := &file_sd_sd_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFreeSlugInListParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFreeSlugInListParams) ProtoMessage() {}

func (x *CheckFreeSlugInListParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFreeSlugInListParams.ProtoReflect.Descriptor instead.
func (*CheckFreeSlugInListParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{24}
}

func (x *CheckFreeSlugInListParams) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

// Entities
type GetEntitiesParams struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EntitiesFilter *EntitiesFilter        `protobuf:"bytes,1,opt,name=entities_filter,json=entitiesFilter,proto3" json:"entities_filter,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetEntitiesParams) Reset() {
	*x = GetEntitiesParams{}
	mi := &file_sd_sd_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntitiesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntitiesParams) ProtoMessage() {}

func (x *GetEntitiesParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntitiesParams.ProtoReflect.Descriptor instead.
func (*GetEntitiesParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{25}
}

func (x *GetEntitiesParams) GetEntitiesFilter() *EntitiesFilter {
	if x != nil {
		return x.EntitiesFilter
	}
	return nil
}

type GetEntitiesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*Entity              `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEntitiesResponse) Reset() {
	*x = GetEntitiesResponse{}
	mi := &file_sd_sd_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntitiesResponse) ProtoMessage() {}

func (x *GetEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntitiesResponse.ProtoReflect.Descriptor instead.
func (*GetEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{26}
}

func (x *GetEntitiesResponse) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type CreateEntityParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slug          string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Order         *int32                 `protobuf:"varint,2,opt,name=order,proto3,oneof" json:"order,omitempty"`
	IsShow        *bool                  `protobuf:"varint,3,opt,name=is_show,json=isShow,proto3,oneof" json:"is_show,omitempty"`
	Rating        *int32                 `protobuf:"varint,4,opt,name=rating,proto3,oneof" json:"rating,omitempty"`
	L10Ns         []*NewL10N             `protobuf:"bytes,5,rep,name=l10ns,proto3" json:"l10ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEntityParams) Reset() {
	*x = CreateEntityParams{}
	mi := &file_sd_sd_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEntityParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEntityParams) ProtoMessage() {}

func (x *CreateEntityParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEntityParams.ProtoReflect.Descriptor instead.
func (*CreateEntityParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{27}
}

func (x *CreateEntityParams) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreateEntityParams) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *CreateEntityParams) GetIsShow() bool {
	if x != nil && x.IsShow != nil {
		return *x.IsShow
	}
	return false
}

func (x *CreateEntityParams) GetRating() int32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

func (x *CreateEntityParams) GetL10Ns() []*NewL10N {
	if x != nil {
		return x.L10Ns
	}
	return nil
}

type UpdateEntitySlugParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug          string                 `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEntitySlugParams) Reset() {
	*x = UpdateEntitySlugParams{}
	mi := &file_sd_sd_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEntitySlugParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntitySlugParams) ProtoMessage() {}

func (x *UpdateEntitySlugParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntitySlugParams.ProtoReflect.Descriptor instead.
func (*UpdateEntitySlugParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateEntitySlugParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateEntitySlugParams) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type UpdateEntitiesRaringParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []int32                `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	Rating        int32                  `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEntitiesRaringParams) Reset() {
	*x = UpdateEntitiesRaringParams{}
	mi := &file_sd_sd_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEntitiesRaringParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntitiesRaringParams) ProtoMessage() {}

func (x *UpdateEntitiesRaringParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntitiesRaringParams.ProtoReflect.Descriptor instead.
func (*UpdateEntitiesRaringParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateEntitiesRaringParams) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateEntitiesRaringParams) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type UpdateEntityImageParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FieldId       int32                  `protobuf:"varint,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	Image         []byte                 `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEntityImageParams) Reset() {
	*x = UpdateEntityImageParams{}
	mi := &file_sd_sd_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEntityImageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntityImageParams) ProtoMessage() {}

func (x *UpdateEntityImageParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntityImageParams.ProtoReflect.Descriptor instead.
func (*UpdateEntityImageParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateEntityImageParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateEntityImageParams) GetFieldId() int32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *UpdateEntityImageParams) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type UpdateEntityImageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         []byte                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEntityImageResponse) Reset() {
	*x = UpdateEntityImageResponse{}
	mi := &file_sd_sd_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEntityImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntityImageResponse) ProtoMessage() {}

func (x *UpdateEntityImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntityImageResponse.ProtoReflect.Descriptor instead.
func (*UpdateEntityImageResponse) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateEntityImageResponse) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type RemoveEntityImageParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FieldId       int32                  `protobuf:"varint,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveEntityImageParams) Reset() {
	*x = RemoveEntityImageParams{}
	mi := &file_sd_sd_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveEntityImageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveEntityImageParams) ProtoMessage() {}

func (x *RemoveEntityImageParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveEntityImageParams.ProtoReflect.Descriptor instead.
func (*RemoveEntityImageParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{32}
}

func (x *RemoveEntityImageParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RemoveEntityImageParams) GetFieldId() int32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

type UpdateEntityL10NsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	L10Ns         []*UpdateL10N          `protobuf:"bytes,1,rep,name=l10ns,proto3" json:"l10ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEntityL10NsParams) Reset() {
	*x = UpdateEntityL10NsParams{}
	mi := &file_sd_sd_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEntityL10NsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntityL10NsParams) ProtoMessage() {}

func (x *UpdateEntityL10NsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntityL10NsParams.ProtoReflect.Descriptor instead.
func (*UpdateEntityL10NsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateEntityL10NsParams) GetL10Ns() []*UpdateL10N {
	if x != nil {
		return x.L10Ns
	}
	return nil
}

type SingleManipulationEntitiesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []int32                `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleManipulationEntitiesParams) Reset() {
	*x = SingleManipulationEntitiesParams{}
	mi := &file_sd_sd_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleManipulationEntitiesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleManipulationEntitiesParams) ProtoMessage() {}

func (x *SingleManipulationEntitiesParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleManipulationEntitiesParams.ProtoReflect.Descriptor instead.
func (*SingleManipulationEntitiesParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{34}
}

func (x *SingleManipulationEntitiesParams) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type AttachEntitiesToListsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListIds       []int32                `protobuf:"varint,1,rep,packed,name=list_ids,json=listIds,proto3" json:"list_ids,omitempty"`
	EntityIds     []int32                `protobuf:"varint,2,rep,packed,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachEntitiesToListsParams) Reset() {
	*x = AttachEntitiesToListsParams{}
	mi := &file_sd_sd_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachEntitiesToListsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachEntitiesToListsParams) ProtoMessage() {}

func (x *AttachEntitiesToListsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachEntitiesToListsParams.ProtoReflect.Descriptor instead.
func (*AttachEntitiesToListsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{35}
}

func (x *AttachEntitiesToListsParams) GetListIds() []int32 {
	if x != nil {
		return x.ListIds
	}
	return nil
}

func (x *AttachEntitiesToListsParams) GetEntityIds() []int32 {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

type CheckFreeSlugInEntitiesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slug          string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckFreeSlugInEntitiesParams) Reset() {
	*x = CheckFreeSlugInEntitiesParams{}
	mi := &file_sd_sd_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFreeSlugInEntitiesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFreeSlugInEntitiesParams) ProtoMessage() {}

func (x *CheckFreeSlugInEntitiesParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFreeSlugInEntitiesParams.ProtoReflect.Descriptor instead.
func (*CheckFreeSlugInEntitiesParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{36}
}

func (x *CheckFreeSlugInEntitiesParams) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type SortEntities struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         int32                  `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	ListId        int32                  `protobuf:"varint,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortEntities) Reset() {
	*x = SortEntities{}
	mi := &file_sd_sd_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortEntities) ProtoMessage() {}

func (x *SortEntities) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortEntities.ProtoReflect.Descriptor instead.
func (*SortEntities) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{37}
}

func (x *SortEntities) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *SortEntities) GetListId() int32 {
	if x != nil {
		return x.ListId
	}
	return 0
}

type SortEntitiesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sorts         []*SortEntities        `protobuf:"bytes,1,rep,name=sorts,proto3" json:"sorts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortEntitiesParams) Reset() {
	*x = SortEntitiesParams{}
	mi := &file_sd_sd_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortEntitiesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortEntitiesParams) ProtoMessage() {}

func (x *SortEntitiesParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortEntitiesParams.ProtoReflect.Descriptor instead.
func (*SortEntitiesParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{38}
}

func (x *SortEntitiesParams) GetSorts() []*SortEntities {
	if x != nil {
		return x.Sorts
	}
	return nil
}

type CopyEntityParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyEntityParams) Reset() {
	*x = CopyEntityParams{}
	mi := &file_sd_sd_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyEntityParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyEntityParams) ProtoMessage() {}

func (x *CopyEntityParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyEntityParams.ProtoReflect.Descriptor instead.
func (*CopyEntityParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{39}
}

func (x *CopyEntityParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Fields
type GetFieldsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldsFilter  *FieldsFilter          `protobuf:"bytes,1,opt,name=fields_filter,json=fieldsFilter,proto3" json:"fields_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFieldsParams) Reset() {
	*x = GetFieldsParams{}
	mi := &file_sd_sd_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFieldsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFieldsParams) ProtoMessage() {}

func (x *GetFieldsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFieldsParams.ProtoReflect.Descriptor instead.
func (*GetFieldsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{40}
}

func (x *GetFieldsParams) GetFieldsFilter() *FieldsFilter {
	if x != nil {
		return x.FieldsFilter
	}
	return nil
}

type GetFieldsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        []*Field               `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFieldsResponse) Reset() {
	*x = GetFieldsResponse{}
	mi := &file_sd_sd_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFieldsResponse) ProtoMessage() {}

func (x *GetFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFieldsResponse.ProtoReflect.Descriptor instead.
func (*GetFieldsResponse) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{41}
}

func (x *GetFieldsResponse) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetFieldsValuesByEntitiesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityIds     []int32                `protobuf:"varint,1,rep,packed,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFieldsValuesByEntitiesParams) Reset() {
	*x = GetFieldsValuesByEntitiesParams{}
	mi := &file_sd_sd_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFieldsValuesByEntitiesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFieldsValuesByEntitiesParams) ProtoMessage() {}

func (x *GetFieldsValuesByEntitiesParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFieldsValuesByEntitiesParams.ProtoReflect.Descriptor instead.
func (*GetFieldsValuesByEntitiesParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{42}
}

func (x *GetFieldsValuesByEntitiesParams) GetEntityIds() []int32 {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

type GetFieldsValuesByEntitiesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*FieldValue          `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFieldsValuesByEntitiesResponse) Reset() {
	*x = GetFieldsValuesByEntitiesResponse{}
	mi := &file_sd_sd_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFieldsValuesByEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFieldsValuesByEntitiesResponse) ProtoMessage() {}

func (x *GetFieldsValuesByEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFieldsValuesByEntitiesResponse.ProtoReflect.Descriptor instead.
func (*GetFieldsValuesByEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{43}
}

func (x *GetFieldsValuesByEntitiesResponse) GetValues() []*FieldValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type RemoveFieldsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int32                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFieldsParams) Reset() {
	*x = RemoveFieldsParams{}
	mi := &file_sd_sd_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFieldsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFieldsParams) ProtoMessage() {}

func (x *RemoveFieldsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFieldsParams.ProtoReflect.Descriptor instead.
func (*RemoveFieldsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{44}
}

func (x *RemoveFieldsParams) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UpdateFieldsL10NsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	L10Ns         []*UpdateL10N          `protobuf:"bytes,1,rep,name=l10ns,proto3" json:"l10ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFieldsL10NsParams) Reset() {
	*x = UpdateFieldsL10NsParams{}
	mi := &file_sd_sd_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFieldsL10NsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFieldsL10NsParams) ProtoMessage() {}

func (x *UpdateFieldsL10NsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFieldsL10NsParams.ProtoReflect.Descriptor instead.
func (*UpdateFieldsL10NsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateFieldsL10NsParams) GetL10Ns() []*UpdateL10N {
	if x != nil {
		return x.L10Ns
	}
	return nil
}

type RemoveFieldsL10NsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	L10Ns         []*RemoveL10N          `protobuf:"bytes,1,rep,name=l10ns,proto3" json:"l10ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFieldsL10NsParams) Reset() {
	*x = RemoveFieldsL10NsParams{}
	mi := &file_sd_sd_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFieldsL10NsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFieldsL10NsParams) ProtoMessage() {}

func (x *RemoveFieldsL10NsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFieldsL10NsParams.ProtoReflect.Descriptor instead.
func (*RemoveFieldsL10NsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{46}
}

func (x *RemoveFieldsL10NsParams) GetL10Ns() []*RemoveL10N {
	if x != nil {
		return x.L10Ns
	}
	return nil
}

type SortField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         int32                  `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	FieldId       int32                  `protobuf:"varint,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortField) Reset() {
	*x = SortField{}
	mi := &file_sd_sd_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortField) ProtoMessage() {}

func (x *SortField) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortField.ProtoReflect.Descriptor instead.
func (*SortField) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{47}
}

func (x *SortField) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *SortField) GetFieldId() int32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

type SortFieldsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sorts         *SortField             `protobuf:"bytes,1,opt,name=sorts,proto3" json:"sorts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortFieldsParams) Reset() {
	*x = SortFieldsParams{}
	mi := &file_sd_sd_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortFieldsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortFieldsParams) ProtoMessage() {}

func (x *SortFieldsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortFieldsParams.ProtoReflect.Descriptor instead.
func (*SortFieldsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{48}
}

func (x *SortFieldsParams) GetSorts() *SortField {
	if x != nil {
		return x.Sorts
	}
	return nil
}

type UpdateOptionsFieldsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldId       []int32                `protobuf:"varint,1,rep,packed,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	OptionIds     []int32                `protobuf:"varint,2,rep,packed,name=option_ids,json=optionIds,proto3" json:"option_ids,omitempty"`
	Option        *FieldOption           `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOptionsFieldsParams) Reset() {
	*x = UpdateOptionsFieldsParams{}
	mi := &file_sd_sd_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOptionsFieldsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOptionsFieldsParams) ProtoMessage() {}

func (x *UpdateOptionsFieldsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOptionsFieldsParams.ProtoReflect.Descriptor instead.
func (*UpdateOptionsFieldsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateOptionsFieldsParams) GetFieldId() []int32 {
	if x != nil {
		return x.FieldId
	}
	return nil
}

func (x *UpdateOptionsFieldsParams) GetOptionIds() []int32 {
	if x != nil {
		return x.OptionIds
	}
	return nil
}

func (x *UpdateOptionsFieldsParams) GetOption() *FieldOption {
	if x != nil {
		return x.Option
	}
	return nil
}

type ToggleAttachFieldToListsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListIds       []int32                `protobuf:"varint,1,rep,packed,name=list_ids,json=listIds,proto3" json:"list_ids,omitempty"`
	FieldIds      []int32                `protobuf:"varint,2,rep,packed,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleAttachFieldToListsParams) Reset() {
	*x = ToggleAttachFieldToListsParams{}
	mi := &file_sd_sd_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleAttachFieldToListsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleAttachFieldToListsParams) ProtoMessage() {}

func (x *ToggleAttachFieldToListsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleAttachFieldToListsParams.ProtoReflect.Descriptor instead.
func (*ToggleAttachFieldToListsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{50}
}

func (x *ToggleAttachFieldToListsParams) GetListIds() []int32 {
	if x != nil {
		return x.ListIds
	}
	return nil
}

func (x *ToggleAttachFieldToListsParams) GetFieldIds() []int32 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

type ToggleAttachFieldToKeyGroupsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldIds      []int32                `protobuf:"varint,1,rep,packed,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
	KeyGroupIds   []int32                `protobuf:"varint,2,rep,packed,name=key_group_ids,json=keyGroupIds,proto3" json:"key_group_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleAttachFieldToKeyGroupsParams) Reset() {
	*x = ToggleAttachFieldToKeyGroupsParams{}
	mi := &file_sd_sd_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleAttachFieldToKeyGroupsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleAttachFieldToKeyGroupsParams) ProtoMessage() {}

func (x *ToggleAttachFieldToKeyGroupsParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleAttachFieldToKeyGroupsParams.ProtoReflect.Descriptor instead.
func (*ToggleAttachFieldToKeyGroupsParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{51}
}

func (x *ToggleAttachFieldToKeyGroupsParams) GetFieldIds() []int32 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *ToggleAttachFieldToKeyGroupsParams) GetKeyGroupIds() []int32 {
	if x != nil {
		return x.KeyGroupIds
	}
	return nil
}

type CheckAttachedFieldsInListParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListId        int32                  `protobuf:"varint,1,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	FieldIds      []int32                `protobuf:"varint,2,rep,packed,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckAttachedFieldsInListParams) Reset() {
	*x = CheckAttachedFieldsInListParams{}
	mi := &file_sd_sd_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAttachedFieldsInListParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAttachedFieldsInListParams) ProtoMessage() {}

func (x *CheckAttachedFieldsInListParams) ProtoReflect() protoreflect.Message {
	mi := &file_sd_sd_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAttachedFieldsInListParams.ProtoReflect.Descriptor instead.
func (*CheckAttachedFieldsInListParams) Descriptor() ([]byte, []int) {
	return file_sd_sd_proto_rawDescGZIP(), []int{52}
}

func (x *CheckAttachedFieldsInListParams) GetListId() int32 {
	if x != nil {
		return x.ListId
	}
	return 0
}

func (x *CheckAttachedFieldsInListParams) GetFieldIds() []int32 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

var File_sd_sd_proto protoreflect.FileDescriptor

var file_sd_sd_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x73, 0x64, 0x2f, 0x73, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x73,
	0x64, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x64, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x73, 0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x73, 0x64, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x73, 0x64, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x73, 0x64, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x64, 0x2f, 0x6c, 0x31, 0x30, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x43, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x73, 0x22, 0x47, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x64, 0x2e, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x46, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x64, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x65, 0x79, 0x73, 0x22, 0x36, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x7c, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x64, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x05,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x73, 0x64,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xfd, 0x01, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x4c, 0x31, 0x30, 0x6e, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x4c, 0x31, 0x30, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x22, 0x3a, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x61, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x1c, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22,
	0xa5, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x22, 0x3d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x31,
	0x30, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x31, 0x30,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x31, 0x30, 0x6e, 0x52, 0x05, 0x6c, 0x31, 0x30, 0x6e, 0x73, 0x22,
	0x2f, 0x0a, 0x1d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x39, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0e, 0x53,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a,
	0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73,
	0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x22, 0x4f, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x73, 0x22, 0x22, 0x0a, 0x0e, 0x43, 0x6f, 0x70, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x72, 0x65, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x50, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x0f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x64, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73, 0x64, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x31, 0x30,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x64, 0x2e, 0x4e, 0x65,
	0x77, 0x4c, 0x31, 0x30, 0x6e, 0x52, 0x05, 0x6c, 0x31, 0x30, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x3c, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x75,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x44, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x5a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0x44, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x31, 0x30, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x31, 0x30, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x31, 0x30, 0x6e,
	0x52, 0x05, 0x6c, 0x31, 0x30, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x20, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x1b, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65,
	0x65, 0x53, 0x6c, 0x75, 0x67, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x3d, 0x0a, 0x0c, 0x53, 0x6f, 0x72,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x12, 0x53, 0x6f, 0x72, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26,
	0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a,
	0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x73, 0x64, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x40, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0x4b,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x12, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x4c, 0x31, 0x30, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24,
	0x0a, 0x05, 0x6c, 0x31, 0x30, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x31, 0x30, 0x6e, 0x52, 0x05, 0x6c,
	0x31, 0x30, 0x6e, 0x73, 0x22, 0x3f, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x4c, 0x31, 0x30, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x24, 0x0a, 0x05, 0x6c, 0x31, 0x30, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x31, 0x30, 0x6e, 0x52, 0x05,
	0x6c, 0x31, 0x30, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x10, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x7e, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x1e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x22, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x4b, 0x65, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6b, 0x65, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0b, 0x6b, 0x65, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x57, 0x0a,
	0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x32, 0x93, 0x21, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x2e, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x18, 0x2e,
	0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x64, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1b, 0x2e, 0x73, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x13, 0x2e, 0x73, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x64,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x08, 0x2e, 0x73, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x18, 0x2e,
	0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x75,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x42, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x18, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x1b, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x2e, 0x73, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x31, 0x30, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x31, 0x30, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x68,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x64, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x48, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x21, 0x2e, 0x73, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0b, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x64, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x12, 0x2e, 0x73, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a,
	0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x73, 0x64, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x43, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x73, 0x64, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x73, 0x64, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x08, 0x2e, 0x73, 0x64, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x15, 0x43, 0x6f, 0x70, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x2e, 0x73, 0x64, 0x2e,
	0x43, 0x6f, 0x70, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x08,
	0x2e, 0x73, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x72, 0x65, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x2e, 0x73, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x53, 0x6c,
	0x75, 0x67, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x17, 0x2e, 0x73, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x2e, 0x73, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0a, 0x2e, 0x73, 0x64, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e,
	0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1a, 0x2e, 0x73, 0x64, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x1d, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x31, 0x30, 0x6e, 0x73, 0x12, 0x1b, 0x2e,
	0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x31, 0x30, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4c, 0x0a, 0x0c, 0x48, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x24, 0x2e, 0x73, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e,
	0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x24, 0x2e, 0x73, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e,
	0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x73, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f,
	0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x64, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x51, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x64, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x2e, 0x73, 0x64, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0a, 0x2e, 0x73, 0x64, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x3b, 0x0a, 0x17, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x2e,
	0x73, 0x64, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x0a, 0x2e, 0x73, 0x64, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x53, 0x6c, 0x75, 0x67,
	0x49, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x64, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x49, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x13,
	0x2e, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x15, 0x2e, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x25, 0x2e, 0x73,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x15, 0x2e, 0x73, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x09, 0x2e, 0x73, 0x64, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20,
	0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x16,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x52, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x73,
	0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4c, 0x31, 0x30, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x64,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4c, 0x31, 0x30,
	0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x4c, 0x31, 0x30, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4c, 0x31, 0x30, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x73, 0x64, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x53, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x2e, 0x73, 0x64, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x64, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x55, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x64, 0x2e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x19, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x64, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x59, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54,
	0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x64, 0x2e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x17, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x64, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x4b, 0x65,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x49, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x49, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x14, 0x2e, 0x73, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x2e, 0x73, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x08, 0x2e, 0x73, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x08, 0x2e,
	0x73, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x08, 0x2e, 0x73,
	0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x73,
	0x64, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x14, 0x44, 0x65, 0x74, 0x61,
	0x63, 0x68, 0x50, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x22, 0x2e, 0x73, 0x64, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x29, 0x5a, 0x27,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x33, 0x61, 0x2d, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x67, 0x6f, 0x2f,
	0x73, 0x64, 0x3b, 0x73, 0x64, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_sd_sd_proto_rawDescOnce sync.Once
	file_sd_sd_proto_rawDescData []byte
)

func file_sd_sd_proto_rawDescGZIP() []byte {
	file_sd_sd_proto_rawDescOnce.Do(func() {
		file_sd_sd_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sd_sd_proto_rawDesc), len(file_sd_sd_proto_rawDesc)))
	})
	return file_sd_sd_proto_rawDescData
}

var file_sd_sd_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_sd_sd_proto_goTypes = []any{
	(*GetGroupKeysParams)(nil),                 // 0: sd.GetGroupKeysParams
	(*GetGroupKeysResponse)(nil),               // 1: sd.GetGroupKeysResponse
	(*CreateGroupKeysParams)(nil),              // 2: sd.CreateGroupKeysParams
	(*CreateGroupKeysResponse)(nil),            // 3: sd.CreateGroupKeysResponse
	(*RemoveGroupKeysParams)(nil),              // 4: sd.RemoveGroupKeysParams
	(*GetListsParams)(nil),                     // 5: sd.GetListsParams
	(*GetListResponse)(nil),                    // 6: sd.GetListResponse
	(*CreateListParams)(nil),                   // 7: sd.CreateListParams
	(*UpdateListSlugParams)(nil),               // 8: sd.UpdateListSlugParams
	(*UpsertEntityFieldValueParams)(nil),       // 9: sd.UpsertEntityFieldValueParams
	(*RemoveEntityFieldValueParams)(nil),       // 10: sd.RemoveEntityFieldValueParams
	(*UpsertEntityFieldImageParams)(nil),       // 11: sd.UpsertEntityFieldImageParams
	(*UpsertEntityFieldImageResponse)(nil),     // 12: sd.UpsertEntityFieldImageResponse
	(*RemoveEntityFieldImageParams)(nil),       // 13: sd.RemoveEntityFieldImageParams
	(*UpdateListMetaParams)(nil),               // 14: sd.UpdateListMetaParams
	(*UpdateListImageParams)(nil),              // 15: sd.UpdateListImageParams
	(*UpdateListImageResponse)(nil),            // 16: sd.UpdateListImageResponse
	(*RemoveListImageParams)(nil),              // 17: sd.RemoveListImageParams
	(*UpdateListL10NsParams)(nil),              // 18: sd.UpdateListL10nsParams
	(*SingleManipulationListsParams)(nil),      // 19: sd.SingleManipulationListsParams
	(*SortList)(nil),                           // 20: sd.SortList
	(*SortListParams)(nil),                     // 21: sd.SortListParams
	(*AttachListsParams)(nil),                  // 22: sd.AttachListsParams
	(*CopyListParams)(nil),                     // 23: sd.CopyListParams
	(*CheckFreeSlugInListParams)(nil),          // 24: sd.CheckFreeSlugInListParams
	(*GetEntitiesParams)(nil),                  // 25: sd.GetEntitiesParams
	(*GetEntitiesResponse)(nil),                // 26: sd.GetEntitiesResponse
	(*CreateEntityParams)(nil),                 // 27: sd.CreateEntityParams
	(*UpdateEntitySlugParams)(nil),             // 28: sd.UpdateEntitySlugParams
	(*UpdateEntitiesRaringParams)(nil),         // 29: sd.UpdateEntitiesRaringParams
	(*UpdateEntityImageParams)(nil),            // 30: sd.UpdateEntityImageParams
	(*UpdateEntityImageResponse)(nil),          // 31: sd.UpdateEntityImageResponse
	(*RemoveEntityImageParams)(nil),            // 32: sd.RemoveEntityImageParams
	(*UpdateEntityL10NsParams)(nil),            // 33: sd.UpdateEntityL10nsParams
	(*SingleManipulationEntitiesParams)(nil),   // 34: sd.SingleManipulationEntitiesParams
	(*AttachEntitiesToListsParams)(nil),        // 35: sd.AttachEntitiesToListsParams
	(*CheckFreeSlugInEntitiesParams)(nil),      // 36: sd.CheckFreeSlugInEntitiesParams
	(*SortEntities)(nil),                       // 37: sd.SortEntities
	(*SortEntitiesParams)(nil),                 // 38: sd.SortEntitiesParams
	(*CopyEntityParams)(nil),                   // 39: sd.CopyEntityParams
	(*GetFieldsParams)(nil),                    // 40: sd.GetFieldsParams
	(*GetFieldsResponse)(nil),                  // 41: sd.GetFieldsResponse
	(*GetFieldsValuesByEntitiesParams)(nil),    // 42: sd.GetFieldsValuesByEntitiesParams
	(*GetFieldsValuesByEntitiesResponse)(nil),  // 43: sd.GetFieldsValuesByEntitiesResponse
	(*RemoveFieldsParams)(nil),                 // 44: sd.RemoveFieldsParams
	(*UpdateFieldsL10NsParams)(nil),            // 45: sd.UpdateFieldsL10nsParams
	(*RemoveFieldsL10NsParams)(nil),            // 46: sd.RemoveFieldsL10nsParams
	(*SortField)(nil),                          // 47: sd.SortField
	(*SortFieldsParams)(nil),                   // 48: sd.SortFieldsParams
	(*UpdateOptionsFieldsParams)(nil),          // 49: sd.UpdateOptionsFieldsParams
	(*ToggleAttachFieldToListsParams)(nil),     // 50: sd.ToggleAttachFieldToListsParams
	(*ToggleAttachFieldToKeyGroupsParams)(nil), // 51: sd.ToggleAttachFieldToKeyGroupsParams
	(*CheckAttachedFieldsInListParams)(nil),    // 52: sd.CheckAttachedFieldsInListParams
	(*common.ListParams)(nil),                  // 53: common.ListParams
	(*GroupKey)(nil),                           // 54: sd.GroupKey
	(*NewGroupKey)(nil),                        // 55: sd.NewGroupKey
	(*ListFilter)(nil),                         // 56: sd.ListFilter
	(*EntitiesFilter)(nil),                     // 57: sd.EntitiesFilter
	(*List)(nil),                               // 58: sd.List
	(*common.NewL10N)(nil),                     // 59: common.NewL10n
	(*FieldValue)(nil),                         // 60: sd.FieldValue
	(*UpdateL10N)(nil),                         // 61: sd.UpdateL10n
	(*Entity)(nil),                             // 62: sd.Entity
	(*NewL10N)(nil),                            // 63: sd.NewL10n
	(*FieldsFilter)(nil),                       // 64: sd.FieldsFilter
	(*Field)(nil),                              // 65: sd.Field
	(*RemoveL10N)(nil),                         // 66: sd.RemoveL10n
	(*FieldOption)(nil),                        // 67: sd.FieldOption
	(*CreateFieldParams)(nil),                  // 68: sd.CreateFieldParams
	(*UpdateFieldsParams)(nil),                 // 69: sd.UpdateFieldsParams
	(*GetPagesParams)(nil),                     // 70: sd.GetPagesParams
	(*PageParams)(nil),                         // 71: sd.PageParams
	(*UpdatePageParams)(nil),                   // 72: sd.UpdatePageParams
	(*RemovePagesParams)(nil),                  // 73: sd.RemovePagesParams
	(*ToggleAttachPageToParentParams)(nil),     // 74: sd.ToggleAttachPageToParentParams
	(*emptypb.Empty)(nil),                      // 75: google.protobuf.Empty
	(*common.BoolStatus)(nil),                  // 76: common.BoolStatus
	(*GetPagesResponse)(nil),                   // 77: sd.GetPagesResponse
	(*Page)(nil),                               // 78: sd.Page
}
var file_sd_sd_proto_depIdxs = []int32{
	53, // 0: sd.GetGroupKeysParams.list_params:type_name -> common.ListParams
	54, // 1: sd.GetGroupKeysResponse.group_keys:type_name -> sd.GroupKey
	55, // 2: sd.CreateGroupKeysParams.group_keys:type_name -> sd.NewGroupKey
	54, // 3: sd.CreateGroupKeysResponse.group_keys:type_name -> sd.GroupKey
	56, // 4: sd.GetListsParams.listFilter:type_name -> sd.ListFilter
	57, // 5: sd.GetListsParams.entitiesFilter:type_name -> sd.EntitiesFilter
	58, // 6: sd.GetListResponse.lists:type_name -> sd.List
	59, // 7: sd.CreateListParams.name:type_name -> common.NewL10n
	59, // 8: sd.CreateListParams.description:type_name -> common.NewL10n
	60, // 9: sd.UpsertEntityFieldValueParams.value:type_name -> sd.FieldValue
	61, // 10: sd.UpdateListL10nsParams.l10ns:type_name -> sd.UpdateL10n
	20, // 11: sd.SortListParams.sorts:type_name -> sd.SortList
	57, // 12: sd.GetEntitiesParams.entities_filter:type_name -> sd.EntitiesFilter
	62, // 13: sd.GetEntitiesResponse.entities:type_name -> sd.Entity
	63, // 14: sd.CreateEntityParams.l10ns:type_name -> sd.NewL10n
	61, // 15: sd.UpdateEntityL10nsParams.l10ns:type_name -> sd.UpdateL10n
	37, // 16: sd.SortEntitiesParams.sorts:type_name -> sd.SortEntities
	64, // 17: sd.GetFieldsParams.fields_filter:type_name -> sd.FieldsFilter
	65, // 18: sd.GetFieldsResponse.fields:type_name -> sd.Field
	60, // 19: sd.GetFieldsValuesByEntitiesResponse.values:type_name -> sd.FieldValue
	61, // 20: sd.UpdateFieldsL10nsParams.l10ns:type_name -> sd.UpdateL10n
	66, // 21: sd.RemoveFieldsL10nsParams.l10ns:type_name -> sd.RemoveL10n
	47, // 22: sd.SortFieldsParams.sorts:type_name -> sd.SortField
	67, // 23: sd.UpdateOptionsFieldsParams.option:type_name -> sd.FieldOption
	0,  // 24: sd.StaticData.GetGroupKeys:input_type -> sd.GetGroupKeysParams
	2,  // 25: sd.StaticData.CreateGroupKeys:input_type -> sd.CreateGroupKeysParams
	4,  // 26: sd.StaticData.RemoveGroupKeys:input_type -> sd.RemoveGroupKeysParams
	5,  // 27: sd.StaticData.GetLists:input_type -> sd.GetListsParams
	7,  // 28: sd.StaticData.CreateList:input_type -> sd.CreateListParams
	8,  // 29: sd.StaticData.UpdateListSlug:input_type -> sd.UpdateListSlugParams
	14, // 30: sd.StaticData.UpdateListMeta:input_type -> sd.UpdateListMetaParams
	15, // 31: sd.StaticData.UpdateListImage:input_type -> sd.UpdateListImageParams
	17, // 32: sd.StaticData.RemoveListImage:input_type -> sd.RemoveListImageParams
	18, // 33: sd.StaticData.UpdateListL10ns:input_type -> sd.UpdateListL10nsParams
	19, // 34: sd.StaticData.ShowLists:input_type -> sd.SingleManipulationListsParams
	19, // 35: sd.StaticData.HideLists:input_type -> sd.SingleManipulationListsParams
	19, // 36: sd.StaticData.RemoveLists:input_type -> sd.SingleManipulationListsParams
	21, // 37: sd.StaticData.SortLists:input_type -> sd.SortListParams
	22, // 38: sd.StaticData.AttachListsToLists:input_type -> sd.AttachListsParams
	22, // 39: sd.StaticData.DetachListsToLists:input_type -> sd.AttachListsParams
	23, // 40: sd.StaticData.CopyList:input_type -> sd.CopyListParams
	23, // 41: sd.StaticData.CopyListWithRelations:input_type -> sd.CopyListParams
	24, // 42: sd.StaticData.CheckFreeSlugInList:input_type -> sd.CheckFreeSlugInListParams
	25, // 43: sd.StaticData.GetEntities:input_type -> sd.GetEntitiesParams
	27, // 44: sd.StaticData.CreateEntity:input_type -> sd.CreateEntityParams
	29, // 45: sd.StaticData.UpdateEntitiesRating:input_type -> sd.UpdateEntitiesRaringParams
	28, // 46: sd.StaticData.UpdateEntitySlug:input_type -> sd.UpdateEntitySlugParams
	30, // 47: sd.StaticData.UpdateEntityImage:input_type -> sd.UpdateEntityImageParams
	32, // 48: sd.StaticData.RemoveEntityImage:input_type -> sd.RemoveEntityImageParams
	33, // 49: sd.StaticData.UpdateEntityL10ns:input_type -> sd.UpdateEntityL10nsParams
	34, // 50: sd.StaticData.ShowEntities:input_type -> sd.SingleManipulationEntitiesParams
	34, // 51: sd.StaticData.HideEntities:input_type -> sd.SingleManipulationEntitiesParams
	34, // 52: sd.StaticData.RemoveEntities:input_type -> sd.SingleManipulationEntitiesParams
	38, // 53: sd.StaticData.SortEntities:input_type -> sd.SortEntitiesParams
	35, // 54: sd.StaticData.AttachEntitiesToList:input_type -> sd.AttachEntitiesToListsParams
	35, // 55: sd.StaticData.DetachEntitiesFromList:input_type -> sd.AttachEntitiesToListsParams
	39, // 56: sd.StaticData.CopyEntity:input_type -> sd.CopyEntityParams
	39, // 57: sd.StaticData.CopyEntityWithRelations:input_type -> sd.CopyEntityParams
	36, // 58: sd.StaticData.CheckFreeSlugInEntities:input_type -> sd.CheckFreeSlugInEntitiesParams
	40, // 59: sd.StaticData.GetFields:input_type -> sd.GetFieldsParams
	42, // 60: sd.StaticData.GetFieldsValuesByEntities:input_type -> sd.GetFieldsValuesByEntitiesParams
	68, // 61: sd.StaticData.CreateField:input_type -> sd.CreateFieldParams
	9,  // 62: sd.StaticData.UpsertEntityFieldValue:input_type -> sd.UpsertEntityFieldValueParams
	10, // 63: sd.StaticData.RemoveEntityFieldValue:input_type -> sd.RemoveEntityFieldValueParams
	12, // 64: sd.StaticData.UpsertEntityFieldImage:input_type -> sd.UpsertEntityFieldImageResponse
	10, // 65: sd.StaticData.RemoveEntityFieldImage:input_type -> sd.RemoveEntityFieldValueParams
	69, // 66: sd.StaticData.UpdateFields:input_type -> sd.UpdateFieldsParams
	45, // 67: sd.StaticData.UpdateFieldsL10ns:input_type -> sd.UpdateFieldsL10nsParams
	46, // 68: sd.StaticData.RemoveFieldsL10ns:input_type -> sd.RemoveFieldsL10nsParams
	44, // 69: sd.StaticData.RemoveFields:input_type -> sd.RemoveFieldsParams
	48, // 70: sd.StaticData.SortFields:input_type -> sd.SortFieldsParams
	49, // 71: sd.StaticData.UpsertFieldImage:input_type -> sd.UpdateOptionsFieldsParams
	49, // 72: sd.StaticData.UpdateOptionsFields:input_type -> sd.UpdateOptionsFieldsParams
	50, // 73: sd.StaticData.AttachFieldToListParams:input_type -> sd.ToggleAttachFieldToListsParams
	50, // 74: sd.StaticData.DetachFieldFromListParams:input_type -> sd.ToggleAttachFieldToListsParams
	51, // 75: sd.StaticData.AttachFieldsToGroupKeys:input_type -> sd.ToggleAttachFieldToKeyGroupsParams
	51, // 76: sd.StaticData.DetachFieldsToGroupKeys:input_type -> sd.ToggleAttachFieldToKeyGroupsParams
	52, // 77: sd.StaticData.CheckAttachedFieldsInList:input_type -> sd.CheckAttachedFieldsInListParams
	70, // 78: sd.StaticData.GetPages:input_type -> sd.GetPagesParams
	71, // 79: sd.StaticData.CreatePage:input_type -> sd.PageParams
	72, // 80: sd.StaticData.UpdatePage:input_type -> sd.UpdatePageParams
	73, // 81: sd.StaticData.RemovePage:input_type -> sd.RemovePagesParams
	74, // 82: sd.StaticData.AttachPageToParent:input_type -> sd.ToggleAttachPageToParentParams
	74, // 83: sd.StaticData.DetachPageFromParent:input_type -> sd.ToggleAttachPageToParentParams
	1,  // 84: sd.StaticData.GetGroupKeys:output_type -> sd.GetGroupKeysResponse
	3,  // 85: sd.StaticData.CreateGroupKeys:output_type -> sd.CreateGroupKeysResponse
	75, // 86: sd.StaticData.RemoveGroupKeys:output_type -> google.protobuf.Empty
	6,  // 87: sd.StaticData.GetLists:output_type -> sd.GetListResponse
	58, // 88: sd.StaticData.CreateList:output_type -> sd.List
	75, // 89: sd.StaticData.UpdateListSlug:output_type -> google.protobuf.Empty
	75, // 90: sd.StaticData.UpdateListMeta:output_type -> google.protobuf.Empty
	16, // 91: sd.StaticData.UpdateListImage:output_type -> sd.UpdateListImageResponse
	75, // 92: sd.StaticData.RemoveListImage:output_type -> google.protobuf.Empty
	75, // 93: sd.StaticData.UpdateListL10ns:output_type -> google.protobuf.Empty
	75, // 94: sd.StaticData.ShowLists:output_type -> google.protobuf.Empty
	75, // 95: sd.StaticData.HideLists:output_type -> google.protobuf.Empty
	75, // 96: sd.StaticData.RemoveLists:output_type -> google.protobuf.Empty
	75, // 97: sd.StaticData.SortLists:output_type -> google.protobuf.Empty
	75, // 98: sd.StaticData.AttachListsToLists:output_type -> google.protobuf.Empty
	75, // 99: sd.StaticData.DetachListsToLists:output_type -> google.protobuf.Empty
	58, // 100: sd.StaticData.CopyList:output_type -> sd.List
	58, // 101: sd.StaticData.CopyListWithRelations:output_type -> sd.List
	76, // 102: sd.StaticData.CheckFreeSlugInList:output_type -> common.BoolStatus
	26, // 103: sd.StaticData.GetEntities:output_type -> sd.GetEntitiesResponse
	62, // 104: sd.StaticData.CreateEntity:output_type -> sd.Entity
	75, // 105: sd.StaticData.UpdateEntitiesRating:output_type -> google.protobuf.Empty
	75, // 106: sd.StaticData.UpdateEntitySlug:output_type -> google.protobuf.Empty
	31, // 107: sd.StaticData.UpdateEntityImage:output_type -> sd.UpdateEntityImageResponse
	75, // 108: sd.StaticData.RemoveEntityImage:output_type -> google.protobuf.Empty
	75, // 109: sd.StaticData.UpdateEntityL10ns:output_type -> google.protobuf.Empty
	75, // 110: sd.StaticData.ShowEntities:output_type -> google.protobuf.Empty
	75, // 111: sd.StaticData.HideEntities:output_type -> google.protobuf.Empty
	75, // 112: sd.StaticData.RemoveEntities:output_type -> google.protobuf.Empty
	75, // 113: sd.StaticData.SortEntities:output_type -> google.protobuf.Empty
	75, // 114: sd.StaticData.AttachEntitiesToList:output_type -> google.protobuf.Empty
	75, // 115: sd.StaticData.DetachEntitiesFromList:output_type -> google.protobuf.Empty
	62, // 116: sd.StaticData.CopyEntity:output_type -> sd.Entity
	62, // 117: sd.StaticData.CopyEntityWithRelations:output_type -> sd.Entity
	76, // 118: sd.StaticData.CheckFreeSlugInEntities:output_type -> common.BoolStatus
	41, // 119: sd.StaticData.GetFields:output_type -> sd.GetFieldsResponse
	43, // 120: sd.StaticData.GetFieldsValuesByEntities:output_type -> sd.GetFieldsValuesByEntitiesResponse
	65, // 121: sd.StaticData.CreateField:output_type -> sd.Field
	75, // 122: sd.StaticData.UpsertEntityFieldValue:output_type -> google.protobuf.Empty
	75, // 123: sd.StaticData.RemoveEntityFieldValue:output_type -> google.protobuf.Empty
	75, // 124: sd.StaticData.UpsertEntityFieldImage:output_type -> google.protobuf.Empty
	75, // 125: sd.StaticData.RemoveEntityFieldImage:output_type -> google.protobuf.Empty
	75, // 126: sd.StaticData.UpdateFields:output_type -> google.protobuf.Empty
	75, // 127: sd.StaticData.UpdateFieldsL10ns:output_type -> google.protobuf.Empty
	75, // 128: sd.StaticData.RemoveFieldsL10ns:output_type -> google.protobuf.Empty
	75, // 129: sd.StaticData.RemoveFields:output_type -> google.protobuf.Empty
	75, // 130: sd.StaticData.SortFields:output_type -> google.protobuf.Empty
	75, // 131: sd.StaticData.UpsertFieldImage:output_type -> google.protobuf.Empty
	75, // 132: sd.StaticData.UpdateOptionsFields:output_type -> google.protobuf.Empty
	75, // 133: sd.StaticData.AttachFieldToListParams:output_type -> google.protobuf.Empty
	75, // 134: sd.StaticData.DetachFieldFromListParams:output_type -> google.protobuf.Empty
	75, // 135: sd.StaticData.AttachFieldsToGroupKeys:output_type -> google.protobuf.Empty
	75, // 136: sd.StaticData.DetachFieldsToGroupKeys:output_type -> google.protobuf.Empty
	76, // 137: sd.StaticData.CheckAttachedFieldsInList:output_type -> common.BoolStatus
	77, // 138: sd.StaticData.GetPages:output_type -> sd.GetPagesResponse
	78, // 139: sd.StaticData.CreatePage:output_type -> sd.Page
	78, // 140: sd.StaticData.UpdatePage:output_type -> sd.Page
	78, // 141: sd.StaticData.RemovePage:output_type -> sd.Page
	75, // 142: sd.StaticData.AttachPageToParent:output_type -> google.protobuf.Empty
	75, // 143: sd.StaticData.DetachPageFromParent:output_type -> google.protobuf.Empty
	84, // [84:144] is the sub-list for method output_type
	24, // [24:84] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_sd_sd_proto_init() }
func file_sd_sd_proto_init() {
	if File_sd_sd_proto != nil {
		return
	}
	file_sd_group_keys_proto_init()
	file_sd_lists_proto_init()
	file_sd_entities_proto_init()
	file_sd_fields_proto_init()
	file_sd_pages_proto_init()
	file_sd_l10n_proto_init()
	file_sd_sd_proto_msgTypes[7].OneofWrappers = []any{}
	file_sd_sd_proto_msgTypes[14].OneofWrappers = []any{}
	file_sd_sd_proto_msgTypes[27].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sd_sd_proto_rawDesc), len(file_sd_sd_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sd_sd_proto_goTypes,
		DependencyIndexes: file_sd_sd_proto_depIdxs,
		MessageInfos:      file_sd_sd_proto_msgTypes,
	}.Build()
	File_sd_sd_proto = out.File
	file_sd_sd_proto_goTypes = nil
	file_sd_sd_proto_depIdxs = nil
}
