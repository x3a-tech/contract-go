// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: news/news.proto

package newsv1

import (
	common "github.com/x3a-tech/contract-go/common"
	social "github.com/x3a-tech/contract-go/social"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArticleProcessingState int32

const (
	ArticleProcessingState_ARTICLE_PROCESSING_STATE_UNSPECIFIED ArticleProcessingState = 0
	ArticleProcessingState_RECEIVED                             ArticleProcessingState = 1
	ArticleProcessingState_NORMALIZED                           ArticleProcessingState = 2
	ArticleProcessingState_CATEGORIZED                          ArticleProcessingState = 3
	ArticleProcessingState_INDEXED                              ArticleProcessingState = 4
	ArticleProcessingState_IMAGE_UPLOADED                       ArticleProcessingState = 5
	ArticleProcessingState_ERROR                                ArticleProcessingState = 6
)

// Enum value maps for ArticleProcessingState.
var (
	ArticleProcessingState_name = map[int32]string{
		0: "ARTICLE_PROCESSING_STATE_UNSPECIFIED",
		1: "RECEIVED",
		2: "NORMALIZED",
		3: "CATEGORIZED",
		4: "INDEXED",
		5: "IMAGE_UPLOADED",
		6: "ERROR",
	}
	ArticleProcessingState_value = map[string]int32{
		"ARTICLE_PROCESSING_STATE_UNSPECIFIED": 0,
		"RECEIVED":                             1,
		"NORMALIZED":                           2,
		"CATEGORIZED":                          3,
		"INDEXED":                              4,
		"IMAGE_UPLOADED":                       5,
		"ERROR":                                6,
	}
)

func (x ArticleProcessingState) Enum() *ArticleProcessingState {
	p := new(ArticleProcessingState)
	*p = x
	return p
}

func (x ArticleProcessingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArticleProcessingState) Descriptor() protoreflect.EnumDescriptor {
	return file_news_news_proto_enumTypes[0].Descriptor()
}

func (ArticleProcessingState) Type() protoreflect.EnumType {
	return &file_news_news_proto_enumTypes[0]
}

func (x ArticleProcessingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArticleProcessingState.Descriptor instead.
func (ArticleProcessingState) EnumDescriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{0}
}

type ArticleCountAction int32

const (
	ArticleCountAction_ACTION_UNSPECIFIED ArticleCountAction = 0
	ArticleCountAction_VIEWS              ArticleCountAction = 1
	ArticleCountAction_LIKE               ArticleCountAction = 2
	ArticleCountAction_UNLIKE             ArticleCountAction = 3
	ArticleCountAction_SHARE              ArticleCountAction = 4
)

// Enum value maps for ArticleCountAction.
var (
	ArticleCountAction_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "VIEWS",
		2: "LIKE",
		3: "UNLIKE",
		4: "SHARE",
	}
	ArticleCountAction_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"VIEWS":              1,
		"LIKE":               2,
		"UNLIKE":             3,
		"SHARE":              4,
	}
)

func (x ArticleCountAction) Enum() *ArticleCountAction {
	p := new(ArticleCountAction)
	*p = x
	return p
}

func (x ArticleCountAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArticleCountAction) Descriptor() protoreflect.EnumDescriptor {
	return file_news_news_proto_enumTypes[1].Descriptor()
}

func (ArticleCountAction) Type() protoreflect.EnumType {
	return &file_news_news_proto_enumTypes[1]
}

func (x ArticleCountAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArticleCountAction.Descriptor instead.
func (ArticleCountAction) EnumDescriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{1}
}

type RawArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ImageUrl      string                 `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	SourceUuid    []byte                 `protobuf:"bytes,6,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	Lang          common.Lang            `protobuf:"varint,7,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	PublishedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawArticle) Reset() {
	*x = RawArticle{}
	mi := &file_news_news_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawArticle) ProtoMessage() {}

func (x *RawArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawArticle.ProtoReflect.Descriptor instead.
func (*RawArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{0}
}

func (x *RawArticle) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *RawArticle) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RawArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RawArticle) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RawArticle) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *RawArticle) GetSourceUuid() []byte {
	if x != nil {
		return x.SourceUuid
	}
	return nil
}

func (x *RawArticle) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *RawArticle) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type CleanArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SourceUuid    string                 `protobuf:"bytes,2,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Lang          common.Lang            `protobuf:"varint,4,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanArticle) Reset() {
	*x = CleanArticle{}
	mi := &file_news_news_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanArticle) ProtoMessage() {}

func (x *CleanArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanArticle.ProtoReflect.Descriptor instead.
func (*CleanArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{1}
}

func (x *CleanArticle) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CleanArticle) GetSourceUuid() string {
	if x != nil {
		return x.SourceUuid
	}
	return ""
}

func (x *CleanArticle) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CleanArticle) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

type ApiInArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ImageUuid     []byte                 `protobuf:"bytes,5,opt,name=image_uuid,json=imageUuid,proto3" json:"image_uuid,omitempty"`
	SourceUuid    []byte                 `protobuf:"bytes,6,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	Lang          common.Lang            `protobuf:"varint,7,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	PublishedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiInArticle) Reset() {
	*x = ApiInArticle{}
	mi := &file_news_news_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiInArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiInArticle) ProtoMessage() {}

func (x *ApiInArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiInArticle.ProtoReflect.Descriptor instead.
func (*ApiInArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{2}
}

func (x *ApiInArticle) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ApiInArticle) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ApiInArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ApiInArticle) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ApiInArticle) GetImageUuid() []byte {
	if x != nil {
		return x.ImageUuid
	}
	return nil
}

func (x *ApiInArticle) GetSourceUuid() []byte {
	if x != nil {
		return x.SourceUuid
	}
	return nil
}

func (x *ApiInArticle) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *ApiInArticle) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type CategorizedPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *CategorizedSource     `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Article       *CategorizedArticle    `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	Summary       string                 `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategorizedPush) Reset() {
	*x = CategorizedPush{}
	mi := &file_news_news_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategorizedPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategorizedPush) ProtoMessage() {}

func (x *CategorizedPush) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategorizedPush.ProtoReflect.Descriptor instead.
func (*CategorizedPush) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{3}
}

func (x *CategorizedPush) GetSource() *CategorizedSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CategorizedPush) GetArticle() *CategorizedArticle {
	if x != nil {
		return x.Article
	}
	return nil
}

func (x *CategorizedPush) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type CategorizedSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceUuid    string                 `protobuf:"bytes,1,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	Categories    []int32                `protobuf:"varint,2,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategorizedSource) Reset() {
	*x = CategorizedSource{}
	mi := &file_news_news_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategorizedSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategorizedSource) ProtoMessage() {}

func (x *CategorizedSource) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategorizedSource.ProtoReflect.Descriptor instead.
func (*CategorizedSource) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{4}
}

func (x *CategorizedSource) GetSourceUuid() string {
	if x != nil {
		return x.SourceUuid
	}
	return ""
}

func (x *CategorizedSource) GetCategories() []int32 {
	if x != nil {
		return x.Categories
	}
	return nil
}

type CategorizedArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArticleUuid   string                 `protobuf:"bytes,1,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	Categories    []int32                `protobuf:"varint,2,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategorizedArticle) Reset() {
	*x = CategorizedArticle{}
	mi := &file_news_news_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategorizedArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategorizedArticle) ProtoMessage() {}

func (x *CategorizedArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategorizedArticle.ProtoReflect.Descriptor instead.
func (*CategorizedArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{5}
}

func (x *CategorizedArticle) GetArticleUuid() string {
	if x != nil {
		return x.ArticleUuid
	}
	return ""
}

func (x *CategorizedArticle) GetCategories() []int32 {
	if x != nil {
		return x.Categories
	}
	return nil
}

type ArticleI10N struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Lang          common.Lang            `protobuf:"varint,2,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Clean         string                 `protobuf:"bytes,3,opt,name=clean,proto3" json:"clean,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleI10N) Reset() {
	*x = ArticleI10N{}
	mi := &file_news_news_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleI10N) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleI10N) ProtoMessage() {}

func (x *ArticleI10N) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleI10N.ProtoReflect.Descriptor instead.
func (*ArticleI10N) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{6}
}

func (x *ArticleI10N) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ArticleI10N) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *ArticleI10N) GetClean() string {
	if x != nil {
		return x.Clean
	}
	return ""
}

func (x *ArticleI10N) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleI10N) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Article struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *ArticleMeta           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data          *ArticleData           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Article) Reset() {
	*x = Article{}
	mi := &file_news_news_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{7}
}

func (x *Article) GetMeta() *ArticleMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Article) GetData() *ArticleData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ArticleOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *ArticleMeta           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data          *ArticleData           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Counts        *ArticleCounts         `protobuf:"bytes,3,opt,name=counts,proto3" json:"counts,omitempty"`
	Flags         *ArticleFlags          `protobuf:"bytes,4,opt,name=flags,proto3" json:"flags,omitempty"`
	Reactions     *social.ReactionSum    `protobuf:"bytes,5,opt,name=reactions,proto3" json:"reactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleOut) Reset() {
	*x = ArticleOut{}
	mi := &file_news_news_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleOut) ProtoMessage() {}

func (x *ArticleOut) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleOut.ProtoReflect.Descriptor instead.
func (*ArticleOut) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{8}
}

func (x *ArticleOut) GetMeta() *ArticleMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ArticleOut) GetData() *ArticleData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ArticleOut) GetCounts() *ArticleCounts {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *ArticleOut) GetFlags() *ArticleFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ArticleOut) GetReactions() *social.ReactionSum {
	if x != nil {
		return x.Reactions
	}
	return nil
}

type ArticleMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PrimaryLang   int32                  `protobuf:"varint,2,opt,name=primary_lang,json=primaryLang,proto3" json:"primary_lang,omitempty"`
	SourceType    SourceType             `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3,enum=news.SourceType" json:"source_type,omitempty"`
	SourceUuid    []byte                 `protobuf:"bytes,4,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	ImageUuid     []byte                 `protobuf:"bytes,5,opt,name=image_uuid,json=imageUuid,proto3,oneof" json:"image_uuid,omitempty"`
	Categories    []int32                `protobuf:"varint,6,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	Url           string                 `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	PublishedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleMeta) Reset() {
	*x = ArticleMeta{}
	mi := &file_news_news_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleMeta) ProtoMessage() {}

func (x *ArticleMeta) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleMeta.ProtoReflect.Descriptor instead.
func (*ArticleMeta) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{9}
}

func (x *ArticleMeta) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ArticleMeta) GetPrimaryLang() int32 {
	if x != nil {
		return x.PrimaryLang
	}
	return 0
}

func (x *ArticleMeta) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *ArticleMeta) GetSourceUuid() []byte {
	if x != nil {
		return x.SourceUuid
	}
	return nil
}

func (x *ArticleMeta) GetImageUuid() []byte {
	if x != nil {
		return x.ImageUuid
	}
	return nil
}

func (x *ArticleMeta) GetCategories() []int32 {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ArticleMeta) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ArticleMeta) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type ArticleData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content       *string                `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Summary       *string                `protobuf:"bytes,3,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleData) Reset() {
	*x = ArticleData{}
	mi := &file_news_news_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleData) ProtoMessage() {}

func (x *ArticleData) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleData.ProtoReflect.Descriptor instead.
func (*ArticleData) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{10}
}

func (x *ArticleData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleData) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ArticleData) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

type ArticleCounts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Views         uint64                 `protobuf:"varint,1,opt,name=views,proto3" json:"views,omitempty"`
	Comments      uint64                 `protobuf:"varint,2,opt,name=comments,proto3" json:"comments,omitempty"`
	Shares        uint64                 `protobuf:"varint,3,opt,name=shares,proto3" json:"shares,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleCounts) Reset() {
	*x = ArticleCounts{}
	mi := &file_news_news_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleCounts) ProtoMessage() {}

func (x *ArticleCounts) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleCounts.ProtoReflect.Descriptor instead.
func (*ArticleCounts) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{11}
}

func (x *ArticleCounts) GetViews() uint64 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *ArticleCounts) GetComments() uint64 {
	if x != nil {
		return x.Comments
	}
	return 0
}

func (x *ArticleCounts) GetShares() uint64 {
	if x != nil {
		return x.Shares
	}
	return 0
}

type ArticleFlags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsFavorite    bool                   `protobuf:"varint,1,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleFlags) Reset() {
	*x = ArticleFlags{}
	mi := &file_news_news_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleFlags) ProtoMessage() {}

func (x *ArticleFlags) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleFlags.ProtoReflect.Descriptor instead.
func (*ArticleFlags) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{12}
}

func (x *ArticleFlags) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type ArticleContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleContent) Reset() {
	*x = ArticleContent{}
	mi := &file_news_news_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleContent) ProtoMessage() {}

func (x *ArticleContent) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleContent.ProtoReflect.Descriptor instead.
func (*ArticleContent) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{13}
}

func (x *ArticleContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Category struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *CategoryMeta          `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data          *CategoryData          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_news_news_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{14}
}

func (x *Category) GetMeta() *CategoryMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Category) GetData() *CategoryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CategoryMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId      *int32                 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryMeta) Reset() {
	*x = CategoryMeta{}
	mi := &file_news_news_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryMeta) ProtoMessage() {}

func (x *CategoryMeta) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryMeta.ProtoReflect.Descriptor instead.
func (*CategoryMeta) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{15}
}

func (x *CategoryMeta) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryMeta) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

type CategoryData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryData) Reset() {
	*x = CategoryData{}
	mi := &file_news_news_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryData) ProtoMessage() {}

func (x *CategoryData) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryData.ProtoReflect.Descriptor instead.
func (*CategoryData) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{16}
}

func (x *CategoryData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCategoriesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          common.Lang            `protobuf:"varint,1,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCategoriesParams) Reset() {
	*x = GetCategoriesParams{}
	mi := &file_news_news_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoriesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesParams) ProtoMessage() {}

func (x *GetCategoriesParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesParams.ProtoReflect.Descriptor instead.
func (*GetCategoriesParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{17}
}

func (x *GetCategoriesParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

type GetCategoriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Categories    []*Category            `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCategoriesResponse) Reset() {
	*x = GetCategoriesResponse{}
	mi := &file_news_news_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesResponse) ProtoMessage() {}

func (x *GetCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesResponse.ProtoReflect.Descriptor instead.
func (*GetCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{18}
}

func (x *GetCategoriesResponse) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetCategoryParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          common.Lang            `protobuf:"varint,1,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	ParentId      []byte                 `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCategoryParams) Reset() {
	*x = GetCategoryParams{}
	mi := &file_news_news_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryParams) ProtoMessage() {}

func (x *GetCategoryParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryParams.ProtoReflect.Descriptor instead.
func (*GetCategoryParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{19}
}

func (x *GetCategoryParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *GetCategoryParams) GetParentId() []byte {
	if x != nil {
		return x.ParentId
	}
	return nil
}

type GetSourcesByUuidsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceUuids   [][]byte               `protobuf:"bytes,1,rep,name=source_uuids,json=sourceUuids,proto3" json:"source_uuids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourcesByUuidsParams) Reset() {
	*x = GetSourcesByUuidsParams{}
	mi := &file_news_news_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesByUuidsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesByUuidsParams) ProtoMessage() {}

func (x *GetSourcesByUuidsParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesByUuidsParams.ProtoReflect.Descriptor instead.
func (*GetSourcesByUuidsParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{20}
}

func (x *GetSourcesByUuidsParams) GetSourceUuids() [][]byte {
	if x != nil {
		return x.SourceUuids
	}
	return nil
}

type GetSourcesBySlugParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slugs         string                 `protobuf:"bytes,1,opt,name=slugs,proto3" json:"slugs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourcesBySlugParams) Reset() {
	*x = GetSourcesBySlugParams{}
	mi := &file_news_news_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesBySlugParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesBySlugParams) ProtoMessage() {}

func (x *GetSourcesBySlugParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesBySlugParams.ProtoReflect.Descriptor instead.
func (*GetSourcesBySlugParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{21}
}

func (x *GetSourcesBySlugParams) GetSlugs() string {
	if x != nil {
		return x.Slugs
	}
	return ""
}

type GetSourcesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sources       []*Source              `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourcesResponse) Reset() {
	*x = GetSourcesResponse{}
	mi := &file_news_news_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesResponse) ProtoMessage() {}

func (x *GetSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesResponse.ProtoReflect.Descriptor instead.
func (*GetSourcesResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{22}
}

func (x *GetSourcesResponse) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

type GetSourcesByCategoriesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryIds   []int32                `protobuf:"varint,1,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	ListParams    *common.ListParams     `protobuf:"bytes,2,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourcesByCategoriesParams) Reset() {
	*x = GetSourcesByCategoriesParams{}
	mi := &file_news_news_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesByCategoriesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesByCategoriesParams) ProtoMessage() {}

func (x *GetSourcesByCategoriesParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesByCategoriesParams.ProtoReflect.Descriptor instead.
func (*GetSourcesByCategoriesParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{23}
}

func (x *GetSourcesByCategoriesParams) GetCategoryIds() []int32 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *GetSourcesByCategoriesParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

type GetSourcesByCategoriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sources       [][]byte               `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourcesByCategoriesResponse) Reset() {
	*x = GetSourcesByCategoriesResponse{}
	mi := &file_news_news_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesByCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesByCategoriesResponse) ProtoMessage() {}

func (x *GetSourcesByCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesByCategoriesResponse.ProtoReflect.Descriptor instead.
func (*GetSourcesByCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{24}
}

func (x *GetSourcesByCategoriesResponse) GetSources() [][]byte {
	if x != nil {
		return x.Sources
	}
	return nil
}

type GetArticlesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          common.Lang            `protobuf:"varint,1,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Order         *Sort                  `protobuf:"varint,2,opt,name=order,proto3,enum=news.Sort,oneof" json:"order,omitempty"`
	ListParams    *common.ListParams     `protobuf:"bytes,3,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	Summary       bool                   `protobuf:"varint,4,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticlesParams) Reset() {
	*x = GetArticlesParams{}
	mi := &file_news_news_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticlesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticlesParams) ProtoMessage() {}

func (x *GetArticlesParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticlesParams.ProtoReflect.Descriptor instead.
func (*GetArticlesParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{25}
}

func (x *GetArticlesParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *GetArticlesParams) GetOrder() Sort {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return Sort_SORT_UNSPECIFIED
}

func (x *GetArticlesParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

func (x *GetArticlesParams) GetSummary() bool {
	if x != nil {
		return x.Summary
	}
	return false
}

type GetArticlesByUuidsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          common.Lang            `protobuf:"varint,1,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Uuids         [][]byte               `protobuf:"bytes,2,rep,name=uuids,proto3" json:"uuids,omitempty"`
	Summary       bool                   `protobuf:"varint,3,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticlesByUuidsParams) Reset() {
	*x = GetArticlesByUuidsParams{}
	mi := &file_news_news_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticlesByUuidsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticlesByUuidsParams) ProtoMessage() {}

func (x *GetArticlesByUuidsParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticlesByUuidsParams.ProtoReflect.Descriptor instead.
func (*GetArticlesByUuidsParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{26}
}

func (x *GetArticlesByUuidsParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *GetArticlesByUuidsParams) GetUuids() [][]byte {
	if x != nil {
		return x.Uuids
	}
	return nil
}

func (x *GetArticlesByUuidsParams) GetSummary() bool {
	if x != nil {
		return x.Summary
	}
	return false
}

type GetArticlesByQueryParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          common.Lang            `protobuf:"varint,1,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	ListParams    *common.ListParams     `protobuf:"bytes,3,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticlesByQueryParams) Reset() {
	*x = GetArticlesByQueryParams{}
	mi := &file_news_news_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticlesByQueryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticlesByQueryParams) ProtoMessage() {}

func (x *GetArticlesByQueryParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticlesByQueryParams.ProtoReflect.Descriptor instead.
func (*GetArticlesByQueryParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{27}
}

func (x *GetArticlesByQueryParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *GetArticlesByQueryParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetArticlesByQueryParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

type GetArticlesByFiltersParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *GetArticlesParams     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	FilterUuids   [][]byte               `protobuf:"bytes,2,rep,name=filter_uuids,json=filterUuids,proto3" json:"filter_uuids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticlesByFiltersParams) Reset() {
	*x = GetArticlesByFiltersParams{}
	mi := &file_news_news_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticlesByFiltersParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticlesByFiltersParams) ProtoMessage() {}

func (x *GetArticlesByFiltersParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticlesByFiltersParams.ProtoReflect.Descriptor instead.
func (*GetArticlesByFiltersParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{28}
}

func (x *GetArticlesByFiltersParams) GetCommon() *GetArticlesParams {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetArticlesByFiltersParams) GetFilterUuids() [][]byte {
	if x != nil {
		return x.FilterUuids
	}
	return nil
}

type GetArticlesBySourcesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *GetArticlesParams     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	SourceUuids   [][]byte               `protobuf:"bytes,2,rep,name=source_uuids,json=sourceUuids,proto3" json:"source_uuids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticlesBySourcesParams) Reset() {
	*x = GetArticlesBySourcesParams{}
	mi := &file_news_news_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticlesBySourcesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticlesBySourcesParams) ProtoMessage() {}

func (x *GetArticlesBySourcesParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticlesBySourcesParams.ProtoReflect.Descriptor instead.
func (*GetArticlesBySourcesParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{29}
}

func (x *GetArticlesBySourcesParams) GetCommon() *GetArticlesParams {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetArticlesBySourcesParams) GetSourceUuids() [][]byte {
	if x != nil {
		return x.SourceUuids
	}
	return nil
}

type GetArticlesByCategoriesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        *GetArticlesParams     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	CategoryIds   []int32                `protobuf:"varint,2,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticlesByCategoriesParams) Reset() {
	*x = GetArticlesByCategoriesParams{}
	mi := &file_news_news_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticlesByCategoriesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticlesByCategoriesParams) ProtoMessage() {}

func (x *GetArticlesByCategoriesParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticlesByCategoriesParams.ProtoReflect.Descriptor instead.
func (*GetArticlesByCategoriesParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{30}
}

func (x *GetArticlesByCategoriesParams) GetCommon() *GetArticlesParams {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetArticlesByCategoriesParams) GetCategoryIds() []int32 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type GetArticleParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArticleUuid   []byte                 `protobuf:"bytes,1,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	Lang          common.Lang            `protobuf:"varint,2,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Content       *bool                  `protobuf:"varint,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Summary       *bool                  `protobuf:"varint,4,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticleParams) Reset() {
	*x = GetArticleParams{}
	mi := &file_news_news_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleParams) ProtoMessage() {}

func (x *GetArticleParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleParams.ProtoReflect.Descriptor instead.
func (*GetArticleParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{31}
}

func (x *GetArticleParams) GetArticleUuid() []byte {
	if x != nil {
		return x.ArticleUuid
	}
	return nil
}

func (x *GetArticleParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *GetArticleParams) GetContent() bool {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return false
}

func (x *GetArticleParams) GetSummary() bool {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return false
}

type GetArticleContentParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArticleUuid   []byte                 `protobuf:"bytes,1,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	Lang          common.Lang            `protobuf:"varint,2,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticleContentParams) Reset() {
	*x = GetArticleContentParams{}
	mi := &file_news_news_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticleContentParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleContentParams) ProtoMessage() {}

func (x *GetArticleContentParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleContentParams.ProtoReflect.Descriptor instead.
func (*GetArticleContentParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{32}
}

func (x *GetArticleContentParams) GetArticleUuid() []byte {
	if x != nil {
		return x.ArticleUuid
	}
	return nil
}

func (x *GetArticleContentParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

type GetArticleParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3,oneof" json:"account_uuid,omitempty"`
	Data          *GetArticleParams      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticleParamsInner) Reset() {
	*x = GetArticleParamsInner{}
	mi := &file_news_news_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticleParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleParamsInner) ProtoMessage() {}

func (x *GetArticleParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleParamsInner.ProtoReflect.Descriptor instead.
func (*GetArticleParamsInner) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{33}
}

func (x *GetArticleParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *GetArticleParamsInner) GetData() *GetArticleParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetArticleContentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticleContentResponse) Reset() {
	*x = GetArticleContentResponse{}
	mi := &file_news_news_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticleContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleContentResponse) ProtoMessage() {}

func (x *GetArticleContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleContentResponse.ProtoReflect.Descriptor instead.
func (*GetArticleContentResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{34}
}

func (x *GetArticleContentResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GetArticleSummaryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Summary       string                 `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticleSummaryResponse) Reset() {
	*x = GetArticleSummaryResponse{}
	mi := &file_news_news_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticleSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticleSummaryResponse) ProtoMessage() {}

func (x *GetArticleSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticleSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetArticleSummaryResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{35}
}

func (x *GetArticleSummaryResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type GetArticlesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Articles      []*Article             `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticlesResponse) Reset() {
	*x = GetArticlesResponse{}
	mi := &file_news_news_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticlesResponse) ProtoMessage() {}

func (x *GetArticlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticlesResponse.ProtoReflect.Descriptor instead.
func (*GetArticlesResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{36}
}

func (x *GetArticlesResponse) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

type GetArticlesOutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Articles      []*ArticleOut          `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticlesOutResponse) Reset() {
	*x = GetArticlesOutResponse{}
	mi := &file_news_news_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticlesOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticlesOutResponse) ProtoMessage() {}

func (x *GetArticlesOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticlesOutResponse.ProtoReflect.Descriptor instead.
func (*GetArticlesOutResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{37}
}

func (x *GetArticlesOutResponse) GetArticles() []*ArticleOut {
	if x != nil {
		return x.Articles
	}
	return nil
}

type CheckExistsArticleParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArticleUuid   []byte                 `protobuf:"bytes,1,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckExistsArticleParams) Reset() {
	*x = CheckExistsArticleParams{}
	mi := &file_news_news_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckExistsArticleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExistsArticleParams) ProtoMessage() {}

func (x *CheckExistsArticleParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExistsArticleParams.ProtoReflect.Descriptor instead.
func (*CheckExistsArticleParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{38}
}

func (x *CheckExistsArticleParams) GetArticleUuid() []byte {
	if x != nil {
		return x.ArticleUuid
	}
	return nil
}

type GetSourcesByQueryParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourcesByQueryParams) Reset() {
	*x = GetSourcesByQueryParams{}
	mi := &file_news_news_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesByQueryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesByQueryParams) ProtoMessage() {}

func (x *GetSourcesByQueryParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesByQueryParams.ProtoReflect.Descriptor instead.
func (*GetSourcesByQueryParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{39}
}

func (x *GetSourcesByQueryParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSourcesByQueryElement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *Source                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Categories    []int32                `protobuf:"varint,2,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourcesByQueryElement) Reset() {
	*x = GetSourcesByQueryElement{}
	mi := &file_news_news_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesByQueryElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesByQueryElement) ProtoMessage() {}

func (x *GetSourcesByQueryElement) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesByQueryElement.ProtoReflect.Descriptor instead.
func (*GetSourcesByQueryElement) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{40}
}

func (x *GetSourcesByQueryElement) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *GetSourcesByQueryElement) GetCategories() []int32 {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetSourcesByQueryResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	List          []*GetSourcesByQueryElement `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourcesByQueryResponse) Reset() {
	*x = GetSourcesByQueryResponse{}
	mi := &file_news_news_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesByQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesByQueryResponse) ProtoMessage() {}

func (x *GetSourcesByQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesByQueryResponse.ProtoReflect.Descriptor instead.
func (*GetSourcesByQueryResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{41}
}

func (x *GetSourcesByQueryResponse) GetList() []*GetSourcesByQueryElement {
	if x != nil {
		return x.List
	}
	return nil
}

type GetArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          common.Lang            `protobuf:"varint,1,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Uuid          []byte                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArticle) Reset() {
	*x = GetArticle{}
	mi := &file_news_news_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArticle) ProtoMessage() {}

func (x *GetArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArticle.ProtoReflect.Descriptor instead.
func (*GetArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{42}
}

func (x *GetArticle) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *GetArticle) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type GetCategoryI10N struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          common.Lang            `protobuf:"varint,1,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Data          *CategoryData          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCategoryI10N) Reset() {
	*x = GetCategoryI10N{}
	mi := &file_news_news_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoryI10N) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryI10N) ProtoMessage() {}

func (x *GetCategoryI10N) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryI10N.ProtoReflect.Descriptor instead.
func (*GetCategoryI10N) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{43}
}

func (x *GetCategoryI10N) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *GetCategoryI10N) GetData() *CategoryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ActionArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	ArticleUuid   []byte                 `protobuf:"bytes,2,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionArticle) Reset() {
	*x = ActionArticle{}
	mi := &file_news_news_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionArticle) ProtoMessage() {}

func (x *ActionArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionArticle.ProtoReflect.Descriptor instead.
func (*ActionArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{44}
}

func (x *ActionArticle) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *ActionArticle) GetArticleUuid() []byte {
	if x != nil {
		return x.ArticleUuid
	}
	return nil
}

type UpsertImageUUID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArticleUuid   []byte                 `protobuf:"bytes,1,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	ImageUuid     []byte                 `protobuf:"bytes,2,opt,name=image_uuid,json=imageUuid,proto3" json:"image_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertImageUUID) Reset() {
	*x = UpsertImageUUID{}
	mi := &file_news_news_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertImageUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertImageUUID) ProtoMessage() {}

func (x *UpsertImageUUID) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertImageUUID.ProtoReflect.Descriptor instead.
func (*UpsertImageUUID) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{45}
}

func (x *UpsertImageUUID) GetArticleUuid() []byte {
	if x != nil {
		return x.ArticleUuid
	}
	return nil
}

func (x *UpsertImageUUID) GetImageUuid() []byte {
	if x != nil {
		return x.ImageUuid
	}
	return nil
}

type GetSourcesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceUuids   [][]byte               `protobuf:"bytes,1,rep,name=source_uuids,json=sourceUuids,proto3" json:"source_uuids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourcesParams) Reset() {
	*x = GetSourcesParams{}
	mi := &file_news_news_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourcesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesParams) ProtoMessage() {}

func (x *GetSourcesParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesParams.ProtoReflect.Descriptor instead.
func (*GetSourcesParams) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{46}
}

func (x *GetSourcesParams) GetSourceUuids() [][]byte {
	if x != nil {
		return x.SourceUuids
	}
	return nil
}

var File_news_news_proto protoreflect.FileDescriptor

var file_news_news_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6e, 0x65, 0x77,
	0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e,
	0x65, 0x77, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x0a, 0x52, 0x61, 0x77, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7f, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x85, 0x02, 0x0a, 0x0c, 0x41, 0x70,
	0x69, 0x49, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x75, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x22, 0x54, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x12, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x31, 0x30, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x57, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x01, 0x0a, 0x0a, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x6d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xbc, 0x02, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x79,
	0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x59, 0x0a, 0x0d, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x5a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a,
	0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x22, 0x0a,
	0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x37, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x47, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x75, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x6c, 0x75, 0x67, 0x73, 0x22, 0x3c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3a,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x6c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0x87, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x70, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22, 0x70, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22, 0x73,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0x5e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x22, 0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x35, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x40, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x22, 0x46, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x52,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x18, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x5b,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x31, 0x30,
	0x6e, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x0d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x2a, 0x9d,
	0x01, 0x0a, 0x16, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x58,
	0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x56, 0x49, 0x45, 0x57, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4b, 0x45, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x04, 0x32, 0xd7, 0x0c, 0x0a, 0x04, 0x4e, 0x65, 0x77,
	0x73, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x12, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x19,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x19,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12,
	0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x0d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1f, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a,
	0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0c, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0c, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x49, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x6f, 0x70,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1b,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73,
	0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1f, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x24, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x79,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x78, 0x33, 0x61, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x3b, 0x6e, 0x65, 0x77, 0x73, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_news_news_proto_rawDescOnce sync.Once
	file_news_news_proto_rawDescData []byte
)

func file_news_news_proto_rawDescGZIP() []byte {
	file_news_news_proto_rawDescOnce.Do(func() {
		file_news_news_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_news_news_proto_rawDesc), len(file_news_news_proto_rawDesc)))
	})
	return file_news_news_proto_rawDescData
}

var file_news_news_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_news_news_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_news_news_proto_goTypes = []any{
	(ArticleProcessingState)(0),            // 0: news.ArticleProcessingState
	(ArticleCountAction)(0),                // 1: news.ArticleCountAction
	(*RawArticle)(nil),                     // 2: news.RawArticle
	(*CleanArticle)(nil),                   // 3: news.CleanArticle
	(*ApiInArticle)(nil),                   // 4: news.ApiInArticle
	(*CategorizedPush)(nil),                // 5: news.CategorizedPush
	(*CategorizedSource)(nil),              // 6: news.CategorizedSource
	(*CategorizedArticle)(nil),             // 7: news.CategorizedArticle
	(*ArticleI10N)(nil),                    // 8: news.ArticleI10n
	(*Article)(nil),                        // 9: news.Article
	(*ArticleOut)(nil),                     // 10: news.ArticleOut
	(*ArticleMeta)(nil),                    // 11: news.ArticleMeta
	(*ArticleData)(nil),                    // 12: news.ArticleData
	(*ArticleCounts)(nil),                  // 13: news.ArticleCounts
	(*ArticleFlags)(nil),                   // 14: news.ArticleFlags
	(*ArticleContent)(nil),                 // 15: news.ArticleContent
	(*Category)(nil),                       // 16: news.Category
	(*CategoryMeta)(nil),                   // 17: news.CategoryMeta
	(*CategoryData)(nil),                   // 18: news.CategoryData
	(*GetCategoriesParams)(nil),            // 19: news.GetCategoriesParams
	(*GetCategoriesResponse)(nil),          // 20: news.GetCategoriesResponse
	(*GetCategoryParams)(nil),              // 21: news.GetCategoryParams
	(*GetSourcesByUuidsParams)(nil),        // 22: news.GetSourcesByUuidsParams
	(*GetSourcesBySlugParams)(nil),         // 23: news.GetSourcesBySlugParams
	(*GetSourcesResponse)(nil),             // 24: news.GetSourcesResponse
	(*GetSourcesByCategoriesParams)(nil),   // 25: news.GetSourcesByCategoriesParams
	(*GetSourcesByCategoriesResponse)(nil), // 26: news.GetSourcesByCategoriesResponse
	(*GetArticlesParams)(nil),              // 27: news.GetArticlesParams
	(*GetArticlesByUuidsParams)(nil),       // 28: news.GetArticlesByUuidsParams
	(*GetArticlesByQueryParams)(nil),       // 29: news.GetArticlesByQueryParams
	(*GetArticlesByFiltersParams)(nil),     // 30: news.GetArticlesByFiltersParams
	(*GetArticlesBySourcesParams)(nil),     // 31: news.GetArticlesBySourcesParams
	(*GetArticlesByCategoriesParams)(nil),  // 32: news.GetArticlesByCategoriesParams
	(*GetArticleParams)(nil),               // 33: news.GetArticleParams
	(*GetArticleContentParams)(nil),        // 34: news.GetArticleContentParams
	(*GetArticleParamsInner)(nil),          // 35: news.GetArticleParamsInner
	(*GetArticleContentResponse)(nil),      // 36: news.GetArticleContentResponse
	(*GetArticleSummaryResponse)(nil),      // 37: news.GetArticleSummaryResponse
	(*GetArticlesResponse)(nil),            // 38: news.GetArticlesResponse
	(*GetArticlesOutResponse)(nil),         // 39: news.GetArticlesOutResponse
	(*CheckExistsArticleParams)(nil),       // 40: news.CheckExistsArticleParams
	(*GetSourcesByQueryParams)(nil),        // 41: news.GetSourcesByQueryParams
	(*GetSourcesByQueryElement)(nil),       // 42: news.GetSourcesByQueryElement
	(*GetSourcesByQueryResponse)(nil),      // 43: news.GetSourcesByQueryResponse
	(*GetArticle)(nil),                     // 44: news.GetArticle
	(*GetCategoryI10N)(nil),                // 45: news.GetCategoryI10n
	(*ActionArticle)(nil),                  // 46: news.ActionArticle
	(*UpsertImageUUID)(nil),                // 47: news.UpsertImageUUID
	(*GetSourcesParams)(nil),               // 48: news.GetSourcesParams
	(common.Lang)(0),                       // 49: common.Lang
	(*timestamppb.Timestamp)(nil),          // 50: google.protobuf.Timestamp
	(*social.ReactionSum)(nil),             // 51: social.ReactionSum
	(SourceType)(0),                        // 52: news.SourceType
	(*Source)(nil),                         // 53: news.Source
	(*common.ListParams)(nil),              // 54: common.ListParams
	(Sort)(0),                              // 55: news.Sort
	(*GetFiltersParamsInner)(nil),          // 56: news.GetFiltersParamsInner
	(*GetFilterParams)(nil),                // 57: news.GetFilterParams
	(*CreateFilterParamsInner)(nil),        // 58: news.CreateFilterParamsInner
	(*CreateFromCategoriesParams)(nil),     // 59: news.CreateFromCategoriesParams
	(*UpdateFilterMetaParamsInner)(nil),    // 60: news.UpdateFilterMetaParamsInner
	(*UpdateFilterBodyParamsInner)(nil),    // 61: news.UpdateFilterBodyParamsInner
	(*RemoveFilterParamsInner)(nil),        // 62: news.RemoveFilterParamsInner
	(*SortFilterParams)(nil),               // 63: news.SortFilterParams
	(*CopyFilterParamsInner)(nil),          // 64: news.CopyFilterParamsInner
	(*common.BoolStatus)(nil),              // 65: common.BoolStatus
	(*GetFiltersResponse)(nil),             // 66: news.GetFiltersResponse
	(*Filter)(nil),                         // 67: news.Filter
}
var file_news_news_proto_depIdxs = []int32{
	49, // 0: news.RawArticle.lang:type_name -> common.Lang
	50, // 1: news.RawArticle.published_at:type_name -> google.protobuf.Timestamp
	49, // 2: news.CleanArticle.lang:type_name -> common.Lang
	49, // 3: news.ApiInArticle.lang:type_name -> common.Lang
	50, // 4: news.ApiInArticle.published_at:type_name -> google.protobuf.Timestamp
	6,  // 5: news.CategorizedPush.source:type_name -> news.CategorizedSource
	7,  // 6: news.CategorizedPush.article:type_name -> news.CategorizedArticle
	49, // 7: news.ArticleI10n.lang:type_name -> common.Lang
	11, // 8: news.Article.meta:type_name -> news.ArticleMeta
	12, // 9: news.Article.data:type_name -> news.ArticleData
	11, // 10: news.ArticleOut.meta:type_name -> news.ArticleMeta
	12, // 11: news.ArticleOut.data:type_name -> news.ArticleData
	13, // 12: news.ArticleOut.counts:type_name -> news.ArticleCounts
	14, // 13: news.ArticleOut.flags:type_name -> news.ArticleFlags
	51, // 14: news.ArticleOut.reactions:type_name -> social.ReactionSum
	52, // 15: news.ArticleMeta.source_type:type_name -> news.SourceType
	50, // 16: news.ArticleMeta.published_at:type_name -> google.protobuf.Timestamp
	17, // 17: news.Category.meta:type_name -> news.CategoryMeta
	18, // 18: news.Category.data:type_name -> news.CategoryData
	49, // 19: news.GetCategoriesParams.lang:type_name -> common.Lang
	16, // 20: news.GetCategoriesResponse.categories:type_name -> news.Category
	49, // 21: news.GetCategoryParams.lang:type_name -> common.Lang
	53, // 22: news.GetSourcesResponse.sources:type_name -> news.Source
	54, // 23: news.GetSourcesByCategoriesParams.list_params:type_name -> common.ListParams
	49, // 24: news.GetArticlesParams.lang:type_name -> common.Lang
	55, // 25: news.GetArticlesParams.order:type_name -> news.Sort
	54, // 26: news.GetArticlesParams.list_params:type_name -> common.ListParams
	49, // 27: news.GetArticlesByUuidsParams.lang:type_name -> common.Lang
	49, // 28: news.GetArticlesByQueryParams.lang:type_name -> common.Lang
	54, // 29: news.GetArticlesByQueryParams.list_params:type_name -> common.ListParams
	27, // 30: news.GetArticlesByFiltersParams.common:type_name -> news.GetArticlesParams
	27, // 31: news.GetArticlesBySourcesParams.common:type_name -> news.GetArticlesParams
	27, // 32: news.GetArticlesByCategoriesParams.common:type_name -> news.GetArticlesParams
	49, // 33: news.GetArticleParams.lang:type_name -> common.Lang
	49, // 34: news.GetArticleContentParams.lang:type_name -> common.Lang
	33, // 35: news.GetArticleParamsInner.data:type_name -> news.GetArticleParams
	9,  // 36: news.GetArticlesResponse.articles:type_name -> news.Article
	10, // 37: news.GetArticlesOutResponse.articles:type_name -> news.ArticleOut
	53, // 38: news.GetSourcesByQueryElement.source:type_name -> news.Source
	42, // 39: news.GetSourcesByQueryResponse.list:type_name -> news.GetSourcesByQueryElement
	49, // 40: news.GetArticle.lang:type_name -> common.Lang
	49, // 41: news.GetCategoryI10n.lang:type_name -> common.Lang
	18, // 42: news.GetCategoryI10n.data:type_name -> news.CategoryData
	27, // 43: news.News.GetArticles:input_type -> news.GetArticlesParams
	30, // 44: news.News.GetArticlesByFilters:input_type -> news.GetArticlesByFiltersParams
	31, // 45: news.News.GetArticlesBySources:input_type -> news.GetArticlesBySourcesParams
	32, // 46: news.News.GetArticlesByCategories:input_type -> news.GetArticlesByCategoriesParams
	28, // 47: news.News.GetArticlesByUuids:input_type -> news.GetArticlesByUuidsParams
	33, // 48: news.News.GetArticle:input_type -> news.GetArticleParams
	33, // 49: news.News.GetArticleContent:input_type -> news.GetArticleParams
	33, // 50: news.News.GetArticleSummary:input_type -> news.GetArticleParams
	40, // 51: news.News.CheckExistArticle:input_type -> news.CheckExistsArticleParams
	56, // 52: news.News.GetFilters:input_type -> news.GetFiltersParamsInner
	57, // 53: news.News.GetFilter:input_type -> news.GetFilterParams
	58, // 54: news.News.CreateFilter:input_type -> news.CreateFilterParamsInner
	59, // 55: news.News.CreateFilterFromCategories:input_type -> news.CreateFromCategoriesParams
	60, // 56: news.News.UpdateFilterMeta:input_type -> news.UpdateFilterMetaParamsInner
	61, // 57: news.News.UpdateFilterBody:input_type -> news.UpdateFilterBodyParamsInner
	62, // 58: news.News.RemoveFilter:input_type -> news.RemoveFilterParamsInner
	63, // 59: news.News.SortFilter:input_type -> news.SortFilterParams
	64, // 60: news.News.CopyFilter:input_type -> news.CopyFilterParamsInner
	19, // 61: news.News.GetCategories:input_type -> news.GetCategoriesParams
	22, // 62: news.News.GetSourcesByUuids:input_type -> news.GetSourcesByUuidsParams
	41, // 63: news.News.GetSourcesByQuery:input_type -> news.GetSourcesByQueryParams
	25, // 64: news.News.GetSourcesByCategories:input_type -> news.GetSourcesByCategoriesParams
	38, // 65: news.News.GetArticles:output_type -> news.GetArticlesResponse
	38, // 66: news.News.GetArticlesByFilters:output_type -> news.GetArticlesResponse
	38, // 67: news.News.GetArticlesBySources:output_type -> news.GetArticlesResponse
	38, // 68: news.News.GetArticlesByCategories:output_type -> news.GetArticlesResponse
	38, // 69: news.News.GetArticlesByUuids:output_type -> news.GetArticlesResponse
	9,  // 70: news.News.GetArticle:output_type -> news.Article
	36, // 71: news.News.GetArticleContent:output_type -> news.GetArticleContentResponse
	37, // 72: news.News.GetArticleSummary:output_type -> news.GetArticleSummaryResponse
	65, // 73: news.News.CheckExistArticle:output_type -> common.BoolStatus
	66, // 74: news.News.GetFilters:output_type -> news.GetFiltersResponse
	67, // 75: news.News.GetFilter:output_type -> news.Filter
	67, // 76: news.News.CreateFilter:output_type -> news.Filter
	67, // 77: news.News.CreateFilterFromCategories:output_type -> news.Filter
	65, // 78: news.News.UpdateFilterMeta:output_type -> common.BoolStatus
	65, // 79: news.News.UpdateFilterBody:output_type -> common.BoolStatus
	65, // 80: news.News.RemoveFilter:output_type -> common.BoolStatus
	65, // 81: news.News.SortFilter:output_type -> common.BoolStatus
	67, // 82: news.News.CopyFilter:output_type -> news.Filter
	20, // 83: news.News.GetCategories:output_type -> news.GetCategoriesResponse
	24, // 84: news.News.GetSourcesByUuids:output_type -> news.GetSourcesResponse
	43, // 85: news.News.GetSourcesByQuery:output_type -> news.GetSourcesByQueryResponse
	26, // 86: news.News.GetSourcesByCategories:output_type -> news.GetSourcesByCategoriesResponse
	65, // [65:87] is the sub-list for method output_type
	43, // [43:65] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_news_news_proto_init() }
func file_news_news_proto_init() {
	if File_news_news_proto != nil {
		return
	}
	file_news_filter_proto_init()
	file_news_enums_proto_init()
	file_news_source_proto_init()
	file_news_news_proto_msgTypes[9].OneofWrappers = []any{}
	file_news_news_proto_msgTypes[10].OneofWrappers = []any{}
	file_news_news_proto_msgTypes[15].OneofWrappers = []any{}
	file_news_news_proto_msgTypes[19].OneofWrappers = []any{}
	file_news_news_proto_msgTypes[25].OneofWrappers = []any{}
	file_news_news_proto_msgTypes[31].OneofWrappers = []any{}
	file_news_news_proto_msgTypes[33].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_news_news_proto_rawDesc), len(file_news_news_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_news_news_proto_goTypes,
		DependencyIndexes: file_news_news_proto_depIdxs,
		EnumInfos:         file_news_news_proto_enumTypes,
		MessageInfos:      file_news_news_proto_msgTypes,
	}.Build()
	File_news_news_proto = out.File
	file_news_news_proto_goTypes = nil
	file_news_news_proto_depIdxs = nil
}
