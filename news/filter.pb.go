// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: news/filter.proto

package newsv1

import (
	common "github.com/x3a-tech/contract-go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterType int32

const (
	FilterType_FILTER_TYPE_UNSPECIFIED FilterType = 0
	FilterType_CATEGORY                FilterType = 1
	FilterType_SOURCE                  FilterType = 2
	FilterType_SOURCE_CATEGORY         FilterType = 3
)

// Enum value maps for FilterType.
var (
	FilterType_name = map[int32]string{
		0: "FILTER_TYPE_UNSPECIFIED",
		1: "CATEGORY",
		2: "SOURCE",
		3: "SOURCE_CATEGORY",
	}
	FilterType_value = map[string]int32{
		"FILTER_TYPE_UNSPECIFIED": 0,
		"CATEGORY":                1,
		"SOURCE":                  2,
		"SOURCE_CATEGORY":         3,
	}
)

func (x FilterType) Enum() *FilterType {
	p := new(FilterType)
	*p = x
	return p
}

func (x FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_news_filter_proto_enumTypes[0].Descriptor()
}

func (FilterType) Type() protoreflect.EnumType {
	return &file_news_filter_proto_enumTypes[0]
}

func (x FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterType.Descriptor instead.
func (FilterType) EnumDescriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{0}
}

type FilterMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AccountUuid   []byte                 `protobuf:"bytes,4,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Type          FilterType             `protobuf:"varint,5,opt,name=type,proto3,enum=news.FilterType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterMeta) Reset() {
	*x = FilterMeta{}
	mi := &file_news_filter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterMeta) ProtoMessage() {}

func (x *FilterMeta) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterMeta.ProtoReflect.Descriptor instead.
func (*FilterMeta) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{0}
}

func (x *FilterMeta) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *FilterMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterMeta) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *FilterMeta) GetType() FilterType {
	if x != nil {
		return x.Type
	}
	return FilterType_FILTER_TYPE_UNSPECIFIED
}

type Filter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *FilterMeta            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Body          *FilterBody            `protobuf:"bytes,2,opt,name=body,proto3,oneof" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_news_filter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{1}
}

func (x *Filter) GetMeta() *FilterMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Filter) GetBody() *FilterBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type FilterBody struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Sources        [][]byte               `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Categories     []int32                `protobuf:"varint,2,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	SourceCategory []*NewSourceCategory   `protobuf:"bytes,3,rep,name=source_category,json=sourceCategory,proto3" json:"source_category,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FilterBody) Reset() {
	*x = FilterBody{}
	mi := &file_news_filter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBody) ProtoMessage() {}

func (x *FilterBody) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBody.ProtoReflect.Descriptor instead.
func (*FilterBody) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{2}
}

func (x *FilterBody) GetSources() [][]byte {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *FilterBody) GetCategories() []int32 {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *FilterBody) GetSourceCategory() []*NewSourceCategory {
	if x != nil {
		return x.SourceCategory
	}
	return nil
}

type CreateFilterParams struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           *string                `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type           FilterType             `protobuf:"varint,2,opt,name=type,proto3,enum=news.FilterType" json:"type,omitempty"`
	Sources        [][]byte               `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	Categories     []int32                `protobuf:"varint,4,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	SourceCategory []*NewSourceCategory   `protobuf:"bytes,5,rep,name=source_category,json=sourceCategory,proto3" json:"source_category,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateFilterParams) Reset() {
	*x = CreateFilterParams{}
	mi := &file_news_filter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFilterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFilterParams) ProtoMessage() {}

func (x *CreateFilterParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFilterParams.ProtoReflect.Descriptor instead.
func (*CreateFilterParams) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFilterParams) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateFilterParams) GetType() FilterType {
	if x != nil {
		return x.Type
	}
	return FilterType_FILTER_TYPE_UNSPECIFIED
}

func (x *CreateFilterParams) GetSources() [][]byte {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *CreateFilterParams) GetCategories() []int32 {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *CreateFilterParams) GetSourceCategory() []*NewSourceCategory {
	if x != nil {
		return x.SourceCategory
	}
	return nil
}

type CreateFilterParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *CreateFilterParams    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFilterParamsInner) Reset() {
	*x = CreateFilterParamsInner{}
	mi := &file_news_filter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFilterParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFilterParamsInner) ProtoMessage() {}

func (x *CreateFilterParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFilterParamsInner.ProtoReflect.Descriptor instead.
func (*CreateFilterParamsInner) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFilterParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *CreateFilterParamsInner) GetData() *CreateFilterParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type CopyFilterParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterUuid    []byte                 `protobuf:"bytes,1,opt,name=filter_uuid,json=filterUuid,proto3" json:"filter_uuid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyFilterParams) Reset() {
	*x = CopyFilterParams{}
	mi := &file_news_filter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyFilterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFilterParams) ProtoMessage() {}

func (x *CopyFilterParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFilterParams.ProtoReflect.Descriptor instead.
func (*CopyFilterParams) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{5}
}

func (x *CopyFilterParams) GetFilterUuid() []byte {
	if x != nil {
		return x.FilterUuid
	}
	return nil
}

func (x *CopyFilterParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SortFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterUuid    []byte                 `protobuf:"bytes,1,opt,name=filter_uuid,json=filterUuid,proto3" json:"filter_uuid,omitempty"`
	Order         int32                  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortFilter) Reset() {
	*x = SortFilter{}
	mi := &file_news_filter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortFilter) ProtoMessage() {}

func (x *SortFilter) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortFilter.ProtoReflect.Descriptor instead.
func (*SortFilter) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{6}
}

func (x *SortFilter) GetFilterUuid() []byte {
	if x != nil {
		return x.FilterUuid
	}
	return nil
}

func (x *SortFilter) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SortFilterParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sorts         []*SortFilter          `protobuf:"bytes,1,rep,name=sorts,proto3" json:"sorts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortFilterParams) Reset() {
	*x = SortFilterParams{}
	mi := &file_news_filter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortFilterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortFilterParams) ProtoMessage() {}

func (x *SortFilterParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortFilterParams.ProtoReflect.Descriptor instead.
func (*SortFilterParams) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{7}
}

func (x *SortFilterParams) GetSorts() []*SortFilter {
	if x != nil {
		return x.Sorts
	}
	return nil
}

type GetFiltersParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListParams    *common.ListParams     `protobuf:"bytes,1,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFiltersParams) Reset() {
	*x = GetFiltersParams{}
	mi := &file_news_filter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFiltersParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiltersParams) ProtoMessage() {}

func (x *GetFiltersParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiltersParams.ProtoReflect.Descriptor instead.
func (*GetFiltersParams) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{8}
}

func (x *GetFiltersParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

type GetFiltersParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *GetFiltersParams      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFiltersParamsInner) Reset() {
	*x = GetFiltersParamsInner{}
	mi := &file_news_filter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFiltersParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiltersParamsInner) ProtoMessage() {}

func (x *GetFiltersParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiltersParamsInner.ProtoReflect.Descriptor instead.
func (*GetFiltersParamsInner) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{9}
}

func (x *GetFiltersParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *GetFiltersParamsInner) GetData() *GetFiltersParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetFilterParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterUuid    []byte                 `protobuf:"bytes,1,opt,name=filter_uuid,json=filterUuid,proto3" json:"filter_uuid,omitempty"`
	Body          bool                   `protobuf:"varint,2,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFilterParams) Reset() {
	*x = GetFilterParams{}
	mi := &file_news_filter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFilterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilterParams) ProtoMessage() {}

func (x *GetFilterParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilterParams.ProtoReflect.Descriptor instead.
func (*GetFilterParams) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{10}
}

func (x *GetFilterParams) GetFilterUuid() []byte {
	if x != nil {
		return x.FilterUuid
	}
	return nil
}

func (x *GetFilterParams) GetBody() bool {
	if x != nil {
		return x.Body
	}
	return false
}

type GetFilterBodyParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterUuid    []byte                 `protobuf:"bytes,1,opt,name=filter_uuid,json=filterUuid,proto3" json:"filter_uuid,omitempty"`
	Body          bool                   `protobuf:"varint,2,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFilterBodyParams) Reset() {
	*x = GetFilterBodyParams{}
	mi := &file_news_filter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFilterBodyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilterBodyParams) ProtoMessage() {}

func (x *GetFilterBodyParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilterBodyParams.ProtoReflect.Descriptor instead.
func (*GetFilterBodyParams) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{11}
}

func (x *GetFilterBodyParams) GetFilterUuid() []byte {
	if x != nil {
		return x.FilterUuid
	}
	return nil
}

func (x *GetFilterBodyParams) GetBody() bool {
	if x != nil {
		return x.Body
	}
	return false
}

type GetFiltersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       []*Filter              `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFiltersResponse) Reset() {
	*x = GetFiltersResponse{}
	mi := &file_news_filter_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiltersResponse) ProtoMessage() {}

func (x *GetFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiltersResponse.ProtoReflect.Descriptor instead.
func (*GetFiltersResponse) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{12}
}

func (x *GetFiltersResponse) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type GetFiltersShortResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Filters       [][]byte               `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFiltersShortResponse) Reset() {
	*x = GetFiltersShortResponse{}
	mi := &file_news_filter_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFiltersShortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiltersShortResponse) ProtoMessage() {}

func (x *GetFiltersShortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiltersShortResponse.ProtoReflect.Descriptor instead.
func (*GetFiltersShortResponse) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{13}
}

func (x *GetFiltersShortResponse) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *GetFiltersShortResponse) GetFilters() [][]byte {
	if x != nil {
		return x.Filters
	}
	return nil
}

type UpdateFilterMetaParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterUuid    []byte                 `protobuf:"bytes,1,opt,name=filter_uuid,json=filterUuid,proto3" json:"filter_uuid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFilterMetaParams) Reset() {
	*x = UpdateFilterMetaParams{}
	mi := &file_news_filter_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFilterMetaParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFilterMetaParams) ProtoMessage() {}

func (x *UpdateFilterMetaParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFilterMetaParams.ProtoReflect.Descriptor instead.
func (*UpdateFilterMetaParams) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateFilterMetaParams) GetFilterUuid() []byte {
	if x != nil {
		return x.FilterUuid
	}
	return nil
}

func (x *UpdateFilterMetaParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateFilterMetaParamsInner struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	AccountUuid   []byte                  `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *UpdateFilterMetaParams `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFilterMetaParamsInner) Reset() {
	*x = UpdateFilterMetaParamsInner{}
	mi := &file_news_filter_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFilterMetaParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFilterMetaParamsInner) ProtoMessage() {}

func (x *UpdateFilterMetaParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFilterMetaParamsInner.ProtoReflect.Descriptor instead.
func (*UpdateFilterMetaParamsInner) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateFilterMetaParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *UpdateFilterMetaParamsInner) GetData() *UpdateFilterMetaParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateFilterBodyParams struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	FilterUuid                 []byte                 `protobuf:"bytes,1,opt,name=filter_uuid,json=filterUuid,proto3" json:"filter_uuid,omitempty"`
	AddFilterSources           [][]byte               `protobuf:"bytes,2,rep,name=add_filter_sources,json=addFilterSources,proto3" json:"add_filter_sources,omitempty"`
	RemoveFilterSources        [][]byte               `protobuf:"bytes,3,rep,name=remove_filter_sources,json=removeFilterSources,proto3" json:"remove_filter_sources,omitempty"`
	AddFilterCategories        []int32                `protobuf:"varint,4,rep,packed,name=add_filter_categories,json=addFilterCategories,proto3" json:"add_filter_categories,omitempty"`
	RemoveFilterCategories     []int32                `protobuf:"varint,5,rep,packed,name=remove_filter_categories,json=removeFilterCategories,proto3" json:"remove_filter_categories,omitempty"`
	AddFilterSourceCategory    []*NewSourceCategory   `protobuf:"bytes,6,rep,name=add_filter_source_category,json=addFilterSourceCategory,proto3" json:"add_filter_source_category,omitempty"`
	RemoveFilterSourceCategory []*NewSourceCategory   `protobuf:"bytes,7,rep,name=remove_filter_source_category,json=removeFilterSourceCategory,proto3" json:"remove_filter_source_category,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdateFilterBodyParams) Reset() {
	*x = UpdateFilterBodyParams{}
	mi := &file_news_filter_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFilterBodyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFilterBodyParams) ProtoMessage() {}

func (x *UpdateFilterBodyParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFilterBodyParams.ProtoReflect.Descriptor instead.
func (*UpdateFilterBodyParams) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateFilterBodyParams) GetFilterUuid() []byte {
	if x != nil {
		return x.FilterUuid
	}
	return nil
}

func (x *UpdateFilterBodyParams) GetAddFilterSources() [][]byte {
	if x != nil {
		return x.AddFilterSources
	}
	return nil
}

func (x *UpdateFilterBodyParams) GetRemoveFilterSources() [][]byte {
	if x != nil {
		return x.RemoveFilterSources
	}
	return nil
}

func (x *UpdateFilterBodyParams) GetAddFilterCategories() []int32 {
	if x != nil {
		return x.AddFilterCategories
	}
	return nil
}

func (x *UpdateFilterBodyParams) GetRemoveFilterCategories() []int32 {
	if x != nil {
		return x.RemoveFilterCategories
	}
	return nil
}

func (x *UpdateFilterBodyParams) GetAddFilterSourceCategory() []*NewSourceCategory {
	if x != nil {
		return x.AddFilterSourceCategory
	}
	return nil
}

func (x *UpdateFilterBodyParams) GetRemoveFilterSourceCategory() []*NewSourceCategory {
	if x != nil {
		return x.RemoveFilterSourceCategory
	}
	return nil
}

type UpdateFilterBodyParamsInner struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	AccountUuid   []byte                  `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *UpdateFilterBodyParams `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFilterBodyParamsInner) Reset() {
	*x = UpdateFilterBodyParamsInner{}
	mi := &file_news_filter_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFilterBodyParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFilterBodyParamsInner) ProtoMessage() {}

func (x *UpdateFilterBodyParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFilterBodyParamsInner.ProtoReflect.Descriptor instead.
func (*UpdateFilterBodyParamsInner) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateFilterBodyParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *UpdateFilterBodyParamsInner) GetData() *UpdateFilterBodyParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type RemoveFilterParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterUuid    []byte                 `protobuf:"bytes,1,opt,name=filter_uuid,json=filterUuid,proto3" json:"filter_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFilterParams) Reset() {
	*x = RemoveFilterParams{}
	mi := &file_news_filter_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFilterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFilterParams) ProtoMessage() {}

func (x *RemoveFilterParams) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFilterParams.ProtoReflect.Descriptor instead.
func (*RemoveFilterParams) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveFilterParams) GetFilterUuid() []byte {
	if x != nil {
		return x.FilterUuid
	}
	return nil
}

type RemoveFilterParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *RemoveFilterParams    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFilterParamsInner) Reset() {
	*x = RemoveFilterParamsInner{}
	mi := &file_news_filter_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFilterParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFilterParamsInner) ProtoMessage() {}

func (x *RemoveFilterParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_news_filter_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFilterParamsInner.ProtoReflect.Descriptor instead.
func (*RemoveFilterParamsInner) Descriptor() ([]byte, []int) {
	return file_news_filter_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveFilterParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *RemoveFilterParamsInner) GetData() *RemoveFilterParams {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_news_filter_proto protoreflect.FileDescriptor

var file_news_filter_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x1a, 0x11, 0x6e, 0x65, 0x77, 0x73, 0x2f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x7d, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x62, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79,
	0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4e, 0x65,
	0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0xd8, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x4e, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x43, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x10, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x66, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x4a, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x3c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb,
	0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x6f, 0x64, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x64, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x61, 0x64, 0x64,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x1a, 0x61, 0x64,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x17, 0x61, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x5a, 0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4e,
	0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x72, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x6f, 0x64, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x35, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x2a, 0x58, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x42, 0x2d, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x33, 0x61, 0x2d,
	0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x67, 0x6f,
	0x2f, 0x6e, 0x65, 0x77, 0x73, 0x3b, 0x6e, 0x65, 0x77, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_news_filter_proto_rawDescOnce sync.Once
	file_news_filter_proto_rawDescData []byte
)

func file_news_filter_proto_rawDescGZIP() []byte {
	file_news_filter_proto_rawDescOnce.Do(func() {
		file_news_filter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_news_filter_proto_rawDesc), len(file_news_filter_proto_rawDesc)))
	})
	return file_news_filter_proto_rawDescData
}

var file_news_filter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_news_filter_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_news_filter_proto_goTypes = []any{
	(FilterType)(0),                     // 0: news.FilterType
	(*FilterMeta)(nil),                  // 1: news.FilterMeta
	(*Filter)(nil),                      // 2: news.Filter
	(*FilterBody)(nil),                  // 3: news.FilterBody
	(*CreateFilterParams)(nil),          // 4: news.CreateFilterParams
	(*CreateFilterParamsInner)(nil),     // 5: news.CreateFilterParamsInner
	(*CopyFilterParams)(nil),            // 6: news.CopyFilterParams
	(*SortFilter)(nil),                  // 7: news.SortFilter
	(*SortFilterParams)(nil),            // 8: news.SortFilterParams
	(*GetFiltersParams)(nil),            // 9: news.GetFiltersParams
	(*GetFiltersParamsInner)(nil),       // 10: news.GetFiltersParamsInner
	(*GetFilterParams)(nil),             // 11: news.GetFilterParams
	(*GetFilterBodyParams)(nil),         // 12: news.GetFilterBodyParams
	(*GetFiltersResponse)(nil),          // 13: news.GetFiltersResponse
	(*GetFiltersShortResponse)(nil),     // 14: news.GetFiltersShortResponse
	(*UpdateFilterMetaParams)(nil),      // 15: news.UpdateFilterMetaParams
	(*UpdateFilterMetaParamsInner)(nil), // 16: news.UpdateFilterMetaParamsInner
	(*UpdateFilterBodyParams)(nil),      // 17: news.UpdateFilterBodyParams
	(*UpdateFilterBodyParamsInner)(nil), // 18: news.UpdateFilterBodyParamsInner
	(*RemoveFilterParams)(nil),          // 19: news.RemoveFilterParams
	(*RemoveFilterParamsInner)(nil),     // 20: news.RemoveFilterParamsInner
	(*NewSourceCategory)(nil),           // 21: news.NewSourceCategory
	(*common.ListParams)(nil),           // 22: common.ListParams
}
var file_news_filter_proto_depIdxs = []int32{
	0,  // 0: news.FilterMeta.type:type_name -> news.FilterType
	1,  // 1: news.Filter.meta:type_name -> news.FilterMeta
	3,  // 2: news.Filter.body:type_name -> news.FilterBody
	21, // 3: news.FilterBody.source_category:type_name -> news.NewSourceCategory
	0,  // 4: news.CreateFilterParams.type:type_name -> news.FilterType
	21, // 5: news.CreateFilterParams.source_category:type_name -> news.NewSourceCategory
	4,  // 6: news.CreateFilterParamsInner.data:type_name -> news.CreateFilterParams
	7,  // 7: news.SortFilterParams.sorts:type_name -> news.SortFilter
	22, // 8: news.GetFiltersParams.list_params:type_name -> common.ListParams
	9,  // 9: news.GetFiltersParamsInner.data:type_name -> news.GetFiltersParams
	2,  // 10: news.GetFiltersResponse.filters:type_name -> news.Filter
	15, // 11: news.UpdateFilterMetaParamsInner.data:type_name -> news.UpdateFilterMetaParams
	21, // 12: news.UpdateFilterBodyParams.add_filter_source_category:type_name -> news.NewSourceCategory
	21, // 13: news.UpdateFilterBodyParams.remove_filter_source_category:type_name -> news.NewSourceCategory
	17, // 14: news.UpdateFilterBodyParamsInner.data:type_name -> news.UpdateFilterBodyParams
	19, // 15: news.RemoveFilterParamsInner.data:type_name -> news.RemoveFilterParams
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_news_filter_proto_init() }
func file_news_filter_proto_init() {
	if File_news_filter_proto != nil {
		return
	}
	file_news_source_proto_init()
	file_news_filter_proto_msgTypes[1].OneofWrappers = []any{}
	file_news_filter_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_news_filter_proto_rawDesc), len(file_news_filter_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_news_filter_proto_goTypes,
		DependencyIndexes: file_news_filter_proto_depIdxs,
		EnumInfos:         file_news_filter_proto_enumTypes,
		MessageInfos:      file_news_filter_proto_msgTypes,
	}.Build()
	File_news_filter_proto = out.File
	file_news_filter_proto_goTypes = nil
	file_news_filter_proto_depIdxs = nil
}
