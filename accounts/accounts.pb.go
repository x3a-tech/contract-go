// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: accounts/accounts.proto

package accountsv1

import (
	common "github.com/x3a-tech/contract-go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Method int32

const (
	Method_NULL              Method = 0
	Method_IDENTIFY          Method = 1
	Method_GET_ACCOUNT_SHORT Method = 2
)

// Enum value maps for Method.
var (
	Method_name = map[int32]string{
		0: "NULL",
		1: "IDENTIFY",
		2: "GET_ACCOUNT_SHORT",
	}
	Method_value = map[string]int32{
		"NULL":              0,
		"IDENTIFY":          1,
		"GET_ACCOUNT_SHORT": 2,
	}
)

func (x Method) Enum() *Method {
	p := new(Method)
	*p = x
	return p
}

func (x Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Method) Descriptor() protoreflect.EnumDescriptor {
	return file_accounts_accounts_proto_enumTypes[0].Descriptor()
}

func (Method) Type() protoreflect.EnumType {
	return &file_accounts_accounts_proto_enumTypes[0]
}

func (x Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Method.Descriptor instead.
func (Method) EnumDescriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{0}
}

type MarketType int32

const (
	MarketType_MARKET_TYPE_UNDEFINED MarketType = 0
	MarketType_Crypto                MarketType = 1
	MarketType_Fiat                  MarketType = 2
	MarketType_Forex                 MarketType = 3
	MarketType_Stock                 MarketType = 4
)

// Enum value maps for MarketType.
var (
	MarketType_name = map[int32]string{
		0: "MARKET_TYPE_UNDEFINED",
		1: "Crypto",
		2: "Fiat",
		3: "Forex",
		4: "Stock",
	}
	MarketType_value = map[string]int32{
		"MARKET_TYPE_UNDEFINED": 0,
		"Crypto":                1,
		"Fiat":                  2,
		"Forex":                 3,
		"Stock":                 4,
	}
)

func (x MarketType) Enum() *MarketType {
	p := new(MarketType)
	*p = x
	return p
}

func (x MarketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketType) Descriptor() protoreflect.EnumDescriptor {
	return file_accounts_accounts_proto_enumTypes[1].Descriptor()
}

func (MarketType) Type() protoreflect.EnumType {
	return &file_accounts_accounts_proto_enumTypes[1]
}

func (x MarketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketType.Descriptor instead.
func (MarketType) EnumDescriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{1}
}

type AccountBlockType int32

const (
	AccountBlockType_ACCOUNT_BLOCK_TYPE_UNDEFINED AccountBlockType = 0
	AccountBlockType_ACCOUNT_BLOCK_TYPE_GLOBAL    AccountBlockType = 1
	AccountBlockType_ACCOUNT_BLOCK_TYPE_PURCHASE  AccountBlockType = 2
	AccountBlockType_ACCOUNT_BLOCK_TYPE_COMMENTS  AccountBlockType = 3
)

// Enum value maps for AccountBlockType.
var (
	AccountBlockType_name = map[int32]string{
		0: "ACCOUNT_BLOCK_TYPE_UNDEFINED",
		1: "ACCOUNT_BLOCK_TYPE_GLOBAL",
		2: "ACCOUNT_BLOCK_TYPE_PURCHASE",
		3: "ACCOUNT_BLOCK_TYPE_COMMENTS",
	}
	AccountBlockType_value = map[string]int32{
		"ACCOUNT_BLOCK_TYPE_UNDEFINED": 0,
		"ACCOUNT_BLOCK_TYPE_GLOBAL":    1,
		"ACCOUNT_BLOCK_TYPE_PURCHASE":  2,
		"ACCOUNT_BLOCK_TYPE_COMMENTS":  3,
	}
)

func (x AccountBlockType) Enum() *AccountBlockType {
	p := new(AccountBlockType)
	*p = x
	return p
}

func (x AccountBlockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountBlockType) Descriptor() protoreflect.EnumDescriptor {
	return file_accounts_accounts_proto_enumTypes[2].Descriptor()
}

func (AccountBlockType) Type() protoreflect.EnumType {
	return &file_accounts_accounts_proto_enumTypes[2]
}

func (x AccountBlockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountBlockType.Descriptor instead.
func (AccountBlockType) EnumDescriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{2}
}

type AuthTelegramParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InitData      string                 `protobuf:"bytes,1,opt,name=init_data,json=initData,proto3" json:"init_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthTelegramParams) Reset() {
	*x = AuthTelegramParams{}
	mi := &file_accounts_accounts_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthTelegramParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthTelegramParams) ProtoMessage() {}

func (x *AuthTelegramParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthTelegramParams.ProtoReflect.Descriptor instead.
func (*AuthTelegramParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{0}
}

func (x *AuthTelegramParams) GetInitData() string {
	if x != nil {
		return x.InitData
	}
	return ""
}

type AuthTelegramParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserAgent     string                 `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Data          *AuthTelegramParams    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthTelegramParamsInner) Reset() {
	*x = AuthTelegramParamsInner{}
	mi := &file_accounts_accounts_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthTelegramParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthTelegramParamsInner) ProtoMessage() {}

func (x *AuthTelegramParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthTelegramParamsInner.ProtoReflect.Descriptor instead.
func (*AuthTelegramParamsInner) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{1}
}

func (x *AuthTelegramParamsInner) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AuthTelegramParamsInner) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AuthTelegramParamsInner) GetData() *AuthTelegramParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type AuthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken   string                 `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthResponse) Reset() {
	*x = AuthResponse{}
	mi := &file_accounts_accounts_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponse) ProtoMessage() {}

func (x *AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponse.ProtoReflect.Descriptor instead.
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{2}
}

func (x *AuthResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *AuthResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type AuthRefreshParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthRefreshParams) Reset() {
	*x = AuthRefreshParams{}
	mi := &file_accounts_accounts_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthRefreshParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRefreshParams) ProtoMessage() {}

func (x *AuthRefreshParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRefreshParams.ProtoReflect.Descriptor instead.
func (*AuthRefreshParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{3}
}

func (x *AuthRefreshParams) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type AuthRefreshParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserAgent     string                 `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Data          *AuthRefreshParams     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthRefreshParamsInner) Reset() {
	*x = AuthRefreshParamsInner{}
	mi := &file_accounts_accounts_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthRefreshParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRefreshParamsInner) ProtoMessage() {}

func (x *AuthRefreshParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRefreshParamsInner.ProtoReflect.Descriptor instead.
func (*AuthRefreshParamsInner) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{4}
}

func (x *AuthRefreshParamsInner) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AuthRefreshParamsInner) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AuthRefreshParamsInner) GetData() *AuthRefreshParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *Account               `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	FeedCoins     []*FeedCoin            `protobuf:"bytes,2,rep,name=feed_coins,json=feedCoins,proto3" json:"feed_coins,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Profile) Reset() {
	*x = Profile{}
	mi := &file_accounts_accounts_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{5}
}

func (x *Profile) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Profile) GetFeedCoins() []*FeedCoin {
	if x != nil {
		return x.FeedCoins
	}
	return nil
}

type ProfileParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileParams) Reset() {
	*x = ProfileParams{}
	mi := &file_accounts_accounts_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileParams) ProtoMessage() {}

func (x *ProfileParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileParams.ProtoReflect.Descriptor instead.
func (*ProfileParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{6}
}

func (x *ProfileParams) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

type SetLangParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          common.Lang            `protobuf:"varint,1,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLangParams) Reset() {
	*x = SetLangParams{}
	mi := &file_accounts_accounts_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLangParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLangParams) ProtoMessage() {}

func (x *SetLangParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLangParams.ProtoReflect.Descriptor instead.
func (*SetLangParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{7}
}

func (x *SetLangParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

type SetLangParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *SetLangParams         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLangParamsInner) Reset() {
	*x = SetLangParamsInner{}
	mi := &file_accounts_accounts_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLangParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLangParamsInner) ProtoMessage() {}

func (x *SetLangParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLangParamsInner.ProtoReflect.Descriptor instead.
func (*SetLangParamsInner) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{8}
}

func (x *SetLangParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *SetLangParamsInner) GetData() *SetLangParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type AccountBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          AccountBlockType       `protobuf:"varint,1,opt,name=type,proto3,enum=accounts.AccountBlockType" json:"type,omitempty"`
	Comment       string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountBlock) Reset() {
	*x = AccountBlock{}
	mi := &file_accounts_accounts_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBlock) ProtoMessage() {}

func (x *AccountBlock) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBlock.ProtoReflect.Descriptor instead.
func (*AccountBlock) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{9}
}

func (x *AccountBlock) GetType() AccountBlockType {
	if x != nil {
		return x.Type
	}
	return AccountBlockType_ACCOUNT_BLOCK_TYPE_UNDEFINED
}

func (x *AccountBlock) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AccountBlock) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AccountBlock) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

type Account struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Uuid               []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	FirstName          string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName           string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username           string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Email              string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Photo              []byte                 `protobuf:"bytes,6,opt,name=photo,proto3,oneof" json:"photo,omitempty"`
	PhotoUrl           *string                `protobuf:"bytes,7,opt,name=photo_url,json=photoUrl,proto3,oneof" json:"photo_url,omitempty"`
	Lang               common.Lang            `protobuf:"varint,8,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Timezone           int32                  `protobuf:"varint,9,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Currency           int32                  `protobuf:"varint,10,opt,name=currency,proto3" json:"currency,omitempty"`
	FilterUuid         []byte                 `protobuf:"bytes,11,opt,name=filter_uuid,json=filterUuid,proto3,oneof" json:"filter_uuid,omitempty"`
	Subscribe          *int32                 `protobuf:"varint,12,opt,name=subscribe,proto3,oneof" json:"subscribe,omitempty"`
	BlockingList       []*AccountBlock        `protobuf:"bytes,13,rep,name=blocking_list,json=blockingList,proto3" json:"blocking_list,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt          *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	OnboardedAt        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=onboarded_at,json=onboardedAt,proto3,oneof" json:"onboarded_at,omitempty"`
	PoliciesAcceptedAt *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=policies_accepted_at,json=policiesAcceptedAt,proto3,oneof" json:"policies_accepted_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_accounts_accounts_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{10}
}

func (x *Account) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Account) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Account) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Account) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Account) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Account) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *Account) GetPhotoUrl() string {
	if x != nil && x.PhotoUrl != nil {
		return *x.PhotoUrl
	}
	return ""
}

func (x *Account) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *Account) GetTimezone() int32 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

func (x *Account) GetCurrency() int32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *Account) GetFilterUuid() []byte {
	if x != nil {
		return x.FilterUuid
	}
	return nil
}

func (x *Account) GetSubscribe() int32 {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return 0
}

func (x *Account) GetBlockingList() []*AccountBlock {
	if x != nil {
		return x.BlockingList
	}
	return nil
}

func (x *Account) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Account) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Account) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Account) GetOnboardedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OnboardedAt
	}
	return nil
}

func (x *Account) GetPoliciesAcceptedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PoliciesAcceptedAt
	}
	return nil
}

type AccountShort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FirstName     string                 `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string                 `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Photo         []byte                 `protobuf:"bytes,5,opt,name=photo,proto3,oneof" json:"photo,omitempty"`
	DeletedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountShort) Reset() {
	*x = AccountShort{}
	mi := &file_accounts_accounts_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountShort) ProtoMessage() {}

func (x *AccountShort) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountShort.ProtoReflect.Descriptor instead.
func (*AccountShort) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{11}
}

func (x *AccountShort) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *AccountShort) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccountShort) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AccountShort) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *AccountShort) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *AccountShort) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type GetAccountsShortParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuids  [][]byte               `protobuf:"bytes,1,rep,name=account_uuids,json=accountUuids,proto3" json:"account_uuids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountsShortParams) Reset() {
	*x = GetAccountsShortParams{}
	mi := &file_accounts_accounts_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountsShortParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsShortParams) ProtoMessage() {}

func (x *GetAccountsShortParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsShortParams.ProtoReflect.Descriptor instead.
func (*GetAccountsShortParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{12}
}

func (x *GetAccountsShortParams) GetAccountUuids() [][]byte {
	if x != nil {
		return x.AccountUuids
	}
	return nil
}

type GetAccountsShortResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accounts      []*AccountShort        `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountsShortResponse) Reset() {
	*x = GetAccountsShortResponse{}
	mi := &file_accounts_accounts_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountsShortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsShortResponse) ProtoMessage() {}

func (x *GetAccountsShortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsShortResponse.ProtoReflect.Descriptor instead.
func (*GetAccountsShortResponse) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{13}
}

func (x *GetAccountsShortResponse) GetAccounts() []*AccountShort {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type UpdateProfileInfoParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	FirstName     string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Lang          common.Lang            `protobuf:"varint,4,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Timezone      int32                  `protobuf:"varint,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Currency      int32                  `protobuf:"varint,6,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProfileInfoParams) Reset() {
	*x = UpdateProfileInfoParams{}
	mi := &file_accounts_accounts_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProfileInfoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileInfoParams) ProtoMessage() {}

func (x *UpdateProfileInfoParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileInfoParams.ProtoReflect.Descriptor instead.
func (*UpdateProfileInfoParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateProfileInfoParams) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *UpdateProfileInfoParams) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateProfileInfoParams) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateProfileInfoParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *UpdateProfileInfoParams) GetTimezone() int32 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

func (x *UpdateProfileInfoParams) GetCurrency() int32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

type AccountUsernameParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountUsernameParams) Reset() {
	*x = AccountUsernameParams{}
	mi := &file_accounts_accounts_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountUsernameParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUsernameParams) ProtoMessage() {}

func (x *AccountUsernameParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUsernameParams.ProtoReflect.Descriptor instead.
func (*AccountUsernameParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{15}
}

func (x *AccountUsernameParams) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type AccountEmailParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountEmailParams) Reset() {
	*x = AccountEmailParams{}
	mi := &file_accounts_accounts_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountEmailParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountEmailParams) ProtoMessage() {}

func (x *AccountEmailParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountEmailParams.ProtoReflect.Descriptor instead.
func (*AccountEmailParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{16}
}

func (x *AccountEmailParams) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type AccountPhotoParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Photo         []byte                 `protobuf:"bytes,1,opt,name=photo,proto3" json:"photo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountPhotoParams) Reset() {
	*x = AccountPhotoParams{}
	mi := &file_accounts_accounts_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountPhotoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPhotoParams) ProtoMessage() {}

func (x *AccountPhotoParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPhotoParams.ProtoReflect.Descriptor instead.
func (*AccountPhotoParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{17}
}

func (x *AccountPhotoParams) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

type FeedCoin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CoinId        int32                  `protobuf:"varint,1,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	Order         int32                  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	MarketType    MarketType             `protobuf:"varint,3,opt,name=market_type,json=marketType,proto3,enum=accounts.MarketType" json:"market_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedCoin) Reset() {
	*x = FeedCoin{}
	mi := &file_accounts_accounts_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedCoin) ProtoMessage() {}

func (x *FeedCoin) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedCoin.ProtoReflect.Descriptor instead.
func (*FeedCoin) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{18}
}

func (x *FeedCoin) GetCoinId() int32 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *FeedCoin) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *FeedCoin) GetMarketType() MarketType {
	if x != nil {
		return x.MarketType
	}
	return MarketType_MARKET_TYPE_UNDEFINED
}

type TryRegistryFromTelegramParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TgId          int64                  `protobuf:"varint,1,opt,name=tg_id,json=tgId,proto3" json:"tg_id,omitempty"`
	TgFirstName   string                 `protobuf:"bytes,2,opt,name=tg_first_name,json=tgFirstName,proto3" json:"tg_first_name,omitempty"`
	TgLastName    string                 `protobuf:"bytes,3,opt,name=tg_last_name,json=tgLastName,proto3" json:"tg_last_name,omitempty"`
	TgUsername    string                 `protobuf:"bytes,4,opt,name=tg_username,json=tgUsername,proto3" json:"tg_username,omitempty"`
	TgIsPremium   bool                   `protobuf:"varint,5,opt,name=tg_is_premium,json=tgIsPremium,proto3" json:"tg_is_premium,omitempty"`
	LangCode      string                 `protobuf:"bytes,6,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	TgPhotoUrl    *string                `protobuf:"bytes,7,opt,name=tg_photo_url,json=tgPhotoUrl,proto3,oneof" json:"tg_photo_url,omitempty"`
	Startapp      *string                `protobuf:"bytes,8,opt,name=startapp,proto3,oneof" json:"startapp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TryRegistryFromTelegramParams) Reset() {
	*x = TryRegistryFromTelegramParams{}
	mi := &file_accounts_accounts_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TryRegistryFromTelegramParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryRegistryFromTelegramParams) ProtoMessage() {}

func (x *TryRegistryFromTelegramParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryRegistryFromTelegramParams.ProtoReflect.Descriptor instead.
func (*TryRegistryFromTelegramParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{19}
}

func (x *TryRegistryFromTelegramParams) GetTgId() int64 {
	if x != nil {
		return x.TgId
	}
	return 0
}

func (x *TryRegistryFromTelegramParams) GetTgFirstName() string {
	if x != nil {
		return x.TgFirstName
	}
	return ""
}

func (x *TryRegistryFromTelegramParams) GetTgLastName() string {
	if x != nil {
		return x.TgLastName
	}
	return ""
}

func (x *TryRegistryFromTelegramParams) GetTgUsername() string {
	if x != nil {
		return x.TgUsername
	}
	return ""
}

func (x *TryRegistryFromTelegramParams) GetTgIsPremium() bool {
	if x != nil {
		return x.TgIsPremium
	}
	return false
}

func (x *TryRegistryFromTelegramParams) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TryRegistryFromTelegramParams) GetTgPhotoUrl() string {
	if x != nil && x.TgPhotoUrl != nil {
		return *x.TgPhotoUrl
	}
	return ""
}

func (x *TryRegistryFromTelegramParams) GetStartapp() string {
	if x != nil && x.Startapp != nil {
		return *x.Startapp
	}
	return ""
}

type TokenPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken  string                 `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenPair) Reset() {
	*x = TokenPair{}
	mi := &file_accounts_accounts_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenPair) ProtoMessage() {}

func (x *TokenPair) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenPair.ProtoReflect.Descriptor instead.
func (*TokenPair) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{20}
}

func (x *TokenPair) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *TokenPair) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type GetAccountParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountParams) Reset() {
	*x = GetAccountParams{}
	mi := &file_accounts_accounts_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountParams) ProtoMessage() {}

func (x *GetAccountParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountParams.ProtoReflect.Descriptor instead.
func (*GetAccountParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{21}
}

func (x *GetAccountParams) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type FavoriteFolder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Icon          int32                  `protobuf:"varint,3,opt,name=icon,proto3" json:"icon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FavoriteFolder) Reset() {
	*x = FavoriteFolder{}
	mi := &file_accounts_accounts_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FavoriteFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteFolder) ProtoMessage() {}

func (x *FavoriteFolder) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteFolder.ProtoReflect.Descriptor instead.
func (*FavoriteFolder) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{22}
}

func (x *FavoriteFolder) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *FavoriteFolder) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FavoriteFolder) GetIcon() int32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

type GetFavoritesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListParams    *common.ListParams     `protobuf:"bytes,1,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	Lang          common.Lang            `protobuf:"varint,2,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Summary       *bool                  `protobuf:"varint,3,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFavoritesParams) Reset() {
	*x = GetFavoritesParams{}
	mi := &file_accounts_accounts_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavoritesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoritesParams) ProtoMessage() {}

func (x *GetFavoritesParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoritesParams.ProtoReflect.Descriptor instead.
func (*GetFavoritesParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{23}
}

func (x *GetFavoritesParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

func (x *GetFavoritesParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *GetFavoritesParams) GetSummary() bool {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return false
}

type GetFavoritesParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *GetFavoritesParams    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFavoritesParamsInner) Reset() {
	*x = GetFavoritesParamsInner{}
	mi := &file_accounts_accounts_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavoritesParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoritesParamsInner) ProtoMessage() {}

func (x *GetFavoritesParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoritesParamsInner.ProtoReflect.Descriptor instead.
func (*GetFavoritesParamsInner) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{24}
}

func (x *GetFavoritesParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *GetFavoritesParamsInner) GetData() *GetFavoritesParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetFollowingParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListParams    *common.ListParams     `protobuf:"bytes,1,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	Lang          common.Lang            `protobuf:"varint,2,opt,name=lang,proto3,enum=common.Lang" json:"lang,omitempty"`
	Summary       *bool                  `protobuf:"varint,3,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFollowingParams) Reset() {
	*x = GetFollowingParams{}
	mi := &file_accounts_accounts_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFollowingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFollowingParams) ProtoMessage() {}

func (x *GetFollowingParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFollowingParams.ProtoReflect.Descriptor instead.
func (*GetFollowingParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{25}
}

func (x *GetFollowingParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

func (x *GetFollowingParams) GetLang() common.Lang {
	if x != nil {
		return x.Lang
	}
	return common.Lang(0)
}

func (x *GetFollowingParams) GetSummary() bool {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return false
}

type GetFollowingArticlesParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *GetFavoritesParams    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFollowingArticlesParamsInner) Reset() {
	*x = GetFollowingArticlesParamsInner{}
	mi := &file_accounts_accounts_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFollowingArticlesParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFollowingArticlesParamsInner) ProtoMessage() {}

func (x *GetFollowingArticlesParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFollowingArticlesParamsInner.ProtoReflect.Descriptor instead.
func (*GetFollowingArticlesParamsInner) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{26}
}

func (x *GetFollowingArticlesParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *GetFollowingArticlesParamsInner) GetData() *GetFavoritesParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetFavoritesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArticleUuids  [][]byte               `protobuf:"bytes,1,rep,name=article_uuids,json=articleUuids,proto3" json:"article_uuids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFavoritesResponse) Reset() {
	*x = GetFavoritesResponse{}
	mi := &file_accounts_accounts_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoritesResponse) ProtoMessage() {}

func (x *GetFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoritesResponse.ProtoReflect.Descriptor instead.
func (*GetFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{27}
}

func (x *GetFavoritesResponse) GetArticleUuids() [][]byte {
	if x != nil {
		return x.ArticleUuids
	}
	return nil
}

type HasFavoritesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	ArticleUuids  [][]byte               `protobuf:"bytes,2,rep,name=article_uuids,json=articleUuids,proto3" json:"article_uuids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasFavoritesParams) Reset() {
	*x = HasFavoritesParams{}
	mi := &file_accounts_accounts_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasFavoritesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasFavoritesParams) ProtoMessage() {}

func (x *HasFavoritesParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasFavoritesParams.ProtoReflect.Descriptor instead.
func (*HasFavoritesParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{28}
}

func (x *HasFavoritesParams) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *HasFavoritesParams) GetArticleUuids() [][]byte {
	if x != nil {
		return x.ArticleUuids
	}
	return nil
}

type HasFavoritesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Favorites     map[string]bool        `protobuf:"bytes,1,rep,name=favorites,proto3" json:"favorites,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasFavoritesResponse) Reset() {
	*x = HasFavoritesResponse{}
	mi := &file_accounts_accounts_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasFavoritesResponse) ProtoMessage() {}

func (x *HasFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasFavoritesResponse.ProtoReflect.Descriptor instead.
func (*HasFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{29}
}

func (x *HasFavoritesResponse) GetFavorites() map[string]bool {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type ToggleFavoriteParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArticleUuid   []byte                 `protobuf:"bytes,2,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleFavoriteParams) Reset() {
	*x = ToggleFavoriteParams{}
	mi := &file_accounts_accounts_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleFavoriteParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleFavoriteParams) ProtoMessage() {}

func (x *ToggleFavoriteParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleFavoriteParams.ProtoReflect.Descriptor instead.
func (*ToggleFavoriteParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{30}
}

func (x *ToggleFavoriteParams) GetArticleUuid() []byte {
	if x != nil {
		return x.ArticleUuid
	}
	return nil
}

type ToggleFavoriteParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *ToggleFavoriteParams  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleFavoriteParamsInner) Reset() {
	*x = ToggleFavoriteParamsInner{}
	mi := &file_accounts_accounts_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleFavoriteParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleFavoriteParamsInner) ProtoMessage() {}

func (x *ToggleFavoriteParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleFavoriteParamsInner.ProtoReflect.Descriptor instead.
func (*ToggleFavoriteParamsInner) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{31}
}

func (x *ToggleFavoriteParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *ToggleFavoriteParamsInner) GetData() *ToggleFavoriteParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type MoveFavoriteParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	ArticleUuid   []byte                 `protobuf:"bytes,2,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	FolderUuid    []byte                 `protobuf:"bytes,3,opt,name=folder_uuid,json=folderUuid,proto3,oneof" json:"folder_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveFavoriteParams) Reset() {
	*x = MoveFavoriteParams{}
	mi := &file_accounts_accounts_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveFavoriteParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFavoriteParams) ProtoMessage() {}

func (x *MoveFavoriteParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFavoriteParams.ProtoReflect.Descriptor instead.
func (*MoveFavoriteParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{32}
}

func (x *MoveFavoriteParams) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *MoveFavoriteParams) GetArticleUuid() []byte {
	if x != nil {
		return x.ArticleUuid
	}
	return nil
}

func (x *MoveFavoriteParams) GetFolderUuid() []byte {
	if x != nil {
		return x.FolderUuid
	}
	return nil
}

type CreateFavoriteFolderParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Icon          int32                  `protobuf:"varint,3,opt,name=icon,proto3" json:"icon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFavoriteFolderParams) Reset() {
	*x = CreateFavoriteFolderParams{}
	mi := &file_accounts_accounts_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFavoriteFolderParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFavoriteFolderParams) ProtoMessage() {}

func (x *CreateFavoriteFolderParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFavoriteFolderParams.ProtoReflect.Descriptor instead.
func (*CreateFavoriteFolderParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{33}
}

func (x *CreateFavoriteFolderParams) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *CreateFavoriteFolderParams) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateFavoriteFolderParams) GetIcon() int32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

type UpdateFavoriteFolderParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Icon          int32                  `protobuf:"varint,3,opt,name=icon,proto3" json:"icon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFavoriteFolderParams) Reset() {
	*x = UpdateFavoriteFolderParams{}
	mi := &file_accounts_accounts_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFavoriteFolderParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFavoriteFolderParams) ProtoMessage() {}

func (x *UpdateFavoriteFolderParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFavoriteFolderParams.ProtoReflect.Descriptor instead.
func (*UpdateFavoriteFolderParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateFavoriteFolderParams) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *UpdateFavoriteFolderParams) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateFavoriteFolderParams) GetIcon() int32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

type OnboardingParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Categories    []int32                `protobuf:"varint,1,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	HasWallet     bool                   `protobuf:"varint,2,opt,name=has_wallet,json=hasWallet,proto3" json:"has_wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnboardingParams) Reset() {
	*x = OnboardingParams{}
	mi := &file_accounts_accounts_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingParams) ProtoMessage() {}

func (x *OnboardingParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingParams.ProtoReflect.Descriptor instead.
func (*OnboardingParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{35}
}

func (x *OnboardingParams) GetCategories() []int32 {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *OnboardingParams) GetHasWallet() bool {
	if x != nil {
		return x.HasWallet
	}
	return false
}

type OnboardingParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Onboarding    *OnboardingParams      `protobuf:"bytes,2,opt,name=onboarding,proto3" json:"onboarding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnboardingParamsInner) Reset() {
	*x = OnboardingParamsInner{}
	mi := &file_accounts_accounts_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardingParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingParamsInner) ProtoMessage() {}

func (x *OnboardingParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingParamsInner.ProtoReflect.Descriptor instead.
func (*OnboardingParamsInner) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{36}
}

func (x *OnboardingParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *OnboardingParamsInner) GetOnboarding() *OnboardingParams {
	if x != nil {
		return x.Onboarding
	}
	return nil
}

type CheckNewsInfoParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscribes    [][]byte               `protobuf:"bytes,1,rep,name=subscribes,proto3" json:"subscribes,omitempty"`
	Favorites     [][]byte               `protobuf:"bytes,2,rep,name=favorites,proto3" json:"favorites,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckNewsInfoParams) Reset() {
	*x = CheckNewsInfoParams{}
	mi := &file_accounts_accounts_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckNewsInfoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNewsInfoParams) ProtoMessage() {}

func (x *CheckNewsInfoParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNewsInfoParams.ProtoReflect.Descriptor instead.
func (*CheckNewsInfoParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{37}
}

func (x *CheckNewsInfoParams) GetSubscribes() [][]byte {
	if x != nil {
		return x.Subscribes
	}
	return nil
}

func (x *CheckNewsInfoParams) GetFavorites() [][]byte {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type CheckNewsInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscribes    [][]byte               `protobuf:"bytes,1,rep,name=subscribes,proto3" json:"subscribes,omitempty"`
	Favorites     [][]byte               `protobuf:"bytes,2,rep,name=favorites,proto3" json:"favorites,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckNewsInfoResponse) Reset() {
	*x = CheckNewsInfoResponse{}
	mi := &file_accounts_accounts_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckNewsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNewsInfoResponse) ProtoMessage() {}

func (x *CheckNewsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNewsInfoResponse.ProtoReflect.Descriptor instead.
func (*CheckNewsInfoResponse) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{38}
}

func (x *CheckNewsInfoResponse) GetSubscribes() [][]byte {
	if x != nil {
		return x.Subscribes
	}
	return nil
}

func (x *CheckNewsInfoResponse) GetFavorites() [][]byte {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type Referral struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *ReferralMeta          `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Account       *AccountShort          `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Referral) Reset() {
	*x = Referral{}
	mi := &file_accounts_accounts_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Referral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referral) ProtoMessage() {}

func (x *Referral) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referral.ProtoReflect.Descriptor instead.
func (*Referral) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{39}
}

func (x *Referral) GetMeta() *ReferralMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Referral) GetAccount() *AccountShort {
	if x != nil {
		return x.Account
	}
	return nil
}

type ReferralMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level1        int32                  `protobuf:"varint,1,opt,name=level1,proto3" json:"level1,omitempty"`
	Level2        int32                  `protobuf:"varint,2,opt,name=level2,proto3" json:"level2,omitempty"`
	Level3        int32                  `protobuf:"varint,3,opt,name=level3,proto3" json:"level3,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReferralMeta) Reset() {
	*x = ReferralMeta{}
	mi := &file_accounts_accounts_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferralMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralMeta) ProtoMessage() {}

func (x *ReferralMeta) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralMeta.ProtoReflect.Descriptor instead.
func (*ReferralMeta) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{40}
}

func (x *ReferralMeta) GetLevel1() int32 {
	if x != nil {
		return x.Level1
	}
	return 0
}

func (x *ReferralMeta) GetLevel2() int32 {
	if x != nil {
		return x.Level2
	}
	return 0
}

func (x *ReferralMeta) GetLevel3() int32 {
	if x != nil {
		return x.Level3
	}
	return 0
}

type GetReferralsParams struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ListParams        *common.ListParams     `protobuf:"bytes,1,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	AccountParentUuid []byte                 `protobuf:"bytes,2,opt,name=account_parent_uuid,json=accountParentUuid,proto3,oneof" json:"account_parent_uuid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetReferralsParams) Reset() {
	*x = GetReferralsParams{}
	mi := &file_accounts_accounts_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReferralsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralsParams) ProtoMessage() {}

func (x *GetReferralsParams) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralsParams.ProtoReflect.Descriptor instead.
func (*GetReferralsParams) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{41}
}

func (x *GetReferralsParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

func (x *GetReferralsParams) GetAccountParentUuid() []byte {
	if x != nil {
		return x.AccountParentUuid
	}
	return nil
}

type GetReferralsParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *GetReferralsParams    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReferralsParamsInner) Reset() {
	*x = GetReferralsParamsInner{}
	mi := &file_accounts_accounts_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReferralsParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralsParamsInner) ProtoMessage() {}

func (x *GetReferralsParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralsParamsInner.ProtoReflect.Descriptor instead.
func (*GetReferralsParamsInner) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{42}
}

func (x *GetReferralsParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *GetReferralsParamsInner) GetData() *GetReferralsParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetReferralsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Referrals     []*Referral            `protobuf:"bytes,1,rep,name=referrals,proto3" json:"referrals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReferralsResponse) Reset() {
	*x = GetReferralsResponse{}
	mi := &file_accounts_accounts_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReferralsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralsResponse) ProtoMessage() {}

func (x *GetReferralsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accounts_accounts_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralsResponse.ProtoReflect.Descriptor instead.
func (*GetReferralsResponse) Descriptor() ([]byte, []int) {
	return file_accounts_accounts_proto_rawDescGZIP(), []int{43}
}

func (x *GetReferralsResponse) GetReferrals() []*Referral {
	if x != nil {
		return x.Referrals
	}
	return nil
}

var File_accounts_accounts_proto protoreflect.FileDescriptor

var file_accounts_accounts_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x12, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7a,
	0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x0c, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x38, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x78, 0x0a, 0x16,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x09, 0x66, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x22, 0x32, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x64, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xca,
	0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe4, 0x06, 0x0a, 0x07,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x24, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05,
	0x52, 0x0b, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x51, 0x0a, 0x14, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x12, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x22, 0x3d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x73, 0x22, 0x4e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x33, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x12,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x2a, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x1d, 0x54, 0x72, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x67, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x67, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x67, 0x49,
	0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x67, 0x5f, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x67, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x70, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x70, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x67, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x70, 0x70, 0x22, 0x53, 0x0a, 0x09, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x0e, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x76, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x3b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22,
	0x5c, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22, 0xa1, 0x01,
	0x0a, 0x14, 0x48, 0x61, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x39, 0x0a, 0x14, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x19,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x90, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x5a,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x10, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x76, 0x0a,
	0x15, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65,
	0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x15, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x22, 0x68, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x2a, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x0c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x33, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x33, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x11,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x2a, 0x37, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x2a,
	0x53, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x61, 0x74, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x10, 0x04, 0x2a, 0x95, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x32, 0xa0, 0x16, 0x0a,
	0x08, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x17, 0x54, 0x72, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x54, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12,
	0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x1a, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c,
	0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x12, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x12, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1d, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x25, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x15, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x1a, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x50, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x50, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x53, 0x0a, 0x12, 0x53, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x50,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a,
	0x1a, 0x53, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x55, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x55, 0x63, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x53, 0x0a, 0x12, 0x53, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x55, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x4e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x4e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x55,
	0x75, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4e, 0x73, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4e, 0x73, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x64, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x33,
	0x61, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d,
	0x67, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_accounts_accounts_proto_rawDescOnce sync.Once
	file_accounts_accounts_proto_rawDescData []byte
)

func file_accounts_accounts_proto_rawDescGZIP() []byte {
	file_accounts_accounts_proto_rawDescOnce.Do(func() {
		file_accounts_accounts_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_accounts_accounts_proto_rawDesc), len(file_accounts_accounts_proto_rawDesc)))
	})
	return file_accounts_accounts_proto_rawDescData
}

var file_accounts_accounts_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_accounts_accounts_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_accounts_accounts_proto_goTypes = []any{
	(Method)(0),                                     // 0: accounts.Method
	(MarketType)(0),                                 // 1: accounts.MarketType
	(AccountBlockType)(0),                           // 2: accounts.AccountBlockType
	(*AuthTelegramParams)(nil),                      // 3: accounts.AuthTelegramParams
	(*AuthTelegramParamsInner)(nil),                 // 4: accounts.AuthTelegramParamsInner
	(*AuthResponse)(nil),                            // 5: accounts.AuthResponse
	(*AuthRefreshParams)(nil),                       // 6: accounts.AuthRefreshParams
	(*AuthRefreshParamsInner)(nil),                  // 7: accounts.AuthRefreshParamsInner
	(*Profile)(nil),                                 // 8: accounts.Profile
	(*ProfileParams)(nil),                           // 9: accounts.ProfileParams
	(*SetLangParams)(nil),                           // 10: accounts.SetLangParams
	(*SetLangParamsInner)(nil),                      // 11: accounts.SetLangParamsInner
	(*AccountBlock)(nil),                            // 12: accounts.AccountBlock
	(*Account)(nil),                                 // 13: accounts.Account
	(*AccountShort)(nil),                            // 14: accounts.AccountShort
	(*GetAccountsShortParams)(nil),                  // 15: accounts.GetAccountsShortParams
	(*GetAccountsShortResponse)(nil),                // 16: accounts.GetAccountsShortResponse
	(*UpdateProfileInfoParams)(nil),                 // 17: accounts.UpdateProfileInfoParams
	(*AccountUsernameParams)(nil),                   // 18: accounts.AccountUsernameParams
	(*AccountEmailParams)(nil),                      // 19: accounts.AccountEmailParams
	(*AccountPhotoParams)(nil),                      // 20: accounts.AccountPhotoParams
	(*FeedCoin)(nil),                                // 21: accounts.FeedCoin
	(*TryRegistryFromTelegramParams)(nil),           // 22: accounts.TryRegistryFromTelegramParams
	(*TokenPair)(nil),                               // 23: accounts.TokenPair
	(*GetAccountParams)(nil),                        // 24: accounts.GetAccountParams
	(*FavoriteFolder)(nil),                          // 25: accounts.FavoriteFolder
	(*GetFavoritesParams)(nil),                      // 26: accounts.GetFavoritesParams
	(*GetFavoritesParamsInner)(nil),                 // 27: accounts.GetFavoritesParamsInner
	(*GetFollowingParams)(nil),                      // 28: accounts.GetFollowingParams
	(*GetFollowingArticlesParamsInner)(nil),         // 29: accounts.GetFollowingArticlesParamsInner
	(*GetFavoritesResponse)(nil),                    // 30: accounts.GetFavoritesResponse
	(*HasFavoritesParams)(nil),                      // 31: accounts.HasFavoritesParams
	(*HasFavoritesResponse)(nil),                    // 32: accounts.HasFavoritesResponse
	(*ToggleFavoriteParams)(nil),                    // 33: accounts.ToggleFavoriteParams
	(*ToggleFavoriteParamsInner)(nil),               // 34: accounts.ToggleFavoriteParamsInner
	(*MoveFavoriteParams)(nil),                      // 35: accounts.MoveFavoriteParams
	(*CreateFavoriteFolderParams)(nil),              // 36: accounts.CreateFavoriteFolderParams
	(*UpdateFavoriteFolderParams)(nil),              // 37: accounts.UpdateFavoriteFolderParams
	(*OnboardingParams)(nil),                        // 38: accounts.OnboardingParams
	(*OnboardingParamsInner)(nil),                   // 39: accounts.OnboardingParamsInner
	(*CheckNewsInfoParams)(nil),                     // 40: accounts.CheckNewsInfoParams
	(*CheckNewsInfoResponse)(nil),                   // 41: accounts.CheckNewsInfoResponse
	(*Referral)(nil),                                // 42: accounts.Referral
	(*ReferralMeta)(nil),                            // 43: accounts.ReferralMeta
	(*GetReferralsParams)(nil),                      // 44: accounts.GetReferralsParams
	(*GetReferralsParamsInner)(nil),                 // 45: accounts.GetReferralsParamsInner
	(*GetReferralsResponse)(nil),                    // 46: accounts.GetReferralsResponse
	nil,                                             // 47: accounts.HasFavoritesResponse.FavoritesEntry
	(common.Lang)(0),                                // 48: common.Lang
	(*timestamppb.Timestamp)(nil),                   // 49: google.protobuf.Timestamp
	(*common.ListParams)(nil),                       // 50: common.ListParams
	(*SetCurrentFilterParamsInner)(nil),             // 51: accounts.SetCurrentFilterParamsInner
	(*GetFollowingSourcesParamsInner)(nil),          // 52: accounts.GetFollowingSourcesParamsInner
	(*FollowUnfollowSourceParamsInner)(nil),         // 53: accounts.FollowUnfollowSourceParamsInner
	(*CheckSourcesFollowingParamsInner)(nil),        // 54: accounts.CheckSourcesFollowingParamsInner
	(*CheckArticlesFavoritesParams)(nil),            // 55: accounts.CheckArticlesFavoritesParams
	(*GetWidgetsParamsInner)(nil),                   // 56: accounts.GetWidgetsParamsInner
	(*CreateWidgetParamsInner)(nil),                 // 57: accounts.CreateWidgetParamsInner
	(*DeleteWidgetParams)(nil),                      // 58: accounts.DeleteWidgetParams
	(*UpdateWidgetPcParamsInner)(nil),               // 59: accounts.UpdateWidgetPcParamsInner
	(*SortWidgetValuesParamsInner)(nil),             // 60: accounts.SortWidgetValuesParamsInner
	(*UpdateWidgetSingleValuesParamsInner)(nil),     // 61: accounts.UpdateWidgetSingleValuesParamsInner
	(*UpdateWidgetUcParamsInner)(nil),               // 62: accounts.UpdateWidgetUcParamsInner
	(*UpdateWidgetSingleValuesUuidParamsInner)(nil), // 63: accounts.UpdateWidgetSingleValuesUuidParamsInner
	(*UpdateWidgetNscParamsInner)(nil),              // 64: accounts.UpdateWidgetNscParamsInner
	(*UpdateWidgetSingleParamsInner)(nil),           // 65: accounts.UpdateWidgetSingleParamsInner
	(*emptypb.Empty)(nil),                           // 66: google.protobuf.Empty
	(*common.BoolStatus)(nil),                       // 67: common.BoolStatus
	(*GetSessionsResponse)(nil),                     // 68: accounts.GetSessionsResponse
	(*GetFollowingSourcesResponse)(nil),             // 69: accounts.GetFollowingSourcesResponse
	(*CheckSourcesFollowingResponse)(nil),           // 70: accounts.CheckSourcesFollowingResponse
	(*CheckArticlesFavoritesResponse)(nil),          // 71: accounts.CheckArticlesFavoritesResponse
	(*GetWidgetsResponse)(nil),                      // 72: accounts.GetWidgetsResponse
	(*CreateWidgetResponse)(nil),                    // 73: accounts.CreateWidgetResponse
}
var file_accounts_accounts_proto_depIdxs = []int32{
	3,  // 0: accounts.AuthTelegramParamsInner.data:type_name -> accounts.AuthTelegramParams
	6,  // 1: accounts.AuthRefreshParamsInner.data:type_name -> accounts.AuthRefreshParams
	13, // 2: accounts.Profile.account:type_name -> accounts.Account
	21, // 3: accounts.Profile.feed_coins:type_name -> accounts.FeedCoin
	48, // 4: accounts.SetLangParams.lang:type_name -> common.Lang
	10, // 5: accounts.SetLangParamsInner.data:type_name -> accounts.SetLangParams
	2,  // 6: accounts.AccountBlock.type:type_name -> accounts.AccountBlockType
	49, // 7: accounts.AccountBlock.created_at:type_name -> google.protobuf.Timestamp
	49, // 8: accounts.AccountBlock.ended_at:type_name -> google.protobuf.Timestamp
	48, // 9: accounts.Account.lang:type_name -> common.Lang
	12, // 10: accounts.Account.blocking_list:type_name -> accounts.AccountBlock
	49, // 11: accounts.Account.created_at:type_name -> google.protobuf.Timestamp
	49, // 12: accounts.Account.updated_at:type_name -> google.protobuf.Timestamp
	49, // 13: accounts.Account.deleted_at:type_name -> google.protobuf.Timestamp
	49, // 14: accounts.Account.onboarded_at:type_name -> google.protobuf.Timestamp
	49, // 15: accounts.Account.policies_accepted_at:type_name -> google.protobuf.Timestamp
	49, // 16: accounts.AccountShort.deleted_at:type_name -> google.protobuf.Timestamp
	14, // 17: accounts.GetAccountsShortResponse.accounts:type_name -> accounts.AccountShort
	48, // 18: accounts.UpdateProfileInfoParams.lang:type_name -> common.Lang
	1,  // 19: accounts.FeedCoin.market_type:type_name -> accounts.MarketType
	50, // 20: accounts.GetFavoritesParams.list_params:type_name -> common.ListParams
	48, // 21: accounts.GetFavoritesParams.lang:type_name -> common.Lang
	26, // 22: accounts.GetFavoritesParamsInner.data:type_name -> accounts.GetFavoritesParams
	50, // 23: accounts.GetFollowingParams.list_params:type_name -> common.ListParams
	48, // 24: accounts.GetFollowingParams.lang:type_name -> common.Lang
	26, // 25: accounts.GetFollowingArticlesParamsInner.data:type_name -> accounts.GetFavoritesParams
	47, // 26: accounts.HasFavoritesResponse.favorites:type_name -> accounts.HasFavoritesResponse.FavoritesEntry
	33, // 27: accounts.ToggleFavoriteParamsInner.data:type_name -> accounts.ToggleFavoriteParams
	38, // 28: accounts.OnboardingParamsInner.onboarding:type_name -> accounts.OnboardingParams
	43, // 29: accounts.Referral.meta:type_name -> accounts.ReferralMeta
	14, // 30: accounts.Referral.account:type_name -> accounts.AccountShort
	50, // 31: accounts.GetReferralsParams.list_params:type_name -> common.ListParams
	44, // 32: accounts.GetReferralsParamsInner.data:type_name -> accounts.GetReferralsParams
	42, // 33: accounts.GetReferralsResponse.referrals:type_name -> accounts.Referral
	22, // 34: accounts.Accounts.TryRegistryFromTelegram:input_type -> accounts.TryRegistryFromTelegramParams
	4,  // 35: accounts.Accounts.AuthTelegram:input_type -> accounts.AuthTelegramParamsInner
	7,  // 36: accounts.Accounts.AuthRefresh:input_type -> accounts.AuthRefreshParamsInner
	9,  // 37: accounts.Accounts.GetProfile:input_type -> accounts.ProfileParams
	17, // 38: accounts.Accounts.UpdateProfileInfo:input_type -> accounts.UpdateProfileInfoParams
	9,  // 39: accounts.Accounts.RemoveProfile:input_type -> accounts.ProfileParams
	15, // 40: accounts.Accounts.GetAccountsShort:input_type -> accounts.GetAccountsShortParams
	51, // 41: accounts.Accounts.SetCurrentFilter:input_type -> accounts.SetCurrentFilterParamsInner
	39, // 42: accounts.Accounts.Onboarded:input_type -> accounts.OnboardingParamsInner
	11, // 43: accounts.Accounts.SetLang:input_type -> accounts.SetLangParamsInner
	9,  // 44: accounts.Accounts.GetSessions:input_type -> accounts.ProfileParams
	52, // 45: accounts.Accounts.GetFollowingSources:input_type -> accounts.GetFollowingSourcesParamsInner
	53, // 46: accounts.Accounts.FollowSource:input_type -> accounts.FollowUnfollowSourceParamsInner
	53, // 47: accounts.Accounts.UnfollowSource:input_type -> accounts.FollowUnfollowSourceParamsInner
	54, // 48: accounts.Accounts.CheckSourcesFollowing:input_type -> accounts.CheckSourcesFollowingParamsInner
	27, // 49: accounts.Accounts.GetFavorites:input_type -> accounts.GetFavoritesParamsInner
	34, // 50: accounts.Accounts.SetFavorite:input_type -> accounts.ToggleFavoriteParamsInner
	34, // 51: accounts.Accounts.RemoveFavorite:input_type -> accounts.ToggleFavoriteParamsInner
	55, // 52: accounts.Accounts.CheckArticlesFavorites:input_type -> accounts.CheckArticlesFavoritesParams
	45, // 53: accounts.Accounts.GetReferrals:input_type -> accounts.GetReferralsParamsInner
	56, // 54: accounts.Accounts.GetWidgets:input_type -> accounts.GetWidgetsParamsInner
	57, // 55: accounts.Accounts.CreateWidget:input_type -> accounts.CreateWidgetParamsInner
	58, // 56: accounts.Accounts.DeleteWidget:input_type -> accounts.DeleteWidgetParams
	59, // 57: accounts.Accounts.UpdateWidgetPcValues:input_type -> accounts.UpdateWidgetPcParamsInner
	60, // 58: accounts.Accounts.SortWidgetPcValues:input_type -> accounts.SortWidgetValuesParamsInner
	61, // 59: accounts.Accounts.UpdateWidgetCurrenciesValues:input_type -> accounts.UpdateWidgetSingleValuesParamsInner
	60, // 60: accounts.Accounts.SortWidgetCurrenciesValues:input_type -> accounts.SortWidgetValuesParamsInner
	62, // 61: accounts.Accounts.UpdateWidgetUcValues:input_type -> accounts.UpdateWidgetUcParamsInner
	60, // 62: accounts.Accounts.SortWidgetUcValues:input_type -> accounts.SortWidgetValuesParamsInner
	61, // 63: accounts.Accounts.UpdateWidgetNcValues:input_type -> accounts.UpdateWidgetSingleValuesParamsInner
	63, // 64: accounts.Accounts.UpdateWidgetNsValues:input_type -> accounts.UpdateWidgetSingleValuesUuidParamsInner
	64, // 65: accounts.Accounts.UpdateWidgetNscValues:input_type -> accounts.UpdateWidgetNscParamsInner
	65, // 66: accounts.Accounts.UpdateWidgetSdlValue:input_type -> accounts.UpdateWidgetSingleParamsInner
	65, // 67: accounts.Accounts.UpdateWidgetSdeValue:input_type -> accounts.UpdateWidgetSingleParamsInner
	66, // 68: accounts.Accounts.TryRegistryFromTelegram:output_type -> google.protobuf.Empty
	5,  // 69: accounts.Accounts.AuthTelegram:output_type -> accounts.AuthResponse
	5,  // 70: accounts.Accounts.AuthRefresh:output_type -> accounts.AuthResponse
	8,  // 71: accounts.Accounts.GetProfile:output_type -> accounts.Profile
	8,  // 72: accounts.Accounts.UpdateProfileInfo:output_type -> accounts.Profile
	67, // 73: accounts.Accounts.RemoveProfile:output_type -> common.BoolStatus
	16, // 74: accounts.Accounts.GetAccountsShort:output_type -> accounts.GetAccountsShortResponse
	67, // 75: accounts.Accounts.SetCurrentFilter:output_type -> common.BoolStatus
	67, // 76: accounts.Accounts.Onboarded:output_type -> common.BoolStatus
	67, // 77: accounts.Accounts.SetLang:output_type -> common.BoolStatus
	68, // 78: accounts.Accounts.GetSessions:output_type -> accounts.GetSessionsResponse
	69, // 79: accounts.Accounts.GetFollowingSources:output_type -> accounts.GetFollowingSourcesResponse
	66, // 80: accounts.Accounts.FollowSource:output_type -> google.protobuf.Empty
	66, // 81: accounts.Accounts.UnfollowSource:output_type -> google.protobuf.Empty
	70, // 82: accounts.Accounts.CheckSourcesFollowing:output_type -> accounts.CheckSourcesFollowingResponse
	30, // 83: accounts.Accounts.GetFavorites:output_type -> accounts.GetFavoritesResponse
	66, // 84: accounts.Accounts.SetFavorite:output_type -> google.protobuf.Empty
	66, // 85: accounts.Accounts.RemoveFavorite:output_type -> google.protobuf.Empty
	71, // 86: accounts.Accounts.CheckArticlesFavorites:output_type -> accounts.CheckArticlesFavoritesResponse
	46, // 87: accounts.Accounts.GetReferrals:output_type -> accounts.GetReferralsResponse
	72, // 88: accounts.Accounts.GetWidgets:output_type -> accounts.GetWidgetsResponse
	73, // 89: accounts.Accounts.CreateWidget:output_type -> accounts.CreateWidgetResponse
	66, // 90: accounts.Accounts.DeleteWidget:output_type -> google.protobuf.Empty
	66, // 91: accounts.Accounts.UpdateWidgetPcValues:output_type -> google.protobuf.Empty
	66, // 92: accounts.Accounts.SortWidgetPcValues:output_type -> google.protobuf.Empty
	66, // 93: accounts.Accounts.UpdateWidgetCurrenciesValues:output_type -> google.protobuf.Empty
	66, // 94: accounts.Accounts.SortWidgetCurrenciesValues:output_type -> google.protobuf.Empty
	66, // 95: accounts.Accounts.UpdateWidgetUcValues:output_type -> google.protobuf.Empty
	66, // 96: accounts.Accounts.SortWidgetUcValues:output_type -> google.protobuf.Empty
	66, // 97: accounts.Accounts.UpdateWidgetNcValues:output_type -> google.protobuf.Empty
	66, // 98: accounts.Accounts.UpdateWidgetNsValues:output_type -> google.protobuf.Empty
	66, // 99: accounts.Accounts.UpdateWidgetNscValues:output_type -> google.protobuf.Empty
	66, // 100: accounts.Accounts.UpdateWidgetSdlValue:output_type -> google.protobuf.Empty
	66, // 101: accounts.Accounts.UpdateWidgetSdeValue:output_type -> google.protobuf.Empty
	68, // [68:102] is the sub-list for method output_type
	34, // [34:68] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_accounts_accounts_proto_init() }
func file_accounts_accounts_proto_init() {
	if File_accounts_accounts_proto != nil {
		return
	}
	file_accounts_favorites_proto_init()
	file_accounts_sessions_proto_init()
	file_accounts_subscribes_proto_init()
	file_accounts_filters_proto_init()
	file_accounts_widgets_proto_init()
	file_accounts_accounts_proto_msgTypes[10].OneofWrappers = []any{}
	file_accounts_accounts_proto_msgTypes[11].OneofWrappers = []any{}
	file_accounts_accounts_proto_msgTypes[19].OneofWrappers = []any{}
	file_accounts_accounts_proto_msgTypes[23].OneofWrappers = []any{}
	file_accounts_accounts_proto_msgTypes[25].OneofWrappers = []any{}
	file_accounts_accounts_proto_msgTypes[32].OneofWrappers = []any{}
	file_accounts_accounts_proto_msgTypes[41].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_accounts_accounts_proto_rawDesc), len(file_accounts_accounts_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_accounts_accounts_proto_goTypes,
		DependencyIndexes: file_accounts_accounts_proto_depIdxs,
		EnumInfos:         file_accounts_accounts_proto_enumTypes,
		MessageInfos:      file_accounts_accounts_proto_msgTypes,
	}.Build()
	File_accounts_accounts_proto = out.File
	file_accounts_accounts_proto_goTypes = nil
	file_accounts_accounts_proto_depIdxs = nil
}
