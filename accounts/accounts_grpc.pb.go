// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: accounts/accounts.proto

package accountsv1

import (
	context "context"
	common "github.com/x3a-tech/contract-go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Accounts_TryRegistryFromTelegram_FullMethodName      = "/accounts.Accounts/TryRegistryFromTelegram"
	Accounts_AuthTelegram_FullMethodName                 = "/accounts.Accounts/AuthTelegram"
	Accounts_AuthRefresh_FullMethodName                  = "/accounts.Accounts/AuthRefresh"
	Accounts_GetProfile_FullMethodName                   = "/accounts.Accounts/GetProfile"
	Accounts_UpdateProfileInfo_FullMethodName            = "/accounts.Accounts/UpdateProfileInfo"
	Accounts_RemoveProfile_FullMethodName                = "/accounts.Accounts/RemoveProfile"
	Accounts_GetAccountsShort_FullMethodName             = "/accounts.Accounts/GetAccountsShort"
	Accounts_SetCurrentFilter_FullMethodName             = "/accounts.Accounts/SetCurrentFilter"
	Accounts_Onboarded_FullMethodName                    = "/accounts.Accounts/Onboarded"
	Accounts_SetLang_FullMethodName                      = "/accounts.Accounts/SetLang"
	Accounts_GetSessions_FullMethodName                  = "/accounts.Accounts/GetSessions"
	Accounts_GetSubscribeArticles_FullMethodName         = "/accounts.Accounts/GetSubscribeArticles"
	Accounts_SubscribeArticle_FullMethodName             = "/accounts.Accounts/SubscribeArticle"
	Accounts_UnsubscribeArticle_FullMethodName           = "/accounts.Accounts/UnsubscribeArticle"
	Accounts_CheckSourcesSubscribes_FullMethodName       = "/accounts.Accounts/CheckSourcesSubscribes"
	Accounts_GetFavorites_FullMethodName                 = "/accounts.Accounts/GetFavorites"
	Accounts_SetFavorite_FullMethodName                  = "/accounts.Accounts/SetFavorite"
	Accounts_RemoveFavorite_FullMethodName               = "/accounts.Accounts/RemoveFavorite"
	Accounts_CheckArticlesFavorites_FullMethodName       = "/accounts.Accounts/CheckArticlesFavorites"
	Accounts_GetReferrals_FullMethodName                 = "/accounts.Accounts/GetReferrals"
	Accounts_GetWidgets_FullMethodName                   = "/accounts.Accounts/GetWidgets"
	Accounts_CreateWidget_FullMethodName                 = "/accounts.Accounts/CreateWidget"
	Accounts_DeleteWidget_FullMethodName                 = "/accounts.Accounts/DeleteWidget"
	Accounts_UpdateWidgetPcValues_FullMethodName         = "/accounts.Accounts/UpdateWidgetPcValues"
	Accounts_SortWidgetPcValues_FullMethodName           = "/accounts.Accounts/SortWidgetPcValues"
	Accounts_UpdateWidgetCurrenciesValues_FullMethodName = "/accounts.Accounts/UpdateWidgetCurrenciesValues"
	Accounts_SortWidgetCurrenciesValues_FullMethodName   = "/accounts.Accounts/SortWidgetCurrenciesValues"
	Accounts_UpdateWidgetUcValues_FullMethodName         = "/accounts.Accounts/UpdateWidgetUcValues"
	Accounts_SortWidgetUcValues_FullMethodName           = "/accounts.Accounts/SortWidgetUcValues"
	Accounts_UpdateWidgetNcValues_FullMethodName         = "/accounts.Accounts/UpdateWidgetNcValues"
	Accounts_UpdateWidgetNsValues_FullMethodName         = "/accounts.Accounts/UpdateWidgetNsValues"
	Accounts_UpdateWidgetNscValues_FullMethodName        = "/accounts.Accounts/UpdateWidgetNscValues"
	Accounts_UpdateWidgetSdlValue_FullMethodName         = "/accounts.Accounts/UpdateWidgetSdlValue"
	Accounts_UpdateWidgetSdeValue_FullMethodName         = "/accounts.Accounts/UpdateWidgetSdeValue"
)

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsClient interface {
	// Reg
	TryRegistryFromTelegram(ctx context.Context, in *TryRegistryFromTelegramParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Auth
	AuthTelegram(ctx context.Context, in *AuthTelegramParamsInner, opts ...grpc.CallOption) (*AuthResponse, error)
	AuthRefresh(ctx context.Context, in *AuthRefreshParamsInner, opts ...grpc.CallOption) (*AuthResponse, error)
	// Profile
	GetProfile(ctx context.Context, in *ProfileParams, opts ...grpc.CallOption) (*Profile, error)
	UpdateProfileInfo(ctx context.Context, in *UpdateProfileInfoParams, opts ...grpc.CallOption) (*Profile, error)
	RemoveProfile(ctx context.Context, in *ProfileParams, opts ...grpc.CallOption) (*common.BoolStatus, error)
	GetAccountsShort(ctx context.Context, in *GetAccountsShortParams, opts ...grpc.CallOption) (*GetAccountsShortResponse, error)
	// Filters
	SetCurrentFilter(ctx context.Context, in *SetCurrentFilterParamsInner, opts ...grpc.CallOption) (*common.BoolStatus, error)
	// Sets
	Onboarded(ctx context.Context, in *OnboardingParamsInner, opts ...grpc.CallOption) (*common.BoolStatus, error)
	SetLang(ctx context.Context, in *SetLangParamsInner, opts ...grpc.CallOption) (*common.BoolStatus, error)
	// Sessions
	GetSessions(ctx context.Context, in *ProfileParams, opts ...grpc.CallOption) (*GetSessionsResponse, error)
	// Subscribe Articles
	GetSubscribeArticles(ctx context.Context, in *GetSubscribeArticlesParamsInner, opts ...grpc.CallOption) (*GetSubscribeArticlesResponse, error)
	SubscribeArticle(ctx context.Context, in *SubUnsubArticlesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnsubscribeArticle(ctx context.Context, in *SubUnsubArticlesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckSourcesSubscribes(ctx context.Context, in *CheckSourcesSubscribesParamsInner, opts ...grpc.CallOption) (*CheckSourcesSubscribesResponse, error)
	// Favorites
	GetFavorites(ctx context.Context, in *GetFavoritesParamsInner, opts ...grpc.CallOption) (*GetFavoritesResponse, error)
	SetFavorite(ctx context.Context, in *ToggleFavoriteParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFavorite(ctx context.Context, in *ToggleFavoriteParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckArticlesFavorites(ctx context.Context, in *CheckArticlesFavoritesParams, opts ...grpc.CallOption) (*CheckArticlesFavoritesResponse, error)
	// Referrals
	GetReferrals(ctx context.Context, in *GetReferralsParamsInner, opts ...grpc.CallOption) (*GetReferralsResponse, error)
	// Widgets
	GetWidgets(ctx context.Context, in *GetWidgetsParamsInner, opts ...grpc.CallOption) (*GetWidgetsResponse, error)
	CreateWidget(ctx context.Context, in *CreateWidgetParamsInner, opts ...grpc.CallOption) (*CreateWidgetResponse, error)
	DeleteWidget(ctx context.Context, in *DeleteWidgetParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Pc
	UpdateWidgetPcValues(ctx context.Context, in *UpdateWidgetPcParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SortWidgetPcValues(ctx context.Context, in *SortWidgetValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CC & CP & CS
	UpdateWidgetCurrenciesValues(ctx context.Context, in *UpdateWidgetSingleValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SortWidgetCurrenciesValues(ctx context.Context, in *SortWidgetValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Uc
	UpdateWidgetUcValues(ctx context.Context, in *UpdateWidgetUcParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SortWidgetUcValues(ctx context.Context, in *SortWidgetValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Nc
	UpdateWidgetNcValues(ctx context.Context, in *UpdateWidgetSingleValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ns
	UpdateWidgetNsValues(ctx context.Context, in *UpdateWidgetSingleValuesUuidParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Nsc
	UpdateWidgetNscValues(ctx context.Context, in *UpdateWidgetNscParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sdl
	UpdateWidgetSdlValue(ctx context.Context, in *UpdateWidgetSingleParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sde
	UpdateWidgetSdeValue(ctx context.Context, in *UpdateWidgetSingleParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type accountsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsClient(cc grpc.ClientConnInterface) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) TryRegistryFromTelegram(ctx context.Context, in *TryRegistryFromTelegramParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_TryRegistryFromTelegram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) AuthTelegram(ctx context.Context, in *AuthTelegramParamsInner, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Accounts_AuthTelegram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) AuthRefresh(ctx context.Context, in *AuthRefreshParamsInner, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Accounts_AuthRefresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetProfile(ctx context.Context, in *ProfileParams, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Accounts_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateProfileInfo(ctx context.Context, in *UpdateProfileInfoParams, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Accounts_UpdateProfileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) RemoveProfile(ctx context.Context, in *ProfileParams, opts ...grpc.CallOption) (*common.BoolStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.BoolStatus)
	err := c.cc.Invoke(ctx, Accounts_RemoveProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetAccountsShort(ctx context.Context, in *GetAccountsShortParams, opts ...grpc.CallOption) (*GetAccountsShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountsShortResponse)
	err := c.cc.Invoke(ctx, Accounts_GetAccountsShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) SetCurrentFilter(ctx context.Context, in *SetCurrentFilterParamsInner, opts ...grpc.CallOption) (*common.BoolStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.BoolStatus)
	err := c.cc.Invoke(ctx, Accounts_SetCurrentFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) Onboarded(ctx context.Context, in *OnboardingParamsInner, opts ...grpc.CallOption) (*common.BoolStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.BoolStatus)
	err := c.cc.Invoke(ctx, Accounts_Onboarded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) SetLang(ctx context.Context, in *SetLangParamsInner, opts ...grpc.CallOption) (*common.BoolStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.BoolStatus)
	err := c.cc.Invoke(ctx, Accounts_SetLang_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetSessions(ctx context.Context, in *ProfileParams, opts ...grpc.CallOption) (*GetSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionsResponse)
	err := c.cc.Invoke(ctx, Accounts_GetSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetSubscribeArticles(ctx context.Context, in *GetSubscribeArticlesParamsInner, opts ...grpc.CallOption) (*GetSubscribeArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscribeArticlesResponse)
	err := c.cc.Invoke(ctx, Accounts_GetSubscribeArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) SubscribeArticle(ctx context.Context, in *SubUnsubArticlesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_SubscribeArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UnsubscribeArticle(ctx context.Context, in *SubUnsubArticlesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_UnsubscribeArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) CheckSourcesSubscribes(ctx context.Context, in *CheckSourcesSubscribesParamsInner, opts ...grpc.CallOption) (*CheckSourcesSubscribesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckSourcesSubscribesResponse)
	err := c.cc.Invoke(ctx, Accounts_CheckSourcesSubscribes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetFavorites(ctx context.Context, in *GetFavoritesParamsInner, opts ...grpc.CallOption) (*GetFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoritesResponse)
	err := c.cc.Invoke(ctx, Accounts_GetFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) SetFavorite(ctx context.Context, in *ToggleFavoriteParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_SetFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) RemoveFavorite(ctx context.Context, in *ToggleFavoriteParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_RemoveFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) CheckArticlesFavorites(ctx context.Context, in *CheckArticlesFavoritesParams, opts ...grpc.CallOption) (*CheckArticlesFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckArticlesFavoritesResponse)
	err := c.cc.Invoke(ctx, Accounts_CheckArticlesFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetReferrals(ctx context.Context, in *GetReferralsParamsInner, opts ...grpc.CallOption) (*GetReferralsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReferralsResponse)
	err := c.cc.Invoke(ctx, Accounts_GetReferrals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetWidgets(ctx context.Context, in *GetWidgetsParamsInner, opts ...grpc.CallOption) (*GetWidgetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWidgetsResponse)
	err := c.cc.Invoke(ctx, Accounts_GetWidgets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) CreateWidget(ctx context.Context, in *CreateWidgetParamsInner, opts ...grpc.CallOption) (*CreateWidgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWidgetResponse)
	err := c.cc.Invoke(ctx, Accounts_CreateWidget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) DeleteWidget(ctx context.Context, in *DeleteWidgetParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_DeleteWidget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateWidgetPcValues(ctx context.Context, in *UpdateWidgetPcParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_UpdateWidgetPcValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) SortWidgetPcValues(ctx context.Context, in *SortWidgetValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_SortWidgetPcValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateWidgetCurrenciesValues(ctx context.Context, in *UpdateWidgetSingleValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_UpdateWidgetCurrenciesValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) SortWidgetCurrenciesValues(ctx context.Context, in *SortWidgetValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_SortWidgetCurrenciesValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateWidgetUcValues(ctx context.Context, in *UpdateWidgetUcParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_UpdateWidgetUcValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) SortWidgetUcValues(ctx context.Context, in *SortWidgetValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_SortWidgetUcValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateWidgetNcValues(ctx context.Context, in *UpdateWidgetSingleValuesParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_UpdateWidgetNcValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateWidgetNsValues(ctx context.Context, in *UpdateWidgetSingleValuesUuidParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_UpdateWidgetNsValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateWidgetNscValues(ctx context.Context, in *UpdateWidgetNscParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_UpdateWidgetNscValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateWidgetSdlValue(ctx context.Context, in *UpdateWidgetSingleParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_UpdateWidgetSdlValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateWidgetSdeValue(ctx context.Context, in *UpdateWidgetSingleParamsInner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accounts_UpdateWidgetSdeValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
// All implementations must embed UnimplementedAccountsServer
// for forward compatibility.
type AccountsServer interface {
	// Reg
	TryRegistryFromTelegram(context.Context, *TryRegistryFromTelegramParams) (*emptypb.Empty, error)
	// Auth
	AuthTelegram(context.Context, *AuthTelegramParamsInner) (*AuthResponse, error)
	AuthRefresh(context.Context, *AuthRefreshParamsInner) (*AuthResponse, error)
	// Profile
	GetProfile(context.Context, *ProfileParams) (*Profile, error)
	UpdateProfileInfo(context.Context, *UpdateProfileInfoParams) (*Profile, error)
	RemoveProfile(context.Context, *ProfileParams) (*common.BoolStatus, error)
	GetAccountsShort(context.Context, *GetAccountsShortParams) (*GetAccountsShortResponse, error)
	// Filters
	SetCurrentFilter(context.Context, *SetCurrentFilterParamsInner) (*common.BoolStatus, error)
	// Sets
	Onboarded(context.Context, *OnboardingParamsInner) (*common.BoolStatus, error)
	SetLang(context.Context, *SetLangParamsInner) (*common.BoolStatus, error)
	// Sessions
	GetSessions(context.Context, *ProfileParams) (*GetSessionsResponse, error)
	// Subscribe Articles
	GetSubscribeArticles(context.Context, *GetSubscribeArticlesParamsInner) (*GetSubscribeArticlesResponse, error)
	SubscribeArticle(context.Context, *SubUnsubArticlesParamsInner) (*emptypb.Empty, error)
	UnsubscribeArticle(context.Context, *SubUnsubArticlesParamsInner) (*emptypb.Empty, error)
	CheckSourcesSubscribes(context.Context, *CheckSourcesSubscribesParamsInner) (*CheckSourcesSubscribesResponse, error)
	// Favorites
	GetFavorites(context.Context, *GetFavoritesParamsInner) (*GetFavoritesResponse, error)
	SetFavorite(context.Context, *ToggleFavoriteParamsInner) (*emptypb.Empty, error)
	RemoveFavorite(context.Context, *ToggleFavoriteParamsInner) (*emptypb.Empty, error)
	CheckArticlesFavorites(context.Context, *CheckArticlesFavoritesParams) (*CheckArticlesFavoritesResponse, error)
	// Referrals
	GetReferrals(context.Context, *GetReferralsParamsInner) (*GetReferralsResponse, error)
	// Widgets
	GetWidgets(context.Context, *GetWidgetsParamsInner) (*GetWidgetsResponse, error)
	CreateWidget(context.Context, *CreateWidgetParamsInner) (*CreateWidgetResponse, error)
	DeleteWidget(context.Context, *DeleteWidgetParams) (*emptypb.Empty, error)
	// Pc
	UpdateWidgetPcValues(context.Context, *UpdateWidgetPcParamsInner) (*emptypb.Empty, error)
	SortWidgetPcValues(context.Context, *SortWidgetValuesParamsInner) (*emptypb.Empty, error)
	// CC & CP & CS
	UpdateWidgetCurrenciesValues(context.Context, *UpdateWidgetSingleValuesParamsInner) (*emptypb.Empty, error)
	SortWidgetCurrenciesValues(context.Context, *SortWidgetValuesParamsInner) (*emptypb.Empty, error)
	// Uc
	UpdateWidgetUcValues(context.Context, *UpdateWidgetUcParamsInner) (*emptypb.Empty, error)
	SortWidgetUcValues(context.Context, *SortWidgetValuesParamsInner) (*emptypb.Empty, error)
	// Nc
	UpdateWidgetNcValues(context.Context, *UpdateWidgetSingleValuesParamsInner) (*emptypb.Empty, error)
	// Ns
	UpdateWidgetNsValues(context.Context, *UpdateWidgetSingleValuesUuidParamsInner) (*emptypb.Empty, error)
	// Nsc
	UpdateWidgetNscValues(context.Context, *UpdateWidgetNscParamsInner) (*emptypb.Empty, error)
	// Sdl
	UpdateWidgetSdlValue(context.Context, *UpdateWidgetSingleParamsInner) (*emptypb.Empty, error)
	// Sde
	UpdateWidgetSdeValue(context.Context, *UpdateWidgetSingleParamsInner) (*emptypb.Empty, error)
	mustEmbedUnimplementedAccountsServer()
}

// UnimplementedAccountsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountsServer struct{}

func (UnimplementedAccountsServer) TryRegistryFromTelegram(context.Context, *TryRegistryFromTelegramParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryRegistryFromTelegram not implemented")
}
func (UnimplementedAccountsServer) AuthTelegram(context.Context, *AuthTelegramParamsInner) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthTelegram not implemented")
}
func (UnimplementedAccountsServer) AuthRefresh(context.Context, *AuthRefreshParamsInner) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRefresh not implemented")
}
func (UnimplementedAccountsServer) GetProfile(context.Context, *ProfileParams) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedAccountsServer) UpdateProfileInfo(context.Context, *UpdateProfileInfoParams) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfileInfo not implemented")
}
func (UnimplementedAccountsServer) RemoveProfile(context.Context, *ProfileParams) (*common.BoolStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProfile not implemented")
}
func (UnimplementedAccountsServer) GetAccountsShort(context.Context, *GetAccountsShortParams) (*GetAccountsShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsShort not implemented")
}
func (UnimplementedAccountsServer) SetCurrentFilter(context.Context, *SetCurrentFilterParamsInner) (*common.BoolStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentFilter not implemented")
}
func (UnimplementedAccountsServer) Onboarded(context.Context, *OnboardingParamsInner) (*common.BoolStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Onboarded not implemented")
}
func (UnimplementedAccountsServer) SetLang(context.Context, *SetLangParamsInner) (*common.BoolStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLang not implemented")
}
func (UnimplementedAccountsServer) GetSessions(context.Context, *ProfileParams) (*GetSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedAccountsServer) GetSubscribeArticles(context.Context, *GetSubscribeArticlesParamsInner) (*GetSubscribeArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeArticles not implemented")
}
func (UnimplementedAccountsServer) SubscribeArticle(context.Context, *SubUnsubArticlesParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeArticle not implemented")
}
func (UnimplementedAccountsServer) UnsubscribeArticle(context.Context, *SubUnsubArticlesParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeArticle not implemented")
}
func (UnimplementedAccountsServer) CheckSourcesSubscribes(context.Context, *CheckSourcesSubscribesParamsInner) (*CheckSourcesSubscribesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSourcesSubscribes not implemented")
}
func (UnimplementedAccountsServer) GetFavorites(context.Context, *GetFavoritesParamsInner) (*GetFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedAccountsServer) SetFavorite(context.Context, *ToggleFavoriteParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFavorite not implemented")
}
func (UnimplementedAccountsServer) RemoveFavorite(context.Context, *ToggleFavoriteParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFavorite not implemented")
}
func (UnimplementedAccountsServer) CheckArticlesFavorites(context.Context, *CheckArticlesFavoritesParams) (*CheckArticlesFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckArticlesFavorites not implemented")
}
func (UnimplementedAccountsServer) GetReferrals(context.Context, *GetReferralsParamsInner) (*GetReferralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferrals not implemented")
}
func (UnimplementedAccountsServer) GetWidgets(context.Context, *GetWidgetsParamsInner) (*GetWidgetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWidgets not implemented")
}
func (UnimplementedAccountsServer) CreateWidget(context.Context, *CreateWidgetParamsInner) (*CreateWidgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWidget not implemented")
}
func (UnimplementedAccountsServer) DeleteWidget(context.Context, *DeleteWidgetParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWidget not implemented")
}
func (UnimplementedAccountsServer) UpdateWidgetPcValues(context.Context, *UpdateWidgetPcParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWidgetPcValues not implemented")
}
func (UnimplementedAccountsServer) SortWidgetPcValues(context.Context, *SortWidgetValuesParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortWidgetPcValues not implemented")
}
func (UnimplementedAccountsServer) UpdateWidgetCurrenciesValues(context.Context, *UpdateWidgetSingleValuesParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWidgetCurrenciesValues not implemented")
}
func (UnimplementedAccountsServer) SortWidgetCurrenciesValues(context.Context, *SortWidgetValuesParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortWidgetCurrenciesValues not implemented")
}
func (UnimplementedAccountsServer) UpdateWidgetUcValues(context.Context, *UpdateWidgetUcParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWidgetUcValues not implemented")
}
func (UnimplementedAccountsServer) SortWidgetUcValues(context.Context, *SortWidgetValuesParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortWidgetUcValues not implemented")
}
func (UnimplementedAccountsServer) UpdateWidgetNcValues(context.Context, *UpdateWidgetSingleValuesParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWidgetNcValues not implemented")
}
func (UnimplementedAccountsServer) UpdateWidgetNsValues(context.Context, *UpdateWidgetSingleValuesUuidParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWidgetNsValues not implemented")
}
func (UnimplementedAccountsServer) UpdateWidgetNscValues(context.Context, *UpdateWidgetNscParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWidgetNscValues not implemented")
}
func (UnimplementedAccountsServer) UpdateWidgetSdlValue(context.Context, *UpdateWidgetSingleParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWidgetSdlValue not implemented")
}
func (UnimplementedAccountsServer) UpdateWidgetSdeValue(context.Context, *UpdateWidgetSingleParamsInner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWidgetSdeValue not implemented")
}
func (UnimplementedAccountsServer) mustEmbedUnimplementedAccountsServer() {}
func (UnimplementedAccountsServer) testEmbeddedByValue()                  {}

// UnsafeAccountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServer will
// result in compilation errors.
type UnsafeAccountsServer interface {
	mustEmbedUnimplementedAccountsServer()
}

func RegisterAccountsServer(s grpc.ServiceRegistrar, srv AccountsServer) {
	// If the following call pancis, it indicates UnimplementedAccountsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Accounts_ServiceDesc, srv)
}

func _Accounts_TryRegistryFromTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryRegistryFromTelegramParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).TryRegistryFromTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_TryRegistryFromTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).TryRegistryFromTelegram(ctx, req.(*TryRegistryFromTelegramParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_AuthTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTelegramParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).AuthTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_AuthTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).AuthTelegram(ctx, req.(*AuthTelegramParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_AuthRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRefreshParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).AuthRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_AuthRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).AuthRefresh(ctx, req.(*AuthRefreshParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetProfile(ctx, req.(*ProfileParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateProfileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateProfileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateProfileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateProfileInfo(ctx, req.(*UpdateProfileInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_RemoveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).RemoveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_RemoveProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).RemoveProfile(ctx, req.(*ProfileParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetAccountsShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsShortParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetAccountsShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetAccountsShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetAccountsShort(ctx, req.(*GetAccountsShortParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_SetCurrentFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentFilterParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).SetCurrentFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_SetCurrentFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).SetCurrentFilter(ctx, req.(*SetCurrentFilterParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_Onboarded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardingParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Onboarded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_Onboarded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Onboarded(ctx, req.(*OnboardingParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_SetLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLangParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).SetLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_SetLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).SetLang(ctx, req.(*SetLangParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetSessions(ctx, req.(*ProfileParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetSubscribeArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribeArticlesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetSubscribeArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetSubscribeArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetSubscribeArticles(ctx, req.(*GetSubscribeArticlesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_SubscribeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubUnsubArticlesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).SubscribeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_SubscribeArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).SubscribeArticle(ctx, req.(*SubUnsubArticlesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UnsubscribeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubUnsubArticlesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UnsubscribeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UnsubscribeArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UnsubscribeArticle(ctx, req.(*SubUnsubArticlesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_CheckSourcesSubscribes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSourcesSubscribesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CheckSourcesSubscribes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_CheckSourcesSubscribes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CheckSourcesSubscribes(ctx, req.(*CheckSourcesSubscribesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetFavorites(ctx, req.(*GetFavoritesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_SetFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFavoriteParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).SetFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_SetFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).SetFavorite(ctx, req.(*ToggleFavoriteParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_RemoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFavoriteParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).RemoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_RemoveFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).RemoveFavorite(ctx, req.(*ToggleFavoriteParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_CheckArticlesFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckArticlesFavoritesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CheckArticlesFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_CheckArticlesFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CheckArticlesFavorites(ctx, req.(*CheckArticlesFavoritesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetReferrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralsParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetReferrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetReferrals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetReferrals(ctx, req.(*GetReferralsParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetWidgets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWidgetsParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetWidgets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetWidgets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetWidgets(ctx, req.(*GetWidgetsParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_CreateWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWidgetParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CreateWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_CreateWidget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CreateWidget(ctx, req.(*CreateWidgetParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_DeleteWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWidgetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).DeleteWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_DeleteWidget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).DeleteWidget(ctx, req.(*DeleteWidgetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateWidgetPcValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWidgetPcParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateWidgetPcValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateWidgetPcValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateWidgetPcValues(ctx, req.(*UpdateWidgetPcParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_SortWidgetPcValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortWidgetValuesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).SortWidgetPcValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_SortWidgetPcValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).SortWidgetPcValues(ctx, req.(*SortWidgetValuesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateWidgetCurrenciesValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWidgetSingleValuesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateWidgetCurrenciesValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateWidgetCurrenciesValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateWidgetCurrenciesValues(ctx, req.(*UpdateWidgetSingleValuesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_SortWidgetCurrenciesValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortWidgetValuesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).SortWidgetCurrenciesValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_SortWidgetCurrenciesValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).SortWidgetCurrenciesValues(ctx, req.(*SortWidgetValuesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateWidgetUcValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWidgetUcParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateWidgetUcValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateWidgetUcValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateWidgetUcValues(ctx, req.(*UpdateWidgetUcParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_SortWidgetUcValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortWidgetValuesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).SortWidgetUcValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_SortWidgetUcValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).SortWidgetUcValues(ctx, req.(*SortWidgetValuesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateWidgetNcValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWidgetSingleValuesParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateWidgetNcValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateWidgetNcValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateWidgetNcValues(ctx, req.(*UpdateWidgetSingleValuesParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateWidgetNsValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWidgetSingleValuesUuidParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateWidgetNsValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateWidgetNsValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateWidgetNsValues(ctx, req.(*UpdateWidgetSingleValuesUuidParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateWidgetNscValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWidgetNscParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateWidgetNscValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateWidgetNscValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateWidgetNscValues(ctx, req.(*UpdateWidgetNscParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateWidgetSdlValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWidgetSingleParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateWidgetSdlValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateWidgetSdlValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateWidgetSdlValue(ctx, req.(*UpdateWidgetSingleParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateWidgetSdeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWidgetSingleParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateWidgetSdeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateWidgetSdeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateWidgetSdeValue(ctx, req.(*UpdateWidgetSingleParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounts_ServiceDesc is the grpc.ServiceDesc for Accounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounts.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TryRegistryFromTelegram",
			Handler:    _Accounts_TryRegistryFromTelegram_Handler,
		},
		{
			MethodName: "AuthTelegram",
			Handler:    _Accounts_AuthTelegram_Handler,
		},
		{
			MethodName: "AuthRefresh",
			Handler:    _Accounts_AuthRefresh_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Accounts_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfileInfo",
			Handler:    _Accounts_UpdateProfileInfo_Handler,
		},
		{
			MethodName: "RemoveProfile",
			Handler:    _Accounts_RemoveProfile_Handler,
		},
		{
			MethodName: "GetAccountsShort",
			Handler:    _Accounts_GetAccountsShort_Handler,
		},
		{
			MethodName: "SetCurrentFilter",
			Handler:    _Accounts_SetCurrentFilter_Handler,
		},
		{
			MethodName: "Onboarded",
			Handler:    _Accounts_Onboarded_Handler,
		},
		{
			MethodName: "SetLang",
			Handler:    _Accounts_SetLang_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _Accounts_GetSessions_Handler,
		},
		{
			MethodName: "GetSubscribeArticles",
			Handler:    _Accounts_GetSubscribeArticles_Handler,
		},
		{
			MethodName: "SubscribeArticle",
			Handler:    _Accounts_SubscribeArticle_Handler,
		},
		{
			MethodName: "UnsubscribeArticle",
			Handler:    _Accounts_UnsubscribeArticle_Handler,
		},
		{
			MethodName: "CheckSourcesSubscribes",
			Handler:    _Accounts_CheckSourcesSubscribes_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _Accounts_GetFavorites_Handler,
		},
		{
			MethodName: "SetFavorite",
			Handler:    _Accounts_SetFavorite_Handler,
		},
		{
			MethodName: "RemoveFavorite",
			Handler:    _Accounts_RemoveFavorite_Handler,
		},
		{
			MethodName: "CheckArticlesFavorites",
			Handler:    _Accounts_CheckArticlesFavorites_Handler,
		},
		{
			MethodName: "GetReferrals",
			Handler:    _Accounts_GetReferrals_Handler,
		},
		{
			MethodName: "GetWidgets",
			Handler:    _Accounts_GetWidgets_Handler,
		},
		{
			MethodName: "CreateWidget",
			Handler:    _Accounts_CreateWidget_Handler,
		},
		{
			MethodName: "DeleteWidget",
			Handler:    _Accounts_DeleteWidget_Handler,
		},
		{
			MethodName: "UpdateWidgetPcValues",
			Handler:    _Accounts_UpdateWidgetPcValues_Handler,
		},
		{
			MethodName: "SortWidgetPcValues",
			Handler:    _Accounts_SortWidgetPcValues_Handler,
		},
		{
			MethodName: "UpdateWidgetCurrenciesValues",
			Handler:    _Accounts_UpdateWidgetCurrenciesValues_Handler,
		},
		{
			MethodName: "SortWidgetCurrenciesValues",
			Handler:    _Accounts_SortWidgetCurrenciesValues_Handler,
		},
		{
			MethodName: "UpdateWidgetUcValues",
			Handler:    _Accounts_UpdateWidgetUcValues_Handler,
		},
		{
			MethodName: "SortWidgetUcValues",
			Handler:    _Accounts_SortWidgetUcValues_Handler,
		},
		{
			MethodName: "UpdateWidgetNcValues",
			Handler:    _Accounts_UpdateWidgetNcValues_Handler,
		},
		{
			MethodName: "UpdateWidgetNsValues",
			Handler:    _Accounts_UpdateWidgetNsValues_Handler,
		},
		{
			MethodName: "UpdateWidgetNscValues",
			Handler:    _Accounts_UpdateWidgetNscValues_Handler,
		},
		{
			MethodName: "UpdateWidgetSdlValue",
			Handler:    _Accounts_UpdateWidgetSdlValue_Handler,
		},
		{
			MethodName: "UpdateWidgetSdeValue",
			Handler:    _Accounts_UpdateWidgetSdeValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts/accounts.proto",
}
