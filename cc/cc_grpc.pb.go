// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: cc/cc.proto

package ccv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CC_GetCoins_FullMethodName      = "/cc.CC/GetCoins"
	CC_GetCoinValues_FullMethodName = "/cc.CC/GetCoinValues"
)

// CCClient is the client API for CC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CCClient interface {
	// Получение монет
	GetCoins(ctx context.Context, in *GetCoinsParams, opts ...grpc.CallOption) (*GetCoinsResponse, error)
	// Получение текущих значений монеты
	GetCoinValues(ctx context.Context, in *GetValuesParams, opts ...grpc.CallOption) (*GetValuesResponse, error)
}

type cCClient struct {
	cc grpc.ClientConnInterface
}

func NewCCClient(cc grpc.ClientConnInterface) CCClient {
	return &cCClient{cc}
}

func (c *cCClient) GetCoins(ctx context.Context, in *GetCoinsParams, opts ...grpc.CallOption) (*GetCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoinsResponse)
	err := c.cc.Invoke(ctx, CC_GetCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCClient) GetCoinValues(ctx context.Context, in *GetValuesParams, opts ...grpc.CallOption) (*GetValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetValuesResponse)
	err := c.cc.Invoke(ctx, CC_GetCoinValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCServer is the server API for CC service.
// All implementations must embed UnimplementedCCServer
// for forward compatibility.
type CCServer interface {
	// Получение монет
	GetCoins(context.Context, *GetCoinsParams) (*GetCoinsResponse, error)
	// Получение текущих значений монеты
	GetCoinValues(context.Context, *GetValuesParams) (*GetValuesResponse, error)
	mustEmbedUnimplementedCCServer()
}

// UnimplementedCCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCCServer struct{}

func (UnimplementedCCServer) GetCoins(context.Context, *GetCoinsParams) (*GetCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoins not implemented")
}
func (UnimplementedCCServer) GetCoinValues(context.Context, *GetValuesParams) (*GetValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinValues not implemented")
}
func (UnimplementedCCServer) mustEmbedUnimplementedCCServer() {}
func (UnimplementedCCServer) testEmbeddedByValue()            {}

// UnsafeCCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CCServer will
// result in compilation errors.
type UnsafeCCServer interface {
	mustEmbedUnimplementedCCServer()
}

func RegisterCCServer(s grpc.ServiceRegistrar, srv CCServer) {
	// If the following call pancis, it indicates UnimplementedCCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CC_ServiceDesc, srv)
}

func _CC_GetCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServer).GetCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CC_GetCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServer).GetCoins(ctx, req.(*GetCoinsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CC_GetCoinValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValuesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServer).GetCoinValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CC_GetCoinValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServer).GetCoinValues(ctx, req.(*GetValuesParams))
	}
	return interceptor(ctx, in, info, handler)
}

// CC_ServiceDesc is the grpc.ServiceDesc for CC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cc.CC",
	HandlerType: (*CCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoins",
			Handler:    _CC_GetCoins_Handler,
		},
		{
			MethodName: "GetCoinValues",
			Handler:    _CC_GetCoinValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cc/cc.proto",
}
