// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: cc/cc.proto

package ccv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Method int32

const (
	Method_NULL                 Method = 0
	Method_GET_COINS            Method = 1
	Method_GET_COIN             Method = 2
	Method_GET_VALUES_PER_DAY   Method = 3
	Method_GET_VALUES_PER_WEEK  Method = 4
	Method_GET_VALUES_PER_MONTH Method = 5
)

// Enum value maps for Method.
var (
	Method_name = map[int32]string{
		0: "NULL",
		1: "GET_COINS",
		2: "GET_COIN",
		3: "GET_VALUES_PER_DAY",
		4: "GET_VALUES_PER_WEEK",
		5: "GET_VALUES_PER_MONTH",
	}
	Method_value = map[string]int32{
		"NULL":                 0,
		"GET_COINS":            1,
		"GET_COIN":             2,
		"GET_VALUES_PER_DAY":   3,
		"GET_VALUES_PER_WEEK":  4,
		"GET_VALUES_PER_MONTH": 5,
	}
)

func (x Method) Enum() *Method {
	p := new(Method)
	*p = x
	return p
}

func (x Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Method) Descriptor() protoreflect.EnumDescriptor {
	return file_cc_cc_proto_enumTypes[0].Descriptor()
}

func (Method) Type() protoreflect.EnumType {
	return &file_cc_cc_proto_enumTypes[0]
}

func (x Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Method.Descriptor instead.
func (Method) EnumDescriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{0}
}

// Два параметра query, ids исключающие друг друга,
// то есть не может использоваться сразу 2 параметра
type GetCoinsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        int32                  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Scope         int32                  `protobuf:"varint,3,opt,name=scope,proto3" json:"scope,omitempty"`      // в минутах | 60 / 1440 / 10080 / 43200
	Query         *string                `protobuf:"bytes,5,opt,name=query,proto3,oneof" json:"query,omitempty"` // Для фильтрации
	Ids           []int32                `protobuf:"varint,6,rep,packed,name=ids,proto3" json:"ids,omitempty"`   // Для фильтрации
	OnlyFilter    bool                   `protobuf:"varint,7,opt,name=onlyFilter,proto3" json:"onlyFilter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinsParams) Reset() {
	*x = GetCoinsParams{}
	mi := &file_cc_cc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsParams) ProtoMessage() {}

func (x *GetCoinsParams) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsParams.ProtoReflect.Descriptor instead.
func (*GetCoinsParams) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{0}
}

func (x *GetCoinsParams) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinsParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCoinsParams) GetScope() int32 {
	if x != nil {
		return x.Scope
	}
	return 0
}

func (x *GetCoinsParams) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *GetCoinsParams) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetCoinsParams) GetOnlyFilter() bool {
	if x != nil {
		return x.OnlyFilter
	}
	return false
}

type GetCoinsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Coins         []*Coin                `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinsResponse) Reset() {
	*x = GetCoinsResponse{}
	mi := &file_cc_cc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsResponse) ProtoMessage() {}

func (x *GetCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinsResponse) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{1}
}

func (x *GetCoinsResponse) GetCoins() []*Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type Coin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol        string                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Price         float32                `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty"`                          // Текущая ценна на данный момент
	PricePrev     float32                `protobuf:"fixed32,6,opt,name=price_prev,json=pricePrev,proto3" json:"price_prev,omitempty"` // Текущая ценна на данный момент
	Dynamic       float32                `protobuf:"fixed32,7,opt,name=dynamic,proto3" json:"dynamic,omitempty"`                      // Изменение цены за N времени
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Coin) Reset() {
	*x = Coin{}
	mi := &file_cc_cc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{2}
}

func (x *Coin) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Coin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Coin) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Coin) GetPricePrev() float32 {
	if x != nil {
		return x.PricePrev
	}
	return 0
}

func (x *Coin) GetDynamic() float32 {
	if x != nil {
		return x.Dynamic
	}
	return 0
}

type GetValuesParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Scope         int32                  `protobuf:"varint,2,opt,name=scope,proto3" json:"scope,omitempty"` // в минутах | 60 / 1440 / 10080 / 43200
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValuesParams) Reset() {
	*x = GetValuesParams{}
	mi := &file_cc_cc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValuesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValuesParams) ProtoMessage() {}

func (x *GetValuesParams) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValuesParams.ProtoReflect.Descriptor instead.
func (*GetValuesParams) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{3}
}

func (x *GetValuesParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetValuesParams) GetScope() int32 {
	if x != nil {
		return x.Scope
	}
	return 0
}

type GetValuesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*CoinValue           `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValuesResponse) Reset() {
	*x = GetValuesResponse{}
	mi := &file_cc_cc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValuesResponse) ProtoMessage() {}

func (x *GetValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValuesResponse.ProtoReflect.Descriptor instead.
func (*GetValuesResponse) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{4}
}

func (x *GetValuesResponse) GetValues() []*CoinValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type CoinValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         float32                `protobuf:"fixed32,1,opt,name=price,proto3" json:"price,omitempty"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinValue) Reset() {
	*x = CoinValue{}
	mi := &file_cc_cc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinValue) ProtoMessage() {}

func (x *CoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinValue.ProtoReflect.Descriptor instead.
func (*CoinValue) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{5}
}

func (x *CoinValue) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CoinValue) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

var File_cc_cc_proto protoreflect.FileDescriptor

var file_cc_cc_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x63, 0x63, 0x2f, 0x63, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x63,
	0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x32, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x63, 0x63, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x22, 0x37, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x63, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x51, 0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x2a, 0x7a, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x54, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x57, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x05,
	0x32, 0x77, 0x0a, 0x02, 0x43, 0x43, 0x12, 0x34, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x14, 0x2e, 0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x13, 0x2e,
	0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x15, 0x2e, 0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x78, 0x33, 0x61,
	0x2e, 0x63, 0x63, 0x3b, 0x63, 0x63, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_cc_cc_proto_rawDescOnce sync.Once
	file_cc_cc_proto_rawDescData []byte
)

func file_cc_cc_proto_rawDescGZIP() []byte {
	file_cc_cc_proto_rawDescOnce.Do(func() {
		file_cc_cc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cc_cc_proto_rawDesc), len(file_cc_cc_proto_rawDesc)))
	})
	return file_cc_cc_proto_rawDescData
}

var file_cc_cc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cc_cc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cc_cc_proto_goTypes = []any{
	(Method)(0),                   // 0: cc.Method
	(*GetCoinsParams)(nil),        // 1: cc.GetCoinsParams
	(*GetCoinsResponse)(nil),      // 2: cc.GetCoinsResponse
	(*Coin)(nil),                  // 3: cc.Coin
	(*GetValuesParams)(nil),       // 4: cc.GetValuesParams
	(*GetValuesResponse)(nil),     // 5: cc.GetValuesResponse
	(*CoinValue)(nil),             // 6: cc.CoinValue
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_cc_cc_proto_depIdxs = []int32{
	3, // 0: cc.GetCoinsResponse.coins:type_name -> cc.Coin
	6, // 1: cc.GetValuesResponse.values:type_name -> cc.CoinValue
	7, // 2: cc.CoinValue.date:type_name -> google.protobuf.Timestamp
	1, // 3: cc.CC.GetCoins:input_type -> cc.GetCoinsParams
	4, // 4: cc.CC.GetCoinValues:input_type -> cc.GetValuesParams
	2, // 5: cc.CC.GetCoins:output_type -> cc.GetCoinsResponse
	5, // 6: cc.CC.GetCoinValues:output_type -> cc.GetValuesResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_cc_cc_proto_init() }
func file_cc_cc_proto_init() {
	if File_cc_cc_proto != nil {
		return
	}
	file_cc_cc_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cc_cc_proto_rawDesc), len(file_cc_cc_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cc_cc_proto_goTypes,
		DependencyIndexes: file_cc_cc_proto_depIdxs,
		EnumInfos:         file_cc_cc_proto_enumTypes,
		MessageInfos:      file_cc_cc_proto_msgTypes,
	}.Build()
	File_cc_cc_proto = out.File
	file_cc_cc_proto_goTypes = nil
	file_cc_cc_proto_depIdxs = nil
}
