// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: cbr/cbr.proto

package cbrv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CBR_GetSymbols_FullMethodName  = "/cbr.CBR/GetSymbols"
	CBR_GetValues_FullMethodName   = "/cbr.CBR/GetValues"
	CBR_HealthCheck_FullMethodName = "/cbr.CBR/HealthCheck"
)

// CBRClient is the client API for CBR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CBRClient interface {
	GetSymbols(ctx context.Context, in *GetSymbolsParams, opts ...grpc.CallOption) (*GetSymbolsResponse, error)
	GetValues(ctx context.Context, in *GetValuesParams, opts ...grpc.CallOption) (*GetValuesResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckParams, opts ...grpc.CallOption) (*StatusResponse, error)
}

type cBRClient struct {
	cc grpc.ClientConnInterface
}

func NewCBRClient(cc grpc.ClientConnInterface) CBRClient {
	return &cBRClient{cc}
}

func (c *cBRClient) GetSymbols(ctx context.Context, in *GetSymbolsParams, opts ...grpc.CallOption) (*GetSymbolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSymbolsResponse)
	err := c.cc.Invoke(ctx, CBR_GetSymbols_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cBRClient) GetValues(ctx context.Context, in *GetValuesParams, opts ...grpc.CallOption) (*GetValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetValuesResponse)
	err := c.cc.Invoke(ctx, CBR_GetValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cBRClient) HealthCheck(ctx context.Context, in *HealthCheckParams, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, CBR_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CBRServer is the server API for CBR service.
// All implementations must embed UnimplementedCBRServer
// for forward compatibility.
type CBRServer interface {
	GetSymbols(context.Context, *GetSymbolsParams) (*GetSymbolsResponse, error)
	GetValues(context.Context, *GetValuesParams) (*GetValuesResponse, error)
	HealthCheck(context.Context, *HealthCheckParams) (*StatusResponse, error)
	mustEmbedUnimplementedCBRServer()
}

// UnimplementedCBRServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCBRServer struct{}

func (UnimplementedCBRServer) GetSymbols(context.Context, *GetSymbolsParams) (*GetSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbols not implemented")
}
func (UnimplementedCBRServer) GetValues(context.Context, *GetValuesParams) (*GetValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValues not implemented")
}
func (UnimplementedCBRServer) HealthCheck(context.Context, *HealthCheckParams) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedCBRServer) mustEmbedUnimplementedCBRServer() {}
func (UnimplementedCBRServer) testEmbeddedByValue()             {}

// UnsafeCBRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CBRServer will
// result in compilation errors.
type UnsafeCBRServer interface {
	mustEmbedUnimplementedCBRServer()
}

func RegisterCBRServer(s grpc.ServiceRegistrar, srv CBRServer) {
	// If the following call pancis, it indicates UnimplementedCBRServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CBR_ServiceDesc, srv)
}

func _CBR_GetSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSymbolsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBRServer).GetSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBR_GetSymbols_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBRServer).GetSymbols(ctx, req.(*GetSymbolsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CBR_GetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValuesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBRServer).GetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBR_GetValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBRServer).GetValues(ctx, req.(*GetValuesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CBR_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBRServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBR_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBRServer).HealthCheck(ctx, req.(*HealthCheckParams))
	}
	return interceptor(ctx, in, info, handler)
}

// CBR_ServiceDesc is the grpc.ServiceDesc for CBR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CBR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cbr.CBR",
	HandlerType: (*CBRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSymbols",
			Handler:    _CBR_GetSymbols_Handler,
		},
		{
			MethodName: "GetValues",
			Handler:    _CBR_GetValues_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _CBR_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbr/cbr.proto",
}
