// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: support/tickets.proto

package supportv1

import (
	common "github.com/x3a-tech/contract-go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TicketState int32

const (
	TicketState_TICKET_STATE_UNSPECIFIED TicketState = 0
	TicketState_Open                     TicketState = 1
	TicketState_InWork                   TicketState = 2
	TicketState_AwaitingClient           TicketState = 3
	TicketState_Closed                   TicketState = 4
)

// Enum value maps for TicketState.
var (
	TicketState_name = map[int32]string{
		0: "TICKET_STATE_UNSPECIFIED",
		1: "Open",
		2: "InWork",
		3: "AwaitingClient",
		4: "Closed",
	}
	TicketState_value = map[string]int32{
		"TICKET_STATE_UNSPECIFIED": 0,
		"Open":                     1,
		"InWork":                   2,
		"AwaitingClient":           3,
		"Closed":                   4,
	}
)

func (x TicketState) Enum() *TicketState {
	p := new(TicketState)
	*p = x
	return p
}

func (x TicketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketState) Descriptor() protoreflect.EnumDescriptor {
	return file_support_tickets_proto_enumTypes[0].Descriptor()
}

func (TicketState) Type() protoreflect.EnumType {
	return &file_support_tickets_proto_enumTypes[0]
}

func (x TicketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketState.Descriptor instead.
func (TicketState) EnumDescriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{0}
}

type TicketType int32

const (
	TicketType_TICKET_TYPE_UNSPECIFIED TicketType = 0
	TicketType_PaymentAndSubscription  TicketType = 1
	TicketType_Bugs                    TicketType = 2
	TicketType_Account                 TicketType = 3
	TicketType_Functional              TicketType = 4
	TicketType_Other                   TicketType = 5
)

// Enum value maps for TicketType.
var (
	TicketType_name = map[int32]string{
		0: "TICKET_TYPE_UNSPECIFIED",
		1: "PaymentAndSubscription",
		2: "Bugs",
		3: "Account",
		4: "Functional",
		5: "Other",
	}
	TicketType_value = map[string]int32{
		"TICKET_TYPE_UNSPECIFIED": 0,
		"PaymentAndSubscription":  1,
		"Bugs":                    2,
		"Account":                 3,
		"Functional":              4,
		"Other":                   5,
	}
)

func (x TicketType) Enum() *TicketType {
	p := new(TicketType)
	*p = x
	return p
}

func (x TicketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketType) Descriptor() protoreflect.EnumDescriptor {
	return file_support_tickets_proto_enumTypes[1].Descriptor()
}

func (TicketType) Type() protoreflect.EnumType {
	return &file_support_tickets_proto_enumTypes[1]
}

func (x TicketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketType.Descriptor instead.
func (TicketType) EnumDescriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{1}
}

type Ticket struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 TicketType             `protobuf:"varint,2,opt,name=type,proto3,enum=support.TicketType" json:"type,omitempty"`
	State                TicketState            `protobuf:"varint,3,opt,name=state,proto3,enum=support.TicketState" json:"state,omitempty"`
	Subject              string                 `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	AccountUuid          []byte                 `protobuf:"bytes,5,opt,name=account_uuid,json=accountUuid,proto3,oneof" json:"account_uuid,omitempty"`
	SupportId            *int32                 `protobuf:"varint,6,opt,name=support_id,json=supportId,proto3,oneof" json:"support_id,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastClientMessageAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_client_message_at,json=lastClientMessageAt,proto3" json:"last_client_message_at,omitempty"`
	LastSupportMessageAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_support_message_at,json=lastSupportMessageAt,proto3" json:"last_support_message_at,omitempty"`
	ClosedAt             *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=closed_at,json=closedAt,proto3,oneof" json:"closed_at,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	mi := &file_support_tickets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{0}
}

func (x *Ticket) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ticket) GetType() TicketType {
	if x != nil {
		return x.Type
	}
	return TicketType_TICKET_TYPE_UNSPECIFIED
}

func (x *Ticket) GetState() TicketState {
	if x != nil {
		return x.State
	}
	return TicketState_TICKET_STATE_UNSPECIFIED
}

func (x *Ticket) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Ticket) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *Ticket) GetSupportId() int32 {
	if x != nil && x.SupportId != nil {
		return *x.SupportId
	}
	return 0
}

func (x *Ticket) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Ticket) GetLastClientMessageAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastClientMessageAt
	}
	return nil
}

func (x *Ticket) GetLastSupportMessageAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSupportMessageAt
	}
	return nil
}

func (x *Ticket) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

type TicketDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *Ticket                `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Messages      []*TicketMessage       `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketDetail) Reset() {
	*x = TicketDetail{}
	mi := &file_support_tickets_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketDetail) ProtoMessage() {}

func (x *TicketDetail) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketDetail.ProtoReflect.Descriptor instead.
func (*TicketDetail) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{1}
}

func (x *TicketDetail) GetMeta() *Ticket {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TicketDetail) GetMessages() []*TicketMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type TicketMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AccountUuid   []byte                 `protobuf:"bytes,3,opt,name=account_uuid,json=accountUuid,proto3,oneof" json:"account_uuid,omitempty"`
	SupportId     *int32                 `protobuf:"varint,4,opt,name=support_id,json=supportId,proto3,oneof" json:"support_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketMessage) Reset() {
	*x = TicketMessage{}
	mi := &file_support_tickets_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketMessage) ProtoMessage() {}

func (x *TicketMessage) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketMessage.ProtoReflect.Descriptor instead.
func (*TicketMessage) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{2}
}

func (x *TicketMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TicketMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TicketMessage) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *TicketMessage) GetSupportId() int32 {
	if x != nil && x.SupportId != nil {
		return *x.SupportId
	}
	return 0
}

func (x *TicketMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type TicketsAccountFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *string                `protobuf:"bytes,1,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Type          *TicketType            `protobuf:"varint,2,opt,name=type,proto3,enum=support.TicketType,oneof" json:"type,omitempty"`
	State         *TicketState           `protobuf:"varint,3,opt,name=state,proto3,enum=support.TicketState,oneof" json:"state,omitempty"`
	ListParams    *common.ListParams     `protobuf:"bytes,4,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketsAccountFilter) Reset() {
	*x = TicketsAccountFilter{}
	mi := &file_support_tickets_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketsAccountFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsAccountFilter) ProtoMessage() {}

func (x *TicketsAccountFilter) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsAccountFilter.ProtoReflect.Descriptor instead.
func (*TicketsAccountFilter) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{3}
}

func (x *TicketsAccountFilter) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *TicketsAccountFilter) GetType() TicketType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TicketType_TICKET_TYPE_UNSPECIFIED
}

func (x *TicketsAccountFilter) GetState() TicketState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return TicketState_TICKET_STATE_UNSPECIFIED
}

func (x *TicketsAccountFilter) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

type TicketsSupportFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *string                `protobuf:"bytes,1,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Type          *TicketType            `protobuf:"varint,2,opt,name=type,proto3,enum=support.TicketType,oneof" json:"type,omitempty"`
	State         *TicketState           `protobuf:"varint,3,opt,name=state,proto3,enum=support.TicketState,oneof" json:"state,omitempty"`
	AccountUuid   []byte                 `protobuf:"bytes,4,opt,name=account_uuid,json=accountUuid,proto3,oneof" json:"account_uuid,omitempty"`
	ListParams    *common.ListParams     `protobuf:"bytes,5,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketsSupportFilter) Reset() {
	*x = TicketsSupportFilter{}
	mi := &file_support_tickets_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketsSupportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketsSupportFilter) ProtoMessage() {}

func (x *TicketsSupportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketsSupportFilter.ProtoReflect.Descriptor instead.
func (*TicketsSupportFilter) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{4}
}

func (x *TicketsSupportFilter) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *TicketsSupportFilter) GetType() TicketType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TicketType_TICKET_TYPE_UNSPECIFIED
}

func (x *TicketsSupportFilter) GetState() TicketState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return TicketState_TICKET_STATE_UNSPECIFIED
}

func (x *TicketsSupportFilter) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *TicketsSupportFilter) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

type GetsTicketsByAccountParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *TicketsAccountFilter  `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	ListParams    *common.ListParams     `protobuf:"bytes,2,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetsTicketsByAccountParams) Reset() {
	*x = GetsTicketsByAccountParams{}
	mi := &file_support_tickets_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetsTicketsByAccountParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetsTicketsByAccountParams) ProtoMessage() {}

func (x *GetsTicketsByAccountParams) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetsTicketsByAccountParams.ProtoReflect.Descriptor instead.
func (*GetsTicketsByAccountParams) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{5}
}

func (x *GetsTicketsByAccountParams) GetFilter() *TicketsAccountFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetsTicketsByAccountParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

type GetsTicketsByAccountParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *GetsTicketsParams     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetsTicketsByAccountParamsInner) Reset() {
	*x = GetsTicketsByAccountParamsInner{}
	mi := &file_support_tickets_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetsTicketsByAccountParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetsTicketsByAccountParamsInner) ProtoMessage() {}

func (x *GetsTicketsByAccountParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetsTicketsByAccountParamsInner.ProtoReflect.Descriptor instead.
func (*GetsTicketsByAccountParamsInner) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{6}
}

func (x *GetsTicketsByAccountParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *GetsTicketsByAccountParamsInner) GetData() *GetsTicketsParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetsTicketsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *TicketsAccountFilter  `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	ListParams    *common.ListParams     `protobuf:"bytes,2,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetsTicketsParams) Reset() {
	*x = GetsTicketsParams{}
	mi := &file_support_tickets_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetsTicketsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetsTicketsParams) ProtoMessage() {}

func (x *GetsTicketsParams) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetsTicketsParams.ProtoReflect.Descriptor instead.
func (*GetsTicketsParams) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{7}
}

func (x *GetsTicketsParams) GetFilter() *TicketsAccountFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetsTicketsParams) GetListParams() *common.ListParams {
	if x != nil {
		return x.ListParams
	}
	return nil
}

type GetsTicketsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tickets       []*Ticket              `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetsTicketsResponse) Reset() {
	*x = GetsTicketsResponse{}
	mi := &file_support_tickets_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetsTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetsTicketsResponse) ProtoMessage() {}

func (x *GetsTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetsTicketsResponse.ProtoReflect.Descriptor instead.
func (*GetsTicketsResponse) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{8}
}

func (x *GetsTicketsResponse) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type TakeTicketsParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           int32                  `protobuf:"varint,1,opt,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeTicketsParams) Reset() {
	*x = TakeTicketsParams{}
	mi := &file_support_tickets_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeTicketsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeTicketsParams) ProtoMessage() {}

func (x *TakeTicketsParams) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeTicketsParams.ProtoReflect.Descriptor instead.
func (*TakeTicketsParams) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{9}
}

func (x *TakeTicketsParams) GetIds() int32 {
	if x != nil {
		return x.Ids
	}
	return 0
}

type TakeTicketsParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SupportId     int32                  `protobuf:"varint,1,opt,name=support_id,json=supportId,proto3" json:"support_id,omitempty"`
	Data          *TakeTicketsParams     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeTicketsParamsInner) Reset() {
	*x = TakeTicketsParamsInner{}
	mi := &file_support_tickets_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeTicketsParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeTicketsParamsInner) ProtoMessage() {}

func (x *TakeTicketsParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeTicketsParamsInner.ProtoReflect.Descriptor instead.
func (*TakeTicketsParamsInner) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{10}
}

func (x *TakeTicketsParamsInner) GetSupportId() int32 {
	if x != nil {
		return x.SupportId
	}
	return 0
}

func (x *TakeTicketsParamsInner) GetData() *TakeTicketsParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateTicketParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          TicketType             `protobuf:"varint,1,opt,name=type,proto3,enum=support.TicketType" json:"type,omitempty"`
	Subject       string                 `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTicketParams) Reset() {
	*x = CreateTicketParams{}
	mi := &file_support_tickets_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTicketParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketParams) ProtoMessage() {}

func (x *CreateTicketParams) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketParams.ProtoReflect.Descriptor instead.
func (*CreateTicketParams) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{11}
}

func (x *CreateTicketParams) GetType() TicketType {
	if x != nil {
		return x.Type
	}
	return TicketType_TICKET_TYPE_UNSPECIFIED
}

func (x *CreateTicketParams) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateTicketParams) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateTicketParamsInner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountUuid   []byte                 `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *CreateTicketParams    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTicketParamsInner) Reset() {
	*x = CreateTicketParamsInner{}
	mi := &file_support_tickets_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTicketParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketParamsInner) ProtoMessage() {}

func (x *CreateTicketParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketParamsInner.ProtoReflect.Descriptor instead.
func (*CreateTicketParamsInner) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{12}
}

func (x *CreateTicketParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *CreateTicketParamsInner) GetData() *CreateTicketParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateTicketMessageParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TicketId      int32                  `protobuf:"varint,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTicketMessageParams) Reset() {
	*x = CreateTicketMessageParams{}
	mi := &file_support_tickets_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTicketMessageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketMessageParams) ProtoMessage() {}

func (x *CreateTicketMessageParams) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketMessageParams.ProtoReflect.Descriptor instead.
func (*CreateTicketMessageParams) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{13}
}

func (x *CreateTicketMessageParams) GetTicketId() int32 {
	if x != nil {
		return x.TicketId
	}
	return 0
}

func (x *CreateTicketMessageParams) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReplyTicketFromUserParamsInner struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	AccountUuid   []byte                     `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *CreateTicketMessageParams `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplyTicketFromUserParamsInner) Reset() {
	*x = ReplyTicketFromUserParamsInner{}
	mi := &file_support_tickets_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyTicketFromUserParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyTicketFromUserParamsInner) ProtoMessage() {}

func (x *ReplyTicketFromUserParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyTicketFromUserParamsInner.ProtoReflect.Descriptor instead.
func (*ReplyTicketFromUserParamsInner) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{14}
}

func (x *ReplyTicketFromUserParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *ReplyTicketFromUserParamsInner) GetData() *CreateTicketMessageParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReplyTicketFromSupportParamsInner struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	SupportId     int32                      `protobuf:"varint,1,opt,name=support_id,json=supportId,proto3" json:"support_id,omitempty"`
	Data          *CreateTicketMessageParams `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplyTicketFromSupportParamsInner) Reset() {
	*x = ReplyTicketFromSupportParamsInner{}
	mi := &file_support_tickets_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyTicketFromSupportParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyTicketFromSupportParamsInner) ProtoMessage() {}

func (x *ReplyTicketFromSupportParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyTicketFromSupportParamsInner.ProtoReflect.Descriptor instead.
func (*ReplyTicketFromSupportParamsInner) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{15}
}

func (x *ReplyTicketFromSupportParamsInner) GetSupportId() int32 {
	if x != nil {
		return x.SupportId
	}
	return 0
}

func (x *ReplyTicketFromSupportParamsInner) GetData() *CreateTicketMessageParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloseTicketFromAccountParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TicketId      int32                  `protobuf:"varint,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseTicketFromAccountParams) Reset() {
	*x = CloseTicketFromAccountParams{}
	mi := &file_support_tickets_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTicketFromAccountParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTicketFromAccountParams) ProtoMessage() {}

func (x *CloseTicketFromAccountParams) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTicketFromAccountParams.ProtoReflect.Descriptor instead.
func (*CloseTicketFromAccountParams) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{16}
}

func (x *CloseTicketFromAccountParams) GetTicketId() int32 {
	if x != nil {
		return x.TicketId
	}
	return 0
}

type CloseTicketFromAccountParamsInner struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	AccountUuid   []byte                        `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
	Data          *CloseTicketFromAccountParams `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseTicketFromAccountParamsInner) Reset() {
	*x = CloseTicketFromAccountParamsInner{}
	mi := &file_support_tickets_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTicketFromAccountParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTicketFromAccountParamsInner) ProtoMessage() {}

func (x *CloseTicketFromAccountParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTicketFromAccountParamsInner.ProtoReflect.Descriptor instead.
func (*CloseTicketFromAccountParamsInner) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{17}
}

func (x *CloseTicketFromAccountParamsInner) GetAccountUuid() []byte {
	if x != nil {
		return x.AccountUuid
	}
	return nil
}

func (x *CloseTicketFromAccountParamsInner) GetData() *CloseTicketFromAccountParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloseTicketFromSupportParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TicketId      int32                  `protobuf:"varint,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseTicketFromSupportParams) Reset() {
	*x = CloseTicketFromSupportParams{}
	mi := &file_support_tickets_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTicketFromSupportParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTicketFromSupportParams) ProtoMessage() {}

func (x *CloseTicketFromSupportParams) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTicketFromSupportParams.ProtoReflect.Descriptor instead.
func (*CloseTicketFromSupportParams) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{18}
}

func (x *CloseTicketFromSupportParams) GetTicketId() int32 {
	if x != nil {
		return x.TicketId
	}
	return 0
}

type CloseTicketFromSupportParamsInner struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	SupportId     int32                         `protobuf:"varint,1,opt,name=support_id,json=supportId,proto3" json:"support_id,omitempty"`
	Data          *CloseTicketFromSupportParams `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseTicketFromSupportParamsInner) Reset() {
	*x = CloseTicketFromSupportParamsInner{}
	mi := &file_support_tickets_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTicketFromSupportParamsInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTicketFromSupportParamsInner) ProtoMessage() {}

func (x *CloseTicketFromSupportParamsInner) ProtoReflect() protoreflect.Message {
	mi := &file_support_tickets_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTicketFromSupportParamsInner.ProtoReflect.Descriptor instead.
func (*CloseTicketFromSupportParamsInner) Descriptor() ([]byte, []int) {
	return file_support_tickets_proto_rawDescGZIP(), []int{19}
}

func (x *CloseTicketFromSupportParamsInner) GetSupportId() int32 {
	if x != nil {
		return x.SupportId
	}
	return 0
}

func (x *CloseTicketFromSupportParamsInner) GetData() *CloseTicketFromSupportParams {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_support_tickets_proto protoreflect.FileDescriptor

var file_support_tickets_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x04, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x08, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x67, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x14, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x73, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x74, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x73, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x40, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x73,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x25, 0x0a, 0x11, 0x54, 0x61,
	0x6b, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x67, 0x0a, 0x16, 0x54, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x7b, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a,
	0x21, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x1c, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x21, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x1c, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x21, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x61, 0x0a, 0x0b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x77, 0x0a, 0x0a, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x75, 0x67, 0x73, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x05, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x78, 0x33, 0x61, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x3b, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_support_tickets_proto_rawDescOnce sync.Once
	file_support_tickets_proto_rawDescData []byte
)

func file_support_tickets_proto_rawDescGZIP() []byte {
	file_support_tickets_proto_rawDescOnce.Do(func() {
		file_support_tickets_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_support_tickets_proto_rawDesc), len(file_support_tickets_proto_rawDesc)))
	})
	return file_support_tickets_proto_rawDescData
}

var file_support_tickets_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_support_tickets_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_support_tickets_proto_goTypes = []any{
	(TicketState)(0),                          // 0: support.TicketState
	(TicketType)(0),                           // 1: support.TicketType
	(*Ticket)(nil),                            // 2: support.Ticket
	(*TicketDetail)(nil),                      // 3: support.TicketDetail
	(*TicketMessage)(nil),                     // 4: support.TicketMessage
	(*TicketsAccountFilter)(nil),              // 5: support.TicketsAccountFilter
	(*TicketsSupportFilter)(nil),              // 6: support.TicketsSupportFilter
	(*GetsTicketsByAccountParams)(nil),        // 7: support.GetsTicketsByAccountParams
	(*GetsTicketsByAccountParamsInner)(nil),   // 8: support.GetsTicketsByAccountParamsInner
	(*GetsTicketsParams)(nil),                 // 9: support.GetsTicketsParams
	(*GetsTicketsResponse)(nil),               // 10: support.GetsTicketsResponse
	(*TakeTicketsParams)(nil),                 // 11: support.TakeTicketsParams
	(*TakeTicketsParamsInner)(nil),            // 12: support.TakeTicketsParamsInner
	(*CreateTicketParams)(nil),                // 13: support.CreateTicketParams
	(*CreateTicketParamsInner)(nil),           // 14: support.CreateTicketParamsInner
	(*CreateTicketMessageParams)(nil),         // 15: support.CreateTicketMessageParams
	(*ReplyTicketFromUserParamsInner)(nil),    // 16: support.ReplyTicketFromUserParamsInner
	(*ReplyTicketFromSupportParamsInner)(nil), // 17: support.ReplyTicketFromSupportParamsInner
	(*CloseTicketFromAccountParams)(nil),      // 18: support.CloseTicketFromAccountParams
	(*CloseTicketFromAccountParamsInner)(nil), // 19: support.CloseTicketFromAccountParamsInner
	(*CloseTicketFromSupportParams)(nil),      // 20: support.CloseTicketFromSupportParams
	(*CloseTicketFromSupportParamsInner)(nil), // 21: support.CloseTicketFromSupportParamsInner
	(*timestamppb.Timestamp)(nil),             // 22: google.protobuf.Timestamp
	(*common.ListParams)(nil),                 // 23: common.ListParams
}
var file_support_tickets_proto_depIdxs = []int32{
	1,  // 0: support.Ticket.type:type_name -> support.TicketType
	0,  // 1: support.Ticket.state:type_name -> support.TicketState
	22, // 2: support.Ticket.created_at:type_name -> google.protobuf.Timestamp
	22, // 3: support.Ticket.last_client_message_at:type_name -> google.protobuf.Timestamp
	22, // 4: support.Ticket.last_support_message_at:type_name -> google.protobuf.Timestamp
	22, // 5: support.Ticket.closed_at:type_name -> google.protobuf.Timestamp
	2,  // 6: support.TicketDetail.meta:type_name -> support.Ticket
	4,  // 7: support.TicketDetail.messages:type_name -> support.TicketMessage
	22, // 8: support.TicketMessage.created_at:type_name -> google.protobuf.Timestamp
	1,  // 9: support.TicketsAccountFilter.type:type_name -> support.TicketType
	0,  // 10: support.TicketsAccountFilter.state:type_name -> support.TicketState
	23, // 11: support.TicketsAccountFilter.list_params:type_name -> common.ListParams
	1,  // 12: support.TicketsSupportFilter.type:type_name -> support.TicketType
	0,  // 13: support.TicketsSupportFilter.state:type_name -> support.TicketState
	23, // 14: support.TicketsSupportFilter.list_params:type_name -> common.ListParams
	5,  // 15: support.GetsTicketsByAccountParams.filter:type_name -> support.TicketsAccountFilter
	23, // 16: support.GetsTicketsByAccountParams.list_params:type_name -> common.ListParams
	9,  // 17: support.GetsTicketsByAccountParamsInner.data:type_name -> support.GetsTicketsParams
	5,  // 18: support.GetsTicketsParams.filter:type_name -> support.TicketsAccountFilter
	23, // 19: support.GetsTicketsParams.list_params:type_name -> common.ListParams
	2,  // 20: support.GetsTicketsResponse.tickets:type_name -> support.Ticket
	11, // 21: support.TakeTicketsParamsInner.data:type_name -> support.TakeTicketsParams
	1,  // 22: support.CreateTicketParams.type:type_name -> support.TicketType
	13, // 23: support.CreateTicketParamsInner.data:type_name -> support.CreateTicketParams
	15, // 24: support.ReplyTicketFromUserParamsInner.data:type_name -> support.CreateTicketMessageParams
	15, // 25: support.ReplyTicketFromSupportParamsInner.data:type_name -> support.CreateTicketMessageParams
	18, // 26: support.CloseTicketFromAccountParamsInner.data:type_name -> support.CloseTicketFromAccountParams
	20, // 27: support.CloseTicketFromSupportParamsInner.data:type_name -> support.CloseTicketFromSupportParams
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_support_tickets_proto_init() }
func file_support_tickets_proto_init() {
	if File_support_tickets_proto != nil {
		return
	}
	file_support_tickets_proto_msgTypes[0].OneofWrappers = []any{}
	file_support_tickets_proto_msgTypes[2].OneofWrappers = []any{}
	file_support_tickets_proto_msgTypes[3].OneofWrappers = []any{}
	file_support_tickets_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_support_tickets_proto_rawDesc), len(file_support_tickets_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_support_tickets_proto_goTypes,
		DependencyIndexes: file_support_tickets_proto_depIdxs,
		EnumInfos:         file_support_tickets_proto_enumTypes,
		MessageInfos:      file_support_tickets_proto_msgTypes,
	}.Build()
	File_support_tickets_proto = out.File
	file_support_tickets_proto_goTypes = nil
	file_support_tickets_proto_depIdxs = nil
}
