// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: support/support.proto

package supportv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Support_GetTickets_FullMethodName             = "/support.Support/GetTickets"
	Support_GetTicketsByAccount_FullMethodName    = "/support.Support/GetTicketsByAccount"
	Support_CreateTicket_FullMethodName           = "/support.Support/CreateTicket"
	Support_ReplyTicketFromUser_FullMethodName    = "/support.Support/ReplyTicketFromUser"
	Support_ReplyTicketFromSupport_FullMethodName = "/support.Support/ReplyTicketFromSupport"
	Support_CloseTicketFromAccount_FullMethodName = "/support.Support/CloseTicketFromAccount"
	Support_CloseTicketFromSupport_FullMethodName = "/support.Support/CloseTicketFromSupport"
	Support_TakeTickets_FullMethodName            = "/support.Support/TakeTickets"
)

// SupportClient is the client API for Support service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupportClient interface {
	// Tickets
	GetTickets(ctx context.Context, in *GetsTicketsParams, opts ...grpc.CallOption) (*GetsTicketsResponse, error)
	GetTicketsByAccount(ctx context.Context, in *GetsTicketsByAccountParamsInner, opts ...grpc.CallOption) (*GetsTicketsResponse, error)
	CreateTicket(ctx context.Context, in *CreateTicketParamsInner, opts ...grpc.CallOption) (*Ticket, error)
	ReplyTicketFromUser(ctx context.Context, in *ReplyTicketFromUserParamsInner, opts ...grpc.CallOption) (*TicketMessage, error)
	ReplyTicketFromSupport(ctx context.Context, in *ReplyTicketFromSupportParamsInner, opts ...grpc.CallOption) (*TicketMessage, error)
	CloseTicketFromAccount(ctx context.Context, in *CloseTicketFromAccountParamsInner, opts ...grpc.CallOption) (*anypb.Any, error)
	CloseTicketFromSupport(ctx context.Context, in *CloseTicketFromSupportParamsInner, opts ...grpc.CallOption) (*anypb.Any, error)
	TakeTickets(ctx context.Context, in *TakeTicketsParamsInner, opts ...grpc.CallOption) (*anypb.Any, error)
}

type supportClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportClient(cc grpc.ClientConnInterface) SupportClient {
	return &supportClient{cc}
}

func (c *supportClient) GetTickets(ctx context.Context, in *GetsTicketsParams, opts ...grpc.CallOption) (*GetsTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetsTicketsResponse)
	err := c.cc.Invoke(ctx, Support_GetTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) GetTicketsByAccount(ctx context.Context, in *GetsTicketsByAccountParamsInner, opts ...grpc.CallOption) (*GetsTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetsTicketsResponse)
	err := c.cc.Invoke(ctx, Support_GetTicketsByAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) CreateTicket(ctx context.Context, in *CreateTicketParamsInner, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, Support_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) ReplyTicketFromUser(ctx context.Context, in *ReplyTicketFromUserParamsInner, opts ...grpc.CallOption) (*TicketMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketMessage)
	err := c.cc.Invoke(ctx, Support_ReplyTicketFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) ReplyTicketFromSupport(ctx context.Context, in *ReplyTicketFromSupportParamsInner, opts ...grpc.CallOption) (*TicketMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketMessage)
	err := c.cc.Invoke(ctx, Support_ReplyTicketFromSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) CloseTicketFromAccount(ctx context.Context, in *CloseTicketFromAccountParamsInner, opts ...grpc.CallOption) (*anypb.Any, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, Support_CloseTicketFromAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) CloseTicketFromSupport(ctx context.Context, in *CloseTicketFromSupportParamsInner, opts ...grpc.CallOption) (*anypb.Any, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, Support_CloseTicketFromSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) TakeTickets(ctx context.Context, in *TakeTicketsParamsInner, opts ...grpc.CallOption) (*anypb.Any, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, Support_TakeTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupportServer is the server API for Support service.
// All implementations must embed UnimplementedSupportServer
// for forward compatibility.
type SupportServer interface {
	// Tickets
	GetTickets(context.Context, *GetsTicketsParams) (*GetsTicketsResponse, error)
	GetTicketsByAccount(context.Context, *GetsTicketsByAccountParamsInner) (*GetsTicketsResponse, error)
	CreateTicket(context.Context, *CreateTicketParamsInner) (*Ticket, error)
	ReplyTicketFromUser(context.Context, *ReplyTicketFromUserParamsInner) (*TicketMessage, error)
	ReplyTicketFromSupport(context.Context, *ReplyTicketFromSupportParamsInner) (*TicketMessage, error)
	CloseTicketFromAccount(context.Context, *CloseTicketFromAccountParamsInner) (*anypb.Any, error)
	CloseTicketFromSupport(context.Context, *CloseTicketFromSupportParamsInner) (*anypb.Any, error)
	TakeTickets(context.Context, *TakeTicketsParamsInner) (*anypb.Any, error)
	mustEmbedUnimplementedSupportServer()
}

// UnimplementedSupportServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupportServer struct{}

func (UnimplementedSupportServer) GetTickets(context.Context, *GetsTicketsParams) (*GetsTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickets not implemented")
}
func (UnimplementedSupportServer) GetTicketsByAccount(context.Context, *GetsTicketsByAccountParamsInner) (*GetsTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketsByAccount not implemented")
}
func (UnimplementedSupportServer) CreateTicket(context.Context, *CreateTicketParamsInner) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedSupportServer) ReplyTicketFromUser(context.Context, *ReplyTicketFromUserParamsInner) (*TicketMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyTicketFromUser not implemented")
}
func (UnimplementedSupportServer) ReplyTicketFromSupport(context.Context, *ReplyTicketFromSupportParamsInner) (*TicketMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyTicketFromSupport not implemented")
}
func (UnimplementedSupportServer) CloseTicketFromAccount(context.Context, *CloseTicketFromAccountParamsInner) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicketFromAccount not implemented")
}
func (UnimplementedSupportServer) CloseTicketFromSupport(context.Context, *CloseTicketFromSupportParamsInner) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicketFromSupport not implemented")
}
func (UnimplementedSupportServer) TakeTickets(context.Context, *TakeTicketsParamsInner) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeTickets not implemented")
}
func (UnimplementedSupportServer) mustEmbedUnimplementedSupportServer() {}
func (UnimplementedSupportServer) testEmbeddedByValue()                 {}

// UnsafeSupportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupportServer will
// result in compilation errors.
type UnsafeSupportServer interface {
	mustEmbedUnimplementedSupportServer()
}

func RegisterSupportServer(s grpc.ServiceRegistrar, srv SupportServer) {
	// If the following call pancis, it indicates UnimplementedSupportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Support_ServiceDesc, srv)
}

func _Support_GetTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsTicketsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).GetTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_GetTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).GetTickets(ctx, req.(*GetsTicketsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_GetTicketsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsTicketsByAccountParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).GetTicketsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_GetTicketsByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).GetTicketsByAccount(ctx, req.(*GetsTicketsByAccountParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).CreateTicket(ctx, req.(*CreateTicketParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_ReplyTicketFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyTicketFromUserParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).ReplyTicketFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_ReplyTicketFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).ReplyTicketFromUser(ctx, req.(*ReplyTicketFromUserParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_ReplyTicketFromSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyTicketFromSupportParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).ReplyTicketFromSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_ReplyTicketFromSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).ReplyTicketFromSupport(ctx, req.(*ReplyTicketFromSupportParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_CloseTicketFromAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketFromAccountParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).CloseTicketFromAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_CloseTicketFromAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).CloseTicketFromAccount(ctx, req.(*CloseTicketFromAccountParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_CloseTicketFromSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketFromSupportParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).CloseTicketFromSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_CloseTicketFromSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).CloseTicketFromSupport(ctx, req.(*CloseTicketFromSupportParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_TakeTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeTicketsParamsInner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).TakeTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_TakeTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).TakeTickets(ctx, req.(*TakeTicketsParamsInner))
	}
	return interceptor(ctx, in, info, handler)
}

// Support_ServiceDesc is the grpc.ServiceDesc for Support service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Support_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "support.Support",
	HandlerType: (*SupportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTickets",
			Handler:    _Support_GetTickets_Handler,
		},
		{
			MethodName: "GetTicketsByAccount",
			Handler:    _Support_GetTicketsByAccount_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _Support_CreateTicket_Handler,
		},
		{
			MethodName: "ReplyTicketFromUser",
			Handler:    _Support_ReplyTicketFromUser_Handler,
		},
		{
			MethodName: "ReplyTicketFromSupport",
			Handler:    _Support_ReplyTicketFromSupport_Handler,
		},
		{
			MethodName: "CloseTicketFromAccount",
			Handler:    _Support_CloseTicketFromAccount_Handler,
		},
		{
			MethodName: "CloseTicketFromSupport",
			Handler:    _Support_CloseTicketFromSupport_Handler,
		},
		{
			MethodName: "TakeTickets",
			Handler:    _Support_TakeTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "support/support.proto",
}
