// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: account/account.proto

package accountv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Users_TryRegistryFromTelegram_FullMethodName = "/users.Users/TryRegistryFromTelegram"
	Users_GetAccountShort_FullMethodName         = "/users.Users/GetAccountShort"
	Users_GetFavorites_FullMethodName            = "/users.Users/GetFavorites"
	Users_HasFavorites_FullMethodName            = "/users.Users/HasFavorites"
	Users_ToggleFavorite_FullMethodName          = "/users.Users/ToggleFavorite"
	Users_MoveFavorite_FullMethodName            = "/users.Users/MoveFavorite"
	Users_CreateFavoriteFolder_FullMethodName    = "/users.Users/CreateFavoriteFolder"
	Users_UpdateFavoriteFolder_FullMethodName    = "/users.Users/UpdateFavoriteFolder"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	TryRegistryFromTelegram(ctx context.Context, in *TryRegistryFromTelegramParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAccountShort(ctx context.Context, in *GetAccountParams, opts ...grpc.CallOption) (*AccountShort, error)
	GetFavorites(ctx context.Context, in *GetFavoritesParams, opts ...grpc.CallOption) (*GetFavoritesResponse, error)
	HasFavorites(ctx context.Context, in *HasFavoritesParams, opts ...grpc.CallOption) (*HasFavoritesResponse, error)
	ToggleFavorite(ctx context.Context, in *ToggleFavoriteParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveFavorite(ctx context.Context, in *MoveFavoriteParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateFavoriteFolder(ctx context.Context, in *CreateFavoriteFolderParams, opts ...grpc.CallOption) (*FavoriteFolder, error)
	UpdateFavoriteFolder(ctx context.Context, in *UpdateFavoriteFolderParams, opts ...grpc.CallOption) (*FavoriteFolder, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) TryRegistryFromTelegram(ctx context.Context, in *TryRegistryFromTelegramParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Users_TryRegistryFromTelegram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetAccountShort(ctx context.Context, in *GetAccountParams, opts ...grpc.CallOption) (*AccountShort, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountShort)
	err := c.cc.Invoke(ctx, Users_GetAccountShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetFavorites(ctx context.Context, in *GetFavoritesParams, opts ...grpc.CallOption) (*GetFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoritesResponse)
	err := c.cc.Invoke(ctx, Users_GetFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) HasFavorites(ctx context.Context, in *HasFavoritesParams, opts ...grpc.CallOption) (*HasFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasFavoritesResponse)
	err := c.cc.Invoke(ctx, Users_HasFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ToggleFavorite(ctx context.Context, in *ToggleFavoriteParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Users_ToggleFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) MoveFavorite(ctx context.Context, in *MoveFavoriteParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Users_MoveFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateFavoriteFolder(ctx context.Context, in *CreateFavoriteFolderParams, opts ...grpc.CallOption) (*FavoriteFolder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteFolder)
	err := c.cc.Invoke(ctx, Users_CreateFavoriteFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateFavoriteFolder(ctx context.Context, in *UpdateFavoriteFolderParams, opts ...grpc.CallOption) (*FavoriteFolder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteFolder)
	err := c.cc.Invoke(ctx, Users_UpdateFavoriteFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility.
type UsersServer interface {
	TryRegistryFromTelegram(context.Context, *TryRegistryFromTelegramParams) (*emptypb.Empty, error)
	GetAccountShort(context.Context, *GetAccountParams) (*AccountShort, error)
	GetFavorites(context.Context, *GetFavoritesParams) (*GetFavoritesResponse, error)
	HasFavorites(context.Context, *HasFavoritesParams) (*HasFavoritesResponse, error)
	ToggleFavorite(context.Context, *ToggleFavoriteParams) (*emptypb.Empty, error)
	MoveFavorite(context.Context, *MoveFavoriteParams) (*emptypb.Empty, error)
	CreateFavoriteFolder(context.Context, *CreateFavoriteFolderParams) (*FavoriteFolder, error)
	UpdateFavoriteFolder(context.Context, *UpdateFavoriteFolderParams) (*FavoriteFolder, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersServer struct{}

func (UnimplementedUsersServer) TryRegistryFromTelegram(context.Context, *TryRegistryFromTelegramParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryRegistryFromTelegram not implemented")
}
func (UnimplementedUsersServer) GetAccountShort(context.Context, *GetAccountParams) (*AccountShort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountShort not implemented")
}
func (UnimplementedUsersServer) GetFavorites(context.Context, *GetFavoritesParams) (*GetFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedUsersServer) HasFavorites(context.Context, *HasFavoritesParams) (*HasFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasFavorites not implemented")
}
func (UnimplementedUsersServer) ToggleFavorite(context.Context, *ToggleFavoriteParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFavorite not implemented")
}
func (UnimplementedUsersServer) MoveFavorite(context.Context, *MoveFavoriteParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFavorite not implemented")
}
func (UnimplementedUsersServer) CreateFavoriteFolder(context.Context, *CreateFavoriteFolderParams) (*FavoriteFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavoriteFolder not implemented")
}
func (UnimplementedUsersServer) UpdateFavoriteFolder(context.Context, *UpdateFavoriteFolderParams) (*FavoriteFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFavoriteFolder not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}
func (UnimplementedUsersServer) testEmbeddedByValue()               {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	// If the following call pancis, it indicates UnimplementedUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_TryRegistryFromTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryRegistryFromTelegramParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).TryRegistryFromTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_TryRegistryFromTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).TryRegistryFromTelegram(ctx, req.(*TryRegistryFromTelegramParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetAccountShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetAccountShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetAccountShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetAccountShort(ctx, req.(*GetAccountParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetFavorites(ctx, req.(*GetFavoritesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_HasFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasFavoritesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).HasFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_HasFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).HasFavorites(ctx, req.(*HasFavoritesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ToggleFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFavoriteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ToggleFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_ToggleFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ToggleFavorite(ctx, req.(*ToggleFavoriteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_MoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFavoriteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).MoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_MoveFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).MoveFavorite(ctx, req.(*MoveFavoriteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateFavoriteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFavoriteFolderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateFavoriteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_CreateFavoriteFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateFavoriteFolder(ctx, req.(*CreateFavoriteFolderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateFavoriteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFavoriteFolderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateFavoriteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateFavoriteFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateFavoriteFolder(ctx, req.(*UpdateFavoriteFolderParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TryRegistryFromTelegram",
			Handler:    _Users_TryRegistryFromTelegram_Handler,
		},
		{
			MethodName: "GetAccountShort",
			Handler:    _Users_GetAccountShort_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _Users_GetFavorites_Handler,
		},
		{
			MethodName: "HasFavorites",
			Handler:    _Users_HasFavorites_Handler,
		},
		{
			MethodName: "ToggleFavorite",
			Handler:    _Users_ToggleFavorite_Handler,
		},
		{
			MethodName: "MoveFavorite",
			Handler:    _Users_MoveFavorite_Handler,
		},
		{
			MethodName: "CreateFavoriteFolder",
			Handler:    _Users_CreateFavoriteFolder_Handler,
		},
		{
			MethodName: "UpdateFavoriteFolder",
			Handler:    _Users_UpdateFavoriteFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account.proto",
}
